[1 of 9] Compiling FDB.MoreTypes    ( FDB/MoreTypes.hs, FDB/MoreTypes.o )

==================== Desugar (after optimization) ====================
Result size of Desugar (after optimization)
  = {terms: 108, types: 39, coercions: 33, joins: 0/0}

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
FDB.MoreTypes.$trModule :: GHC.Types.Module
[LclIdX]
FDB.MoreTypes.$trModule
  = GHC.Types.Module
      (GHC.Types.TrNameS "main"#) (GHC.Types.TrNameS "FDB.MoreTypes"#)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a2qu [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a2qu
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcInt (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.MoreTypes.$tcDateInterval :: GHC.Types.TyCon
[LclIdX]
FDB.MoreTypes.$tcDateInterval
  = GHC.Types.TyCon
      18376018677496580262##
      7294864336028437579##
      FDB.MoreTypes.$trModule
      (GHC.Types.TrNameS "DateInterval"#)
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a2qv [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a2qv
  = GHC.Types.KindRepTyConApp
      FDB.MoreTypes.$tcDateInterval (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a2qt [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a2qt = GHC.Types.KindRepFun $krep_a2qu $krep_a2qv

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.MoreTypes.$tc'Day :: GHC.Types.TyCon
[LclIdX]
FDB.MoreTypes.$tc'Day
  = GHC.Types.TyCon
      2870245755353241826##
      3795114783946290854##
      FDB.MoreTypes.$trModule
      (GHC.Types.TrNameS "'Day"#)
      0#
      $krep_a2qt

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a2eF :: GHC.Stack.Types.HasCallStack
[LclId]
$dIP_a2eF
  = (GHC.Stack.Types.pushCallStack
       (GHC.CString.unpackCString# "undefined"#,
        GHC.Stack.Types.SrcLoc
          (GHC.CString.unpackCString# "main"#)
          (GHC.CString.unpackCString# "FDB.MoreTypes"#)
          (GHC.CString.unpackCString# "./FDB/MoreTypes.hs"#)
          (GHC.Types.I# 6#)
          (GHC.Types.I# 18#)
          (GHC.Types.I# 6#)
          (GHC.Types.I# 27#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
dateFromString :: String -> Date
[LclIdX]
dateFromString
  = undefined @ 'GHC.Types.LiftedRep @ (String -> Date) $dIP_a2eF

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a2eB :: GHC.Stack.Types.HasCallStack
[LclId]
$dIP_a2eB
  = (GHC.Stack.Types.pushCallStack
       (GHC.CString.unpackCString# "undefined"#,
        GHC.Stack.Types.SrcLoc
          (GHC.CString.unpackCString# "main"#)
          (GHC.CString.unpackCString# "FDB.MoreTypes"#)
          (GHC.CString.unpackCString# "./FDB/MoreTypes.hs"#)
          (GHC.Types.I# 9#)
          (GHC.Types.I# 21#)
          (GHC.Types.I# 9#)
          (GHC.Types.I# 30#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 2, types: 4, coercions: 0, joins: 0/0}
tryDateFromString :: String -> Maybe Date
[LclIdX]
tryDateFromString
  = undefined
      @ 'GHC.Types.LiftedRep @ (String -> Maybe Date) $dIP_a2eB

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a2ex :: GHC.Stack.Types.HasCallStack
[LclId]
$dIP_a2ex
  = (GHC.Stack.Types.pushCallStack
       (GHC.CString.unpackCString# "undefined"#,
        GHC.Stack.Types.SrcLoc
          (GHC.CString.unpackCString# "main"#)
          (GHC.CString.unpackCString# "FDB.MoreTypes"#)
          (GHC.CString.unpackCString# "./FDB/MoreTypes.hs"#)
          (GHC.Types.I# 14#)
          (GHC.Types.I# 17#)
          (GHC.Types.I# 14#)
          (GHC.Types.I# 26#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 2, types: 4, coercions: 0, joins: 0/0}
minusInterval :: Date -> DateInterval -> Date
[LclIdX]
minusInterval
  = undefined
      @ 'GHC.Types.LiftedRep @ (Date -> DateInterval -> Date) $dIP_a2ex



[2 of 9] Compiling FDB.Utils        ( FDB/Utils.hs, FDB/Utils.o )

==================== Desugar (after optimization) ====================
Result size of Desugar (after optimization)
  = {terms: 40, types: 98, coercions: 0, joins: 0/0}

-- RHS size: {terms: 12, types: 15, coercions: 0, joins: 0/0}
compose2
  :: forall t t t t. (t -> t) -> (t -> t -> t) -> t -> t -> t
[LclIdX]
compose2
  = \ (@ t_a2AR)
      (@ t_a2AT)
      (@ t_a2AV)
      (@ t_a2AZ)
      (f_a2zh :: t_a2AR -> t_a2AT)
      (g_a2zi :: t_a2AV -> t_a2AZ -> t_a2AR)
      (x_a2zj :: t_a2AV)
      (y_a2zk :: t_a2AZ) ->
      f_a2zh (g_a2zi x_a2zj y_a2zk)

-- RHS size: {terms: 9, types: 17, coercions: 0, joins: 0/0}
.: :: forall t t t t. (t -> t) -> (t -> t -> t) -> t -> t -> t
[LclIdX]
.:
  = \ (@ t_a2Bo)
      (@ t_a2Bp)
      (@ t_a2Bq)
      (@ t_a2Br)
      (f_a2zl :: t_a2Bo -> t_a2Bp)
      (g_a2zm :: t_a2Bq -> t_a2Br -> t_a2Bo) ->
      compose2 @ t_a2Bo @ t_a2Bp @ t_a2Bq @ t_a2Br f_a2zl g_a2zm

-- RHS size: {terms: 10, types: 17, coercions: 0, joins: 0/0}
<&>
  :: forall (f :: * -> *) a b. Functor f => f a -> (a -> b) -> f b
[LclIdX]
<&>
  = \ (@ (f_a2Ap :: * -> *))
      (@ a_a2Aq)
      (@ b_a2Ar)
      ($dFunctor_a2At :: Functor f_a2Ap)
      (as_a2zn :: f_a2Ap a_a2Aq)
      (f_a2zo :: a_a2Aq -> b_a2Ar) ->
      <$> @ f_a2Ap @ a_a2Aq @ b_a2Ar $dFunctor_a2At f_a2zo as_a2zn

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
FDB.Utils.$trModule :: GHC.Types.Module
[LclIdX]
FDB.Utils.$trModule
  = GHC.Types.Module
      (GHC.Types.TrNameS "main"#) (GHC.Types.TrNameS "FDB.Utils"#)



[3 of 9] Compiling Utils.List       ( Utils/List.hs, Utils/List.o )

==================== Desugar (after optimization) ====================
Result size of Desugar (after optimization)
  = {terms: 54, types: 115, coercions: 0, joins: 0/0}

-- RHS size: {terms: 6, types: 12, coercions: 0, joins: 0/0}
noDuplicates :: forall a. Ord a => [a] -> [a]
[LclIdX]
noDuplicates
  = \ (@ a_a3cK) ($dOrd_a3cM :: Ord a_a3cK) ->
      . @ (Set.Set a_a3cK)
        @ [a_a3cK]
        @ [a_a3cK]
        (Set.toList @ a_a3cK)
        (Set.fromList @ a_a3cK $dOrd_a3cM)

-- RHS size: {terms: 6, types: 5, coercions: 0, joins: 0/0}
zipWithIndex :: forall a. [a] -> [(Int, a)]
[LclIdX]
zipWithIndex
  = \ (@ a_a30Z) ->
      zip
        @ Int
        @ a_a30Z
        (enumFrom @ Int GHC.Enum.$fEnumInt (GHC.Types.I# 0#))

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
zipWithIndexRight :: forall a. [a] -> [(a, Int)]
[LclIdX]
zipWithIndexRight
  = \ (@ a_a3cv) ->
      . @ [(Int, a_a3cv)]
        @ [(a_a3cv, Int)]
        @ [a_a3cv]
        (map @ (Int, a_a3cv) @ (a_a3cv, Int) (swap @ Int @ a_a3cv))
        (zipWithIndex @ a_a3cv)

-- RHS size: {terms: 27, types: 33, coercions: 0, joins: 0/0}
groupByKeyVal
  :: forall k a v. Eq k => (a -> k) -> (a -> v) -> [a] -> [(k, [v])]
[LclIdX]
groupByKeyVal
  = \ (@ k_a2ZZ)
      (@ a_a300)
      (@ v_a301)
      ($dEq_a303 :: Eq k_a2ZZ)
      (key_a2Re :: a_a300 -> k_a2ZZ)
      (val_a2Rf :: a_a300 -> v_a301)
      (xs_a2Rg :: [a_a300]) ->
      map
        @ [a_a300]
        @ (k_a2ZZ, [v_a301])
        (\ (thisGroup_a2U0 :: [a_a300]) ->
           (key_a2Re (head @ a_a300 thisGroup_a2U0),
            <$>
              @ []
              @ a_a300
              @ v_a301
              GHC.Base.$fFunctor[]
              val_a2Rf
              thisGroup_a2U0))
        (List.groupBy
           @ a_a300
           (\ (x1_a2TY :: a_a300) (x2_a2TZ :: a_a300) ->
              == @ k_a2ZZ $dEq_a303 (key_a2Re x1_a2TY) (key_a2Re x2_a2TZ))
           xs_a2Rg)

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
Utils.List.$trModule :: GHC.Types.Module
[LclIdX]
Utils.List.$trModule
  = GHC.Types.Module
      (GHC.Types.TrNameS "main"#) (GHC.Types.TrNameS "Utils.List"#)



[4 of 9] Compiling Utils.Prelude    ( Utils/Prelude.hs, Utils/Prelude.o )

==================== Desugar (after optimization) ====================
Result size of Desugar (after optimization)
  = {terms: 35, types: 106, coercions: 0, joins: 0/0}

-- RHS size: {terms: 7, types: 28, coercions: 0, joins: 0/0}
compose2
  :: forall b c a a. (b -> c) -> (a -> a -> b) -> a -> a -> c
[LclIdX]
compose2
  = \ (@ b_a3i3) (@ c_a3i4) (@ a_a3i2) (@ a_a3i5) ->
      . @ ((a_a3i5 -> b_a3i3) -> a_a3i5 -> c_a3i4)
        @ ((a_a3i2 -> a_a3i5 -> b_a3i3) -> a_a3i2 -> a_a3i5 -> c_a3i4)
        @ (b_a3i3 -> c_a3i4)
        (. @ (a_a3i5 -> b_a3i3) @ (a_a3i5 -> c_a3i4) @ a_a3i2)
        (. @ b_a3i3 @ c_a3i4 @ a_a3i5)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
.: :: forall b c a a. (b -> c) -> (a -> a -> b) -> a -> a -> c
[LclIdX]
.: = compose2

-- RHS size: {terms: 10, types: 17, coercions: 0, joins: 0/0}
<&>
  :: forall (f :: * -> *) a b. Functor f => f a -> (a -> b) -> f b
[LclIdX]
<&>
  = \ (@ (f_a3hL :: * -> *))
      (@ a_a3hM)
      (@ b_a3hN)
      ($dFunctor_a3hP :: Functor f_a3hL)
      (as_a3gA :: f_a3hL a_a3hM)
      (f_a3gB :: a_a3hM -> b_a3hN) ->
      <$> @ f_a3hL @ a_a3hM @ b_a3hN $dFunctor_a3hP f_a3gB as_a3gA

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
ignore :: forall a. a -> ()
[LclIdX]
ignore = \ (@ a_a3hr) -> const @ () @ a_a3hr GHC.Tuple.()

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
Utils.Prelude.$trModule :: GHC.Types.Module
[LclIdX]
Utils.Prelude.$trModule
  = GHC.Types.Module
      (GHC.Types.TrNameS "main"#) (GHC.Types.TrNameS "Utils.Prelude"#)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
doNothing :: IO ()
[LclIdX]
doNothing = return @ IO GHC.Base.$fMonadIO @ () GHC.Tuple.()



[5 of 9] Compiling Utils.AbstractGraph ( Utils/AbstractGraph.hs, Utils/AbstractGraph.o )

==================== Desugar (after optimization) ====================
Result size of Desugar (after optimization)
  = {terms: 648, types: 1,668, coercions: 0, joins: 0/13}

-- RHS size: {terms: 19, types: 44, coercions: 0, joins: 0/0}
$c<>_a4lO :: forall v e. Graph v e -> Graph v e -> Graph v e
[LclId]
$c<>_a4lO
  = \ (@ v_a4lL)
      (@ e_a4lM)
      (ds_d4Aa :: Graph v_a4lL e_a4lM)
      (ds_d4Ab :: Graph v_a4lL e_a4lM) ->
      case ds_d4Aa of { Graph lv_a3No le_a3Np ->
      case ds_d4Ab of { Graph rv_a3Nq re_a3Nr ->
      Utils.AbstractGraph.Graph
        @ v_a4lL
        @ e_a4lM
        (<> @ [v_a4lL] (GHC.Base.$fSemigroup[] @ v_a4lL) lv_a3No rv_a3Nq)
        (<>
           @ [(v_a4lL, e_a4lM, v_a4lL)]
           (GHC.Base.$fSemigroup[] @ (v_a4lL, e_a4lM, v_a4lL))
           le_a3Np
           re_a3Nr)
      }
      }

Rec {
-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
Utils.AbstractGraph.$fSemigroupGraph [InlPrag=NOUSERINLINE CONLIKE]
  :: forall v e. Semigroup (Graph v e)
[LclIdX[DFunId],
 Unf=DFun: \ (@ v_a3Nm) (@ e_a3Nn) ->
       GHC.Base.C:Semigroup TYPE: Graph v_a3Nm e_a3Nn
                            $c<>_a4lO @ v_a3Nm @ e_a3Nn
                            $csconcat_a4lZ @ v_a3Nm @ e_a3Nn
                            $cstimes_a4v1 @ v_a3Nm @ e_a3Nn]
Utils.AbstractGraph.$fSemigroupGraph
  = \ (@ v_a4lL) (@ e_a4lM) ->
      GHC.Base.C:Semigroup
        @ (Graph v_a4lL e_a4lM)
        ($c<>_a4lO @ v_a4lL @ e_a4lM)
        ($csconcat_a4lZ @ v_a4lL @ e_a4lM)
        ($cstimes_a4v1 @ v_a4lL @ e_a4lM)

-- RHS size: {terms: 7, types: 14, coercions: 0, joins: 0/0}
$cstimes_a4v1 [Occ=LoopBreaker]
  :: forall v e b. Integral b => b -> Graph v e -> Graph v e
[LclId]
$cstimes_a4v1
  = \ (@ v_a4lL)
      (@ e_a4lM)
      (@ b_a4vg)
      ($dIntegral_a4vi :: Integral b_a4vg) ->
      GHC.Base.$dmstimes
        @ (Graph v_a4lL e_a4lM)
        (Utils.AbstractGraph.$fSemigroupGraph @ v_a4lL @ e_a4lM)
        @ b_a4vg
        $dIntegral_a4vi

-- RHS size: {terms: 4, types: 9, coercions: 0, joins: 0/0}
$csconcat_a4lZ [Occ=LoopBreaker]
  :: forall v e. GHC.Base.NonEmpty (Graph v e) -> Graph v e
[LclId]
$csconcat_a4lZ
  = \ (@ v_a4lL) (@ e_a4lM) ->
      GHC.Base.$dmsconcat
        @ (Graph v_a4lL e_a4lM)
        (Utils.AbstractGraph.$fSemigroupGraph @ v_a4lL @ e_a4lM)
end Rec }

-- RHS size: {terms: 4, types: 9, coercions: 0, joins: 0/0}
$cmappend_a4lx :: forall v e. Graph v e -> Graph v e -> Graph v e
[LclId]
$cmappend_a4lx
  = \ (@ v_a4lk) (@ e_a4ll) ->
      <>
        @ (Graph v_a4lk e_a4ll)
        (Utils.AbstractGraph.$fSemigroupGraph @ v_a4lk @ e_a4ll)

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
$cmempty_a4lr :: forall v e. Graph v e
[LclId]
$cmempty_a4lr
  = \ (@ v_a4lk) (@ e_a4ll) ->
      Utils.AbstractGraph.Graph
        @ v_a4lk
        @ e_a4ll
        (GHC.Types.[] @ v_a4lk)
        (GHC.Types.[] @ (v_a4lk, e_a4ll, v_a4lk))

Rec {
-- RHS size: {terms: 7, types: 15, coercions: 0, joins: 0/0}
Utils.AbstractGraph.$fMonoidGraph [InlPrag=NOUSERINLINE CONLIKE]
  :: forall v e. Monoid (Graph v e)
[LclIdX[DFunId],
 Unf=DFun: \ (@ v_a3Nk) (@ e_a3Nl) ->
       GHC.Base.C:Monoid TYPE: Graph v_a3Nk e_a3Nl
                         Utils.AbstractGraph.$fSemigroupGraph @ v_a3Nk @ e_a3Nl
                         $cmempty_a4lr @ v_a3Nk @ e_a3Nl
                         $cmappend_a4lx @ v_a3Nk @ e_a3Nl
                         $cmconcat_a4lE @ v_a3Nk @ e_a3Nl]
Utils.AbstractGraph.$fMonoidGraph
  = \ (@ v_a4lk) (@ e_a4ll) ->
      GHC.Base.C:Monoid
        @ (Graph v_a4lk e_a4ll)
        (Utils.AbstractGraph.$fSemigroupGraph @ v_a4lk @ e_a4ll)
        ($cmempty_a4lr @ v_a4lk @ e_a4ll)
        ($cmappend_a4lx @ v_a4lk @ e_a4ll)
        ($cmconcat_a4lE @ v_a4lk @ e_a4ll)

-- RHS size: {terms: 4, types: 9, coercions: 0, joins: 0/0}
$cmconcat_a4lE [Occ=LoopBreaker]
  :: forall v e. [Graph v e] -> Graph v e
[LclId]
$cmconcat_a4lE
  = \ (@ v_a4lk) (@ e_a4ll) ->
      GHC.Base.$dmmconcat
        @ (Graph v_a4lk e_a4ll)
        (Utils.AbstractGraph.$fMonoidGraph @ v_a4lk @ e_a4ll)
end Rec }

-- RHS size: {terms: 7, types: 17, coercions: 0, joins: 0/0}
getNode :: forall v e. Tree v e -> v
[LclIdX]
getNode
  = \ (@ v_a4kz) (@ e_a4kA) (ds_d4zB :: Tree v_a4kz e_a4kA) ->
      case ds_d4zB of { Tree node_a43H _ [Occ=Dead] -> node_a43H }

Rec {
-- RHS size: {terms: 53, types: 142, coercions: 0, joins: 0/3}
graphFromTree [Occ=LoopBreaker]
  :: forall v e. Tree v e -> Graph v e
[LclIdX]
graphFromTree
  = \ (@ v_a4kC) (@ e_a4kD) (ds_d4zI :: Tree v_a4kC e_a4kD) ->
      case ds_d4zI of { Tree node_a43z children_a43A ->
      let {
        edgeTriplets_a43B :: [(v_a4kC, e_a4kD, v_a4kC)]
        [LclId]
        edgeTriplets_a43B
          = letrec {
              ds_d4zK [Occ=LoopBreaker]
                :: [(e_a4kD, Tree v_a4kC e_a4kD)] -> [(v_a4kC, e_a4kD, v_a4kC)]
              [LclId]
              ds_d4zK
                = \ (ds_d4zL :: [(e_a4kD, Tree v_a4kC e_a4kD)]) ->
                    case ds_d4zL of {
                      [] -> GHC.Types.[] @ (v_a4kC, e_a4kD, v_a4kC);
                      : ds_d4zM ds_d4zN ->
                        case ds_d4zM of { (edge_a43E, child_a43F) ->
                        GHC.Types.:
                          @ (v_a4kC, e_a4kD, v_a4kC)
                          (node_a43z, edge_a43E, getNode @ v_a4kC @ e_a4kD child_a43F)
                          (ds_d4zK ds_d4zN)
                        }
                    }; } in
            ds_d4zK children_a43A } in
      <>
        @ (Graph v_a4kC e_a4kD)
        (Utils.AbstractGraph.$fSemigroupGraph @ v_a4kC @ e_a4kD)
        (Utils.AbstractGraph.Graph
           @ v_a4kC
           @ e_a4kD
           (GHC.Types.: @ v_a4kC node_a43z (GHC.Types.[] @ v_a4kC))
           edgeTriplets_a43B)
        (mconcat
           @ (Graph v_a4kC e_a4kD)
           (Utils.AbstractGraph.$fMonoidGraph @ v_a4kC @ e_a4kD)
           (letrec {
              ds_d4zT [Occ=LoopBreaker]
                :: [(e_a4kD, Tree v_a4kC e_a4kD)] -> [Graph v_a4kC e_a4kD]
              [LclId]
              ds_d4zT
                = \ (ds_d4zU :: [(e_a4kD, Tree v_a4kC e_a4kD)]) ->
                    case ds_d4zU of {
                      [] -> GHC.Types.[] @ (Graph v_a4kC e_a4kD);
                      : ds_d4zV ds_d4zW ->
                        case ds_d4zV of { (_ [Occ=Dead], child_a43G) ->
                        GHC.Types.:
                          @ (Graph v_a4kC e_a4kD)
                          (graphFromTree @ v_a4kC @ e_a4kD child_a43G)
                          (ds_d4zT ds_d4zW)
                        }
                    }; } in
            ds_d4zT children_a43A))
      }
end Rec }

-- RHS size: {terms: 8, types: 13, coercions: 0, joins: 0/0}
singleton :: forall v e. v -> Graph v e
[LclIdX]
singleton
  = \ (@ v_a4ku) (@ e_a4kv) (v_a43I :: v_a4ku) ->
      Utils.AbstractGraph.Graph
        @ v_a4ku
        @ e_a4kv
        (GHC.Types.: @ v_a4ku v_a43I (GHC.Types.[] @ v_a4ku))
        (GHC.Types.[] @ (v_a4ku, e_a4kv, v_a4ku))

-- RHS size: {terms: 7, types: 17, coercions: 0, joins: 0/0}
vertices :: forall v e. Graph v e -> [v]
[LclIdX]
vertices
  = \ (@ v_a4jE) (@ e_a4jF) (ds_d4zl :: Graph v_a4jE e_a4jF) ->
      case ds_d4zl of { Graph vs_a43J _ [Occ=Dead] -> vs_a43J }

-- RHS size: {terms: 7, types: 17, coercions: 0, joins: 0/0}
edgeTriplets :: forall v e. Graph v e -> [(v, e, v)]
[LclIdX]
edgeTriplets
  = \ (@ v_a4jB) (@ e_a4jC) (ds_d4ze :: Graph v_a4jB e_a4jC) ->
      case ds_d4ze of { Graph _ [Occ=Dead] es_a43K -> es_a43K }

-- RHS size: {terms: 25, types: 52, coercions: 0, joins: 0/0}
mapEdgeTriplets
  :: forall v e f. ((v, e, v) -> f) -> Graph v e -> Graph v f
[LclIdX]
mapEdgeTriplets
  = \ (@ v_a4iX)
      (@ e_a4iY)
      (@ f_a4iZ)
      (f_a43L :: (v_a4iX, e_a4iY, v_a4iX) -> f_a4iZ)
      (ds_d4z1 :: Graph v_a4iX e_a4iY) ->
      case ds_d4z1 of { Graph vs_a43M es_a43N ->
      Utils.AbstractGraph.Graph
        @ v_a4iX
        @ f_a4iZ
        vs_a43M
        (<&>
           @ []
           @ (v_a4iX, e_a4iY, v_a4iX)
           @ (v_a4iX, f_a4iZ, v_a4iX)
           GHC.Base.$fFunctor[]
           es_a43N
           (\ (ds_d4z2 :: (v_a4iX, e_a4iY, v_a4iX)) ->
              case ds_d4z2 of { (s_a43O, e_a43P, d_a43Q) ->
              (s_a43O, f_a43L (s_a43O, e_a43P, d_a43Q), d_a43Q)
              }))
      }

-- RHS size: {terms: 30, types: 57, coercions: 0, joins: 0/0}
mapGraphTriplets
  :: forall v1 v2 e1 e2.
     (v1 -> v2) -> ((v1, e1, v1) -> e2) -> Graph v1 e1 -> Graph v2 e2
[LclIdX]
mapGraphTriplets
  = \ (@ v1_a4iv)
      (@ v2_a4iw)
      (@ e1_a4ix)
      (@ e2_a4iy)
      (fv_a43R :: v1_a4iv -> v2_a4iw)
      (fe_a43S :: (v1_a4iv, e1_a4ix, v1_a4iv) -> e2_a4iy)
      (ds_d4yQ :: Graph v1_a4iv e1_a4ix) ->
      case ds_d4yQ of { Graph vs_a43T es_a43U ->
      Utils.AbstractGraph.Graph
        @ v2_a4iw
        @ e2_a4iy
        (map @ v1_a4iv @ v2_a4iw fv_a43R vs_a43T)
        (map
           @ (v1_a4iv, e1_a4ix, v1_a4iv)
           @ (v2_a4iw, e2_a4iy, v2_a4iw)
           (\ (ds_d4yV :: (v1_a4iv, e1_a4ix, v1_a4iv)) ->
              case ds_d4yV of { (s_a43W, e_a43X, d_a43Y) ->
              (fv_a43R s_a43W, fe_a43S (s_a43W, e_a43X, d_a43Y), fv_a43R d_a43Y)
              })
           es_a43U)
      }

-- RHS size: {terms: 13, types: 22, coercions: 0, joins: 0/0}
mapEdgeInTriplet
  :: forall e f v. (e -> f) -> (v, e, v) -> (v, f, v)
[LclIdX]
mapEdgeInTriplet
  = \ (@ e_a4ir)
      (@ f_a4is)
      (@ v_a4it)
      (f_a43Z :: e_a4ir -> f_a4is)
      (ds_d4yK :: (v_a4it, e_a4ir, v_a4it)) ->
      case ds_d4yK of { (s_a440, e_a441, d_a442) ->
      (s_a440, f_a43Z e_a441, d_a442)
      }

-- RHS size: {terms: 10, types: 19, coercions: 0, joins: 0/0}
mapEdgeFromTriplet :: forall e f v. (e -> f) -> (v, e, v) -> f
[LclIdX]
mapEdgeFromTriplet
  = \ (@ e_a4in)
      (@ f_a4io)
      (@ v_a4ip)
      (f_a443 :: e_a4in -> f_a4io)
      (ds_d4yA :: (v_a4ip, e_a4in, v_a4ip)) ->
      case ds_d4yA of { (_ [Occ=Dead], e_a444, _ [Occ=Dead]) ->
      f_a443 e_a444
      }

-- RHS size: {terms: 10, types: 19, coercions: 0, joins: 0/0}
$cbimap_a4vr
  :: forall a b c d. (a -> b) -> (c -> d) -> Graph a c -> Graph b d
[LclId]
$cbimap_a4vr
  = \ (@ a_a4vx)
      (@ b_a4vy)
      (@ c_a4vz)
      (@ d_a4vA)
      (fv_a3Ns :: a_a4vx -> b_a4vy)
      (fe_a3Nt :: c_a4vz -> d_a4vA) ->
      mapGraphTriplets
        @ a_a4vx
        @ b_a4vy
        @ c_a4vz
        @ d_a4vA
        fv_a3Ns
        (mapEdgeFromTriplet @ c_a4vz @ d_a4vA @ a_a4vx fe_a3Nt)

-- RHS size: {terms: 7, types: 14, coercions: 0, joins: 0/0}
$csecond_a4w1 :: forall b c a. (b -> c) -> Graph a b -> Graph a c
[LclId]
$csecond_a4w1
  = \ (@ b_a4w3)
      (@ c_a4w4)
      (@ a_a4w5)
      (fe_a3Nu :: b_a4w3 -> c_a4w4) ->
      mapEdgeTriplets
        @ a_a4w5
        @ b_a4w3
        @ c_a4w4
        (mapEdgeFromTriplet @ b_a4w3 @ c_a4w4 @ a_a4w5 fe_a3Nu)

Rec {
-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
Utils.AbstractGraph.$fBifunctorGraph [InlPrag=NOUSERINLINE CONLIKE]
  :: Bifunctor Graph
[LclIdX[DFunId],
 Unf=DFun: \ ->
       Data.Bifunctor.C:Bifunctor TYPE: Graph
                                  $cbimap_a4vr
                                  $cfirst_a4vO
                                  $csecond_a4w1]
Utils.AbstractGraph.$fBifunctorGraph
  = Data.Bifunctor.C:Bifunctor
      @ Graph $cbimap_a4vr $cfirst_a4vO $csecond_a4w1

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
$cfirst_a4vO [Occ=LoopBreaker]
  :: forall a b c. (a -> b) -> Graph a c -> Graph b c
[LclId]
$cfirst_a4vO
  = \ (@ a_a4vQ) (@ b_a4vR) (@ c_a4vS) ->
      Data.Bifunctor.$dmfirst
        @ Graph
        Utils.AbstractGraph.$fBifunctorGraph
        @ a_a4vQ
        @ b_a4vR
        @ c_a4vS
end Rec }

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
mapEdges :: forall e f v. (e -> f) -> Graph v e -> Graph v f
[LclIdX]
mapEdges
  = \ (@ e_a4jb) (@ f_a4jc) (@ v_a4jd) ->
      second
        @ Graph
        Utils.AbstractGraph.$fBifunctorGraph
        @ e_a4jb
        @ f_a4jc
        @ v_a4jd

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
mapVertices :: forall v w e. (v -> w) -> Graph v e -> Graph w e
[LclIdX]
mapVertices
  = \ (@ v_a4jo) (@ w_a4jp) (@ e_a4jq) ->
      first
        @ Graph
        Utils.AbstractGraph.$fBifunctorGraph
        @ v_a4jo
        @ w_a4jp
        @ e_a4jq

-- RHS size: {terms: 21, types: 35, coercions: 0, joins: 0/1}
assignUniqueIds
  :: forall v e. Ord v => Graph v e -> (Graph (v, Int) e, Map v Int)
[LclIdX]
assignUniqueIds
  = \ (@ v_a4jH)
      (@ e_a4jI)
      ($dOrd_a4jK :: Ord v_a4jH)
      (g_a445 :: Graph v_a4jH e_a4jI) ->
      let {
        idMap_a446 :: Map v_a4jH Int
        [LclId]
        idMap_a446
          = Map.fromList
              @ v_a4jH
              @ Int
              $dOrd_a4jK
              (zipWithIndexRight
                 @ v_a4jH (vertices @ v_a4jH @ e_a4jI g_a445)) } in
      (mapVertices
         @ v_a4jH
         @ (v_a4jH, Int)
         @ e_a4jI
         (\ (v_a448 :: v_a4jH) ->
            (v_a448, ! @ v_a4jH @ Int $dOrd_a4jK idMap_a446 v_a448))
         g_a445,
       idMap_a446)

-- RHS size: {terms: 12, types: 22, coercions: 0, joins: 0/0}
eliminateDuplicateVertices
  :: forall v e. Ord v => Graph v e -> Graph v e
[LclIdX]
eliminateDuplicateVertices
  = \ (@ v_a4ie)
      (@ e_a4if)
      ($dOrd_a4ih :: Ord v_a4ie)
      (ds_d4yu :: Graph v_a4ie e_a4if) ->
      case ds_d4yu of { Graph vs_a449 es_a44a ->
      Utils.AbstractGraph.Graph
        @ v_a4ie
        @ e_a4if
        (ListUtils.noDuplicates @ v_a4ie $dOrd_a4ih vs_a449)
        es_a44a
      }

Rec {
-- RHS size: {terms: 33, types: 67, coercions: 0, joins: 0/2}
buildTree [Occ=LoopBreaker]
  :: forall t v e. (t -> v) -> (t -> [(e, t)]) -> t -> Tree v e
[LclIdX]
buildTree
  = \ (@ t_a4hy)
      (@ v_a4hz)
      (@ e_a4hA)
      (toNode_a44b :: t_a4hy -> v_a4hz)
      (children_a44c :: t_a4hy -> [(e_a4hA, t_a4hy)])
      (root_a44d :: t_a4hy) ->
      let {
        recBuildTree_a44h :: t_a4hy -> Tree v_a4hz e_a4hA
        [LclId]
        recBuildTree_a44h
          = buildTree
              @ t_a4hy @ v_a4hz @ e_a4hA toNode_a44b children_a44c } in
      Utils.AbstractGraph.Tree
        @ v_a4hz
        @ e_a4hA
        (toNode_a44b root_a44d)
        (letrec {
           ds_d4yi [Occ=LoopBreaker]
             :: [(e_a4hA, t_a4hy)] -> [(e_a4hA, Tree v_a4hz e_a4hA)]
           [LclId]
           ds_d4yi
             = \ (ds_d4yj :: [(e_a4hA, t_a4hy)]) ->
                 case ds_d4yj of {
                   [] -> GHC.Types.[] @ (e_a4hA, Tree v_a4hz e_a4hA);
                   : ds_d4yk ds_d4yl ->
                     case ds_d4yk of { (edge_a44i, child_a44j) ->
                     GHC.Types.:
                       @ (e_a4hA, Tree v_a4hz e_a4hA)
                       (edge_a44i, recBuildTree_a44h child_a44j)
                       (ds_d4yi ds_d4yl)
                     }
                 }; } in
         ds_d4yi (children_a44c root_a44d))
end Rec }

-- RHS size: {terms: 79, types: 292, coercions: 0, joins: 0/5}
assignTreeIds :: forall v e. Tree v e -> Tree (v, Int) e
[LclIdX]
assignTreeIds
  = \ (@ v_a4fJ) (@ e_a4fK) (root_a44k :: Tree v_a4fJ e_a4fK) ->
      letrec {
        recAssignIds_a44l [Occ=LoopBreaker]
          :: forall v e. Int -> Tree v e -> (Tree (v, Int) e, Int)
        [LclId]
        recAssignIds_a44l
          = \ (@ v_a4g6)
              (@ e_a4g7)
              (id_a44o :: Int)
              (ds_d4xy :: Tree v_a4g6 e_a4g7) ->
              case ds_d4xy of { Tree node_a44p children_a44q ->
              letrec {
                assignInSequence_a44t [Occ=LoopBreaker]
                  :: forall e v.
                     Int -> [(e, Tree v e)] -> ([(e, Tree (v, Int) e)], Int)
                [LclId]
                assignInSequence_a44t
                  = \ (@ e_a4gu)
                      (@ v_a4gv)
                      (freeId_a44w :: Int)
                      (ds_d4xN :: [(e_a4gu, Tree v_a4gv e_a4gu)]) ->
                      case ds_d4xN of {
                        [] ->
                          (GHC.Types.[] @ (e_a4gu, Tree (v_a4gv, Int) e_a4gu), freeId_a44w);
                        : ds_d4yg remEdges_a44z ->
                          case ds_d4yg of { (edge_a44x, thisSubtree_a44y) ->
                          let {
                            ds_d4xZ :: (Tree (v_a4gv, Int) e_a4gu, Int)
                            [LclId]
                            ds_d4xZ
                              = recAssignIds_a44l
                                  @ v_a4gv @ e_a4gu freeId_a44w thisSubtree_a44y } in
                          let {
                            ds_d4xP :: ([(e_a4gu, Tree (v_a4gv, Int) e_a4gu)], Int)
                            [LclId]
                            ds_d4xP
                              = assignInSequence_a44t
                                  @ e_a4gu
                                  @ v_a4gv
                                  (case ds_d4xZ of { (_ [Occ=Dead], idAfterThisSubtree_a4gF) ->
                                   idAfterThisSubtree_a4gF
                                   })
                                  remEdges_a44z } in
                          (GHC.Types.:
                             @ (e_a4gu, Tree (v_a4gv, Int) e_a4gu)
                             (edge_a44x,
                              case ds_d4xZ of { (thisSubtreeWithId_a4gD, _ [Occ=Dead]) ->
                              thisSubtreeWithId_a4gD
                              })
                             (case ds_d4xP of { (remEdgesWithId_a4gS, _ [Occ=Dead]) ->
                              remEdgesWithId_a4gS
                              }),
                           case ds_d4xP of { (_ [Occ=Dead], nextFreeId_a4gU) ->
                           nextFreeId_a4gU
                           })
                          }
                      }; } in
              let {
                ds_d4xE :: ([(e_a4g7, Tree (v_a4g6, Int) e_a4g7)], Int)
                [LclId]
                ds_d4xE
                  = assignInSequence_a44t
                      @ e_a4g7
                      @ v_a4g6
                      (+ @ Int GHC.Num.$fNumInt id_a44o (GHC.Types.I# 1#))
                      children_a44q } in
              (Utils.AbstractGraph.Tree
                 @ (v_a4g6, Int)
                 @ e_a4g7
                 (node_a44p, id_a44o)
                 (case ds_d4xE of { (childrenWithId_a4ha, _ [Occ=Dead]) ->
                  childrenWithId_a4ha
                  }),
               case ds_d4xE of { (_ [Occ=Dead], nextId_a4hc) -> nextId_a4hc })
              }; } in
      fst
        @ (Tree (v_a4fJ, Int) e_a4fK)
        @ Int
        (recAssignIds_a44l @ v_a4fJ @ e_a4fK (GHC.Types.I# 0#) root_a44k)

-- RHS size: {terms: 7, types: 17, coercions: 0, joins: 0/0}
rootNode :: forall v e. Tree v e -> v
[LclIdX]
rootNode
  = \ (@ v_a4eF) (@ e_a4eG) (ds_d4x2 :: Tree v_a4eF e_a4eG) ->
      case ds_d4x2 of { Tree root_a44N _ [Occ=Dead] -> root_a44N }

Rec {
-- RHS size: {terms: 36, types: 103, coercions: 0, joins: 0/1}
allTreeEdges [Occ=LoopBreaker]
  :: forall v e. Tree v e -> [(v, e, v)]
[LclIdX]
allTreeEdges
  = \ (@ v_a4fb) (@ e_a4fc) (ds_d4xb :: Tree v_a4fb e_a4fc) ->
      case ds_d4xb of { Tree root_a44F children_a44G ->
      ++
        @ (v_a4fb, e_a4fc, v_a4fb)
        (letrec {
           ds_d4xg [Occ=LoopBreaker]
             :: [(e_a4fc, Tree v_a4fb e_a4fc)] -> [(v_a4fb, e_a4fc, v_a4fb)]
           [LclId]
           ds_d4xg
             = \ (ds_d4xh :: [(e_a4fc, Tree v_a4fb e_a4fc)]) ->
                 case ds_d4xh of {
                   [] -> GHC.Types.[] @ (v_a4fb, e_a4fc, v_a4fb);
                   : ds_d4xi ds_d4xj ->
                     case ds_d4xi of { (edge_a44J, subtree_a44K) ->
                     GHC.Types.:
                       @ (v_a4fb, e_a4fc, v_a4fb)
                       (root_a44F, edge_a44J, rootNode @ v_a4fb @ e_a4fc subtree_a44K)
                       (ds_d4xg ds_d4xj)
                     }
                 }; } in
         ds_d4xg children_a44G)
        (>>=
           @ []
           GHC.Base.$fMonad[]
           @ (e_a4fc, Tree v_a4fb e_a4fc)
           @ (v_a4fb, e_a4fc, v_a4fb)
           children_a44G
           (\ (ds_d4xp :: (e_a4fc, Tree v_a4fb e_a4fc)) ->
              case ds_d4xp of { (_ [Occ=Dead], subtree_a44L) ->
              allTreeEdges @ v_a4fb @ e_a4fc subtree_a44L
              }))
      }
end Rec }

-- RHS size: {terms: 9, types: 29, coercions: 0, joins: 0/0}
subtrees :: forall v e. Tree v e -> [Tree v e]
[LclIdX]
subtrees
  = \ (@ v_a4ew) (@ e_a4ex) (ds_d4wV :: Tree v_a4ew e_a4ex) ->
      case ds_d4wV of { Tree _ [Occ=Dead] edges_a44O ->
      map
        @ (e_a4ex, Tree v_a4ew e_a4ex)
        @ (Tree v_a4ew e_a4ex)
        (snd @ e_a4ex @ (Tree v_a4ew e_a4ex))
        edges_a44O
      }

-- RHS size: {terms: 6, types: 21, coercions: 0, joins: 0/0}
subtreeNodes :: forall v e. Tree v e -> [v]
[LclIdX]
subtreeNodes
  = \ (@ v_a4eI) (@ e_a4eJ) ->
      . @ [Tree v_a4eI e_a4eJ]
        @ [v_a4eI]
        @ (Tree v_a4eI e_a4eJ)
        (map @ (Tree v_a4eI e_a4eJ) @ v_a4eI (rootNode @ v_a4eI @ e_a4eJ))
        (subtrees @ v_a4eI @ e_a4eJ)

Rec {
-- RHS size: {terms: 11, types: 19, coercions: 0, joins: 0/0}
allTreeNodes [Occ=LoopBreaker] :: forall v e. Tree v e -> [v]
[LclIdX]
allTreeNodes
  = \ (@ v_a4eU) (@ e_a4eV) (t_a44M :: Tree v_a4eU e_a4eV) ->
      GHC.Types.:
        @ v_a4eU
        (rootNode @ v_a4eU @ e_a4eV t_a44M)
        (>>=
           @ []
           GHC.Base.$fMonad[]
           @ (Tree v_a4eU e_a4eV)
           @ v_a4eU
           (subtrees @ v_a4eU @ e_a4eV t_a44M)
           (allTreeNodes @ v_a4eU @ e_a4eV))
end Rec }

Rec {
-- RHS size: {terms: 31, types: 84, coercions: 0, joins: 0/1}
mapTreeNodes [Occ=LoopBreaker]
  :: forall v w e. (v -> w) -> Tree v e -> Tree w e
[LclIdX]
mapTreeNodes
  = \ (@ v_a4em)
      (@ w_a4en)
      (@ e_a4eo)
      (f_a44P :: v_a4em -> w_a4en)
      (ds_d4wI :: Tree v_a4em e_a4eo) ->
      case ds_d4wI of { Tree root_a44Q edges_a44R ->
      Utils.AbstractGraph.Tree
        @ w_a4en
        @ e_a4eo
        (f_a44P root_a44Q)
        (letrec {
           ds_d4wJ [Occ=LoopBreaker]
             :: [(e_a4eo, Tree v_a4em e_a4eo)] -> [(e_a4eo, Tree w_a4en e_a4eo)]
           [LclId]
           ds_d4wJ
             = \ (ds_d4wK :: [(e_a4eo, Tree v_a4em e_a4eo)]) ->
                 case ds_d4wK of {
                   [] -> GHC.Types.[] @ (e_a4eo, Tree w_a4en e_a4eo);
                   : ds_d4wL ds_d4wM ->
                     case ds_d4wL of { (edge_a44S, subtree_a44T) ->
                     GHC.Types.:
                       @ (e_a4eo, Tree w_a4en e_a4eo)
                       (edge_a44S,
                        mapTreeNodes @ v_a4em @ w_a4en @ e_a4eo f_a44P subtree_a44T)
                       (ds_d4wJ ds_d4wM)
                     }
                 }; } in
         ds_d4wJ edges_a44R)
      }
end Rec }

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
Utils.AbstractGraph.$trModule :: GHC.Types.Module
[LclIdX]
Utils.AbstractGraph.$trModule
  = GHC.Types.Module
      (GHC.Types.TrNameS "main"#)
      (GHC.Types.TrNameS "Utils.AbstractGraph"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a4wA [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a4wA = GHC.Types.$WKindRepVar (GHC.Types.I# 1#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a4ww [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a4ww = GHC.Types.$WKindRepVar (GHC.Types.I# 0#)

-- RHS size: {terms: 9, types: 4, coercions: 0, joins: 0/0}
$krep_a4wG [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a4wG
  = GHC.Types.KindRepTyConApp
      GHC.Tuple.$tc(,,)
      (GHC.Types.:
         @ GHC.Types.KindRep
         $krep_a4ww
         (GHC.Types.:
            @ GHC.Types.KindRep
            $krep_a4wA
            (GHC.Types.:
               @ GHC.Types.KindRep
               $krep_a4ww
               (GHC.Types.[] @ GHC.Types.KindRep))))

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a4wF [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a4wF
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tc[]
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a4wG (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a4wD [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a4wD
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tc[]
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a4ww (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
Utils.AbstractGraph.$tcGraph :: GHC.Types.TyCon
[LclIdX]
Utils.AbstractGraph.$tcGraph
  = GHC.Types.TyCon
      11750601768977025181##
      11539868905161674652##
      Utils.AbstractGraph.$trModule
      (GHC.Types.TrNameS "Graph"#)
      0#
      GHC.Types.krep$*->*->*

-- RHS size: {terms: 7, types: 3, coercions: 0, joins: 0/0}
$krep_a4wH [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a4wH
  = GHC.Types.KindRepTyConApp
      Utils.AbstractGraph.$tcGraph
      (GHC.Types.:
         @ GHC.Types.KindRep
         $krep_a4ww
         (GHC.Types.:
            @ GHC.Types.KindRep $krep_a4wA (GHC.Types.[] @ GHC.Types.KindRep)))

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a4wE [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a4wE = GHC.Types.KindRepFun $krep_a4wF $krep_a4wH

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a4wC [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a4wC = GHC.Types.KindRepFun $krep_a4wD $krep_a4wE

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
Utils.AbstractGraph.$tc'Graph :: GHC.Types.TyCon
[LclIdX]
Utils.AbstractGraph.$tc'Graph
  = GHC.Types.TyCon
      17329342475042821334##
      15132150088727508783##
      Utils.AbstractGraph.$trModule
      (GHC.Types.TrNameS "'Graph"#)
      2#
      $krep_a4wC

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
Utils.AbstractGraph.$tcTree :: GHC.Types.TyCon
[LclIdX]
Utils.AbstractGraph.$tcTree
  = GHC.Types.TyCon
      6515252302738829926##
      7116435001695257579##
      Utils.AbstractGraph.$trModule
      (GHC.Types.TrNameS "Tree"#)
      0#
      GHC.Types.krep$*->*->*

-- RHS size: {terms: 7, types: 3, coercions: 0, joins: 0/0}
$krep_a4wB [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a4wB
  = GHC.Types.KindRepTyConApp
      Utils.AbstractGraph.$tcTree
      (GHC.Types.:
         @ GHC.Types.KindRep
         $krep_a4ww
         (GHC.Types.:
            @ GHC.Types.KindRep $krep_a4wA (GHC.Types.[] @ GHC.Types.KindRep)))

-- RHS size: {terms: 7, types: 3, coercions: 0, joins: 0/0}
$krep_a4wz [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a4wz
  = GHC.Types.KindRepTyConApp
      GHC.Tuple.$tc(,)
      (GHC.Types.:
         @ GHC.Types.KindRep
         $krep_a4wA
         (GHC.Types.:
            @ GHC.Types.KindRep $krep_a4wB (GHC.Types.[] @ GHC.Types.KindRep)))

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a4wy [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a4wy
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tc[]
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a4wz (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a4wx [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a4wx = GHC.Types.KindRepFun $krep_a4wy $krep_a4wB

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a4wv [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a4wv = GHC.Types.KindRepFun $krep_a4ww $krep_a4wx

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
Utils.AbstractGraph.$tc'Tree :: GHC.Types.TyCon
[LclIdX]
Utils.AbstractGraph.$tc'Tree
  = GHC.Types.TyCon
      1962891149104463300##
      12402799480339590078##
      Utils.AbstractGraph.$trModule
      (GHC.Types.TrNameS "'Tree"#)
      2#
      $krep_a4wv



[6 of 9] Compiling FDB.GADTForall   ( FDB/GADTForall.hs, FDB/GADTForall.o )

==================== Desugar (after optimization) ====================
Result size of Desugar (after optimization)
  = {terms: 1,252, types: 1,188, coercions: 207, joins: 0/11}

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
FDB.GADTForall.$fFunctorQ [InlPrag=NOUSERINLINE CONLIKE]
  :: Functor Q
[LclIdX[DFunId],
 Unf=DFun: \ ->
       GHC.Base.C:Functor TYPE: Q FDB.GADTForall.$WMap $c<$_a5MC]
FDB.GADTForall.$fFunctorQ
  = GHC.Base.C:Functor @ Q FDB.GADTForall.$WMap $c<$_a5MC

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
$c<$_a5MC [Occ=LoopBreaker] :: forall a b. a -> Q b -> Q a
[LclId]
$c<$_a5MC
  = \ (@ a_a5ME) (@ b_a5MF) ->
      GHC.Base.$dm<$ @ Q FDB.GADTForall.$fFunctorQ @ a_a5ME @ b_a5MF
end Rec }

-- RHS size: {terms: 25, types: 16, coercions: 11, joins: 0/1}
$c<*>_a5LJ :: forall a b. Q (a -> b) -> Q a -> Q b
[LclId]
$c<*>_a5LJ
  = \ (@ a_a5LL) (@ b_a5LM) ->
      let {
        $dIP_a5LQ :: GHC.Stack.Types.HasCallStack
        [LclId]
        $dIP_a5LQ
          = (GHC.Stack.Types.pushCallStack
               (GHC.CString.unpackCString# "undefined"#,
                GHC.Stack.Types.SrcLoc
                  (GHC.CString.unpackCString# "main"#)
                  (GHC.CString.unpackCString# "FDB.GADTForall"#)
                  (GHC.CString.unpackCString# "./FDB/GADTForall.hs"#)
                  (GHC.Types.I# 82#)
                  (GHC.Types.I# 11#)
                  (GHC.Types.I# 82#)
                  (GHC.Types.I# 20#))
               ((GHC.Stack.Types.emptyCallStack
                 `cast` (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                         :: GHC.Stack.Types.CallStack
                            ~R# (?callStack::GHC.Stack.Types.CallStack)))
                `cast` (GHC.Classes.N:IP[0]
                            <"callStack">_N <GHC.Stack.Types.CallStack>_N
                        :: (?callStack::GHC.Stack.Types.CallStack)
                           ~R# GHC.Stack.Types.CallStack)))
            `cast` (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                    :: GHC.Stack.Types.CallStack
                       ~R# (?callStack::GHC.Stack.Types.CallStack)) } in
      undefined
        @ 'GHC.Types.LiftedRep
        @ (Q (a_a5LL -> b_a5LM) -> Q a_a5LL -> Q b_a5LM)
        $dIP_a5LQ

-- RHS size: {terms: 24, types: 10, coercions: 11, joins: 0/1}
$cpure_a5LA :: forall a. a -> Q a
[LclId]
$cpure_a5LA
  = \ (@ a_a5LC) ->
      let {
        $dIP_a5LG :: GHC.Stack.Types.HasCallStack
        [LclId]
        $dIP_a5LG
          = (GHC.Stack.Types.pushCallStack
               (GHC.CString.unpackCString# "undefined"#,
                GHC.Stack.Types.SrcLoc
                  (GHC.CString.unpackCString# "main"#)
                  (GHC.CString.unpackCString# "FDB.GADTForall"#)
                  (GHC.CString.unpackCString# "./FDB/GADTForall.hs"#)
                  (GHC.Types.I# 81#)
                  (GHC.Types.I# 10#)
                  (GHC.Types.I# 81#)
                  (GHC.Types.I# 19#))
               ((GHC.Stack.Types.emptyCallStack
                 `cast` (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                         :: GHC.Stack.Types.CallStack
                            ~R# (?callStack::GHC.Stack.Types.CallStack)))
                `cast` (GHC.Classes.N:IP[0]
                            <"callStack">_N <GHC.Stack.Types.CallStack>_N
                        :: (?callStack::GHC.Stack.Types.CallStack)
                           ~R# GHC.Stack.Types.CallStack)))
            `cast` (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                    :: GHC.Stack.Types.CallStack
                       ~R# (?callStack::GHC.Stack.Types.CallStack)) } in
      undefined @ 'GHC.Types.LiftedRep @ (a_a5LC -> Q a_a5LC) $dIP_a5LG

Rec {
-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
FDB.GADTForall.$fApplicativeQ [InlPrag=NOUSERINLINE CONLIKE]
  :: Applicative Q
[LclIdX[DFunId],
 Unf=DFun: \ ->
       GHC.Base.C:Applicative TYPE: Q
                              FDB.GADTForall.$fFunctorQ
                              $cpure_a5LA
                              $c<*>_a5LJ
                              $cliftA2_a5LT
                              $c*>_a5M6
                              $c<*_a5Mh]
FDB.GADTForall.$fApplicativeQ
  = GHC.Base.C:Applicative
      @ Q
      FDB.GADTForall.$fFunctorQ
      $cpure_a5LA
      $c<*>_a5LJ
      $cliftA2_a5LT
      $c*>_a5M6
      $c<*_a5Mh

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
$c*>_a5M6 [Occ=LoopBreaker] :: forall a b. Q a -> Q b -> Q b
[LclId]
$c*>_a5M6
  = \ (@ a_a5M8) (@ b_a5M9) ->
      GHC.Base.$dm*> @ Q FDB.GADTForall.$fApplicativeQ @ a_a5M8 @ b_a5M9

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
$c<*_a5Mh [Occ=LoopBreaker] :: forall a b. Q a -> Q b -> Q a
[LclId]
$c<*_a5Mh
  = \ (@ a_a5Mj) (@ b_a5Mk) ->
      GHC.Base.$dm<* @ Q FDB.GADTForall.$fApplicativeQ @ a_a5Mj @ b_a5Mk

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
$cliftA2_a5LT [Occ=LoopBreaker]
  :: forall a b c. (a -> b -> c) -> Q a -> Q b -> Q c
[LclId]
$cliftA2_a5LT
  = \ (@ a_a5LV) (@ b_a5LW) (@ c_a5LX) ->
      GHC.Base.$dmliftA2
        @ Q FDB.GADTForall.$fApplicativeQ @ a_a5LV @ b_a5LW @ c_a5LX
end Rec }

-- RHS size: {terms: 25, types: 16, coercions: 11, joins: 0/1}
$c>>=_a5KR :: forall a b. Q a -> (a -> Q b) -> Q b
[LclId]
$c>>=_a5KR
  = \ (@ a_a5KT) (@ b_a5KU) ->
      let {
        $dIP_a5KY :: GHC.Stack.Types.HasCallStack
        [LclId]
        $dIP_a5KY
          = (GHC.Stack.Types.pushCallStack
               (GHC.CString.unpackCString# "undefined"#,
                GHC.Stack.Types.SrcLoc
                  (GHC.CString.unpackCString# "main"#)
                  (GHC.CString.unpackCString# "FDB.GADTForall"#)
                  (GHC.CString.unpackCString# "./FDB/GADTForall.hs"#)
                  (GHC.Types.I# 85#)
                  (GHC.Types.I# 11#)
                  (GHC.Types.I# 85#)
                  (GHC.Types.I# 20#))
               ((GHC.Stack.Types.emptyCallStack
                 `cast` (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                         :: GHC.Stack.Types.CallStack
                            ~R# (?callStack::GHC.Stack.Types.CallStack)))
                `cast` (GHC.Classes.N:IP[0]
                            <"callStack">_N <GHC.Stack.Types.CallStack>_N
                        :: (?callStack::GHC.Stack.Types.CallStack)
                           ~R# GHC.Stack.Types.CallStack)))
            `cast` (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                    :: GHC.Stack.Types.CallStack
                       ~R# (?callStack::GHC.Stack.Types.CallStack)) } in
      undefined
        @ 'GHC.Types.LiftedRep
        @ (Q a_a5KT -> (a_a5KT -> Q b_a5KU) -> Q b_a5KU)
        $dIP_a5KY

Rec {
-- RHS size: {terms: 6, types: 1, coercions: 0, joins: 0/0}
FDB.GADTForall.$fMonadQ [InlPrag=NOUSERINLINE CONLIKE] :: Monad Q
[LclIdX[DFunId],
 Unf=DFun: \ ->
       GHC.Base.C:Monad TYPE: Q
                        FDB.GADTForall.$fApplicativeQ
                        $c>>=_a5KR
                        $c>>_a5L1
                        $creturn_a5Lc
                        $cfail_a5Ll]
FDB.GADTForall.$fMonadQ
  = GHC.Base.C:Monad
      @ Q
      FDB.GADTForall.$fApplicativeQ
      $c>>=_a5KR
      $c>>_a5L1
      $creturn_a5Lc
      $cfail_a5Ll

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
$creturn_a5Lc [Occ=LoopBreaker] :: forall a. a -> Q a
[LclId]
$creturn_a5Lc
  = \ (@ a_a5Le) ->
      GHC.Base.$dmreturn @ Q FDB.GADTForall.$fMonadQ @ a_a5Le

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
$cfail_a5Ll [Occ=LoopBreaker] :: forall a. String -> Q a
[LclId]
$cfail_a5Ll
  = \ (@ a_a5Ln) ->
      GHC.Base.$dmfail @ Q FDB.GADTForall.$fMonadQ @ a_a5Ln

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
$c>>_a5L1 [Occ=LoopBreaker] :: forall a b. Q a -> Q b -> Q b
[LclId]
$c>>_a5L1
  = \ (@ a_a5L3) (@ b_a5L4) ->
      GHC.Base.$dm>> @ Q FDB.GADTForall.$fMonadQ @ a_a5L3 @ b_a5L4
end Rec }

-- RHS size: {terms: 25, types: 15, coercions: 11, joins: 0/1}
$cfmap_a5Kj :: forall a b. (a -> b) -> SQ a -> SQ b
[LclId]
$cfmap_a5Kj
  = \ (@ a_a5Kn) (@ b_a5Ko) ->
      let {
        $dIP_a5Ks :: GHC.Stack.Types.HasCallStack
        [LclId]
        $dIP_a5Ks
          = (GHC.Stack.Types.pushCallStack
               (GHC.CString.unpackCString# "undefined"#,
                GHC.Stack.Types.SrcLoc
                  (GHC.CString.unpackCString# "main"#)
                  (GHC.CString.unpackCString# "FDB.GADTForall"#)
                  (GHC.CString.unpackCString# "./FDB/GADTForall.hs"#)
                  (GHC.Types.I# 104#)
                  (GHC.Types.I# 10#)
                  (GHC.Types.I# 104#)
                  (GHC.Types.I# 19#))
               ((GHC.Stack.Types.emptyCallStack
                 `cast` (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                         :: GHC.Stack.Types.CallStack
                            ~R# (?callStack::GHC.Stack.Types.CallStack)))
                `cast` (GHC.Classes.N:IP[0]
                            <"callStack">_N <GHC.Stack.Types.CallStack>_N
                        :: (?callStack::GHC.Stack.Types.CallStack)
                           ~R# GHC.Stack.Types.CallStack)))
            `cast` (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                    :: GHC.Stack.Types.CallStack
                       ~R# (?callStack::GHC.Stack.Types.CallStack)) } in
      undefined
        @ 'GHC.Types.LiftedRep
        @ ((a_a5Kn -> b_a5Ko) -> SQ a_a5Kn -> SQ b_a5Ko)
        $dIP_a5Ks

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
FDB.GADTForall.$fFunctorSQ [InlPrag=NOUSERINLINE CONLIKE]
  :: Functor SQ
[LclIdX[DFunId],
 Unf=DFun: \ -> GHC.Base.C:Functor TYPE: SQ $cfmap_a5Kj $c<$_a5Ky]
FDB.GADTForall.$fFunctorSQ
  = GHC.Base.C:Functor @ SQ $cfmap_a5Kj $c<$_a5Ky

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
$c<$_a5Ky [Occ=LoopBreaker] :: forall a b. a -> SQ b -> SQ a
[LclId]
$c<$_a5Ky
  = \ (@ a_a5KC) (@ b_a5KD) ->
      GHC.Base.$dm<$ @ SQ FDB.GADTForall.$fFunctorSQ @ a_a5KC @ b_a5KD
end Rec }

-- RHS size: {terms: 25, types: 16, coercions: 11, joins: 0/1}
$c<*>_a5Jf :: forall a b. SQ (a -> b) -> SQ a -> SQ b
[LclId]
$c<*>_a5Jf
  = \ (@ a_a5Jj) (@ b_a5Jk) ->
      let {
        $dIP_a5Jo :: GHC.Stack.Types.HasCallStack
        [LclId]
        $dIP_a5Jo
          = (GHC.Stack.Types.pushCallStack
               (GHC.CString.unpackCString# "undefined"#,
                GHC.Stack.Types.SrcLoc
                  (GHC.CString.unpackCString# "main"#)
                  (GHC.CString.unpackCString# "FDB.GADTForall"#)
                  (GHC.CString.unpackCString# "./FDB/GADTForall.hs"#)
                  (GHC.Types.I# 108#)
                  (GHC.Types.I# 11#)
                  (GHC.Types.I# 108#)
                  (GHC.Types.I# 20#))
               ((GHC.Stack.Types.emptyCallStack
                 `cast` (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                         :: GHC.Stack.Types.CallStack
                            ~R# (?callStack::GHC.Stack.Types.CallStack)))
                `cast` (GHC.Classes.N:IP[0]
                            <"callStack">_N <GHC.Stack.Types.CallStack>_N
                        :: (?callStack::GHC.Stack.Types.CallStack)
                           ~R# GHC.Stack.Types.CallStack)))
            `cast` (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                    :: GHC.Stack.Types.CallStack
                       ~R# (?callStack::GHC.Stack.Types.CallStack)) } in
      undefined
        @ 'GHC.Types.LiftedRep
        @ (SQ (a_a5Jj -> b_a5Jk) -> SQ a_a5Jj -> SQ b_a5Jk)
        $dIP_a5Jo

-- RHS size: {terms: 24, types: 10, coercions: 11, joins: 0/1}
$cpure_a5J5 :: forall a. a -> SQ a
[LclId]
$cpure_a5J5
  = \ (@ a_a5J8) ->
      let {
        $dIP_a5Jc :: GHC.Stack.Types.HasCallStack
        [LclId]
        $dIP_a5Jc
          = (GHC.Stack.Types.pushCallStack
               (GHC.CString.unpackCString# "undefined"#,
                GHC.Stack.Types.SrcLoc
                  (GHC.CString.unpackCString# "main"#)
                  (GHC.CString.unpackCString# "FDB.GADTForall"#)
                  (GHC.CString.unpackCString# "./FDB/GADTForall.hs"#)
                  (GHC.Types.I# 107#)
                  (GHC.Types.I# 10#)
                  (GHC.Types.I# 107#)
                  (GHC.Types.I# 19#))
               ((GHC.Stack.Types.emptyCallStack
                 `cast` (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                         :: GHC.Stack.Types.CallStack
                            ~R# (?callStack::GHC.Stack.Types.CallStack)))
                `cast` (GHC.Classes.N:IP[0]
                            <"callStack">_N <GHC.Stack.Types.CallStack>_N
                        :: (?callStack::GHC.Stack.Types.CallStack)
                           ~R# GHC.Stack.Types.CallStack)))
            `cast` (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                    :: GHC.Stack.Types.CallStack
                       ~R# (?callStack::GHC.Stack.Types.CallStack)) } in
      undefined @ 'GHC.Types.LiftedRep @ (a_a5J8 -> SQ a_a5J8) $dIP_a5Jc

Rec {
-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
FDB.GADTForall.$fApplicativeSQ [InlPrag=NOUSERINLINE CONLIKE]
  :: Applicative SQ
[LclIdX[DFunId],
 Unf=DFun: \ ->
       GHC.Base.C:Applicative TYPE: SQ
                              FDB.GADTForall.$fFunctorSQ
                              $cpure_a5J5
                              $c<*>_a5Jf
                              $cliftA2_a5Jv
                              $c*>_a5JO
                              $c<*_a5K4]
FDB.GADTForall.$fApplicativeSQ
  = GHC.Base.C:Applicative
      @ SQ
      FDB.GADTForall.$fFunctorSQ
      $cpure_a5J5
      $c<*>_a5Jf
      $cliftA2_a5Jv
      $c*>_a5JO
      $c<*_a5K4

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
$c*>_a5JO [Occ=LoopBreaker] :: forall a b. SQ a -> SQ b -> SQ b
[LclId]
$c*>_a5JO
  = \ (@ a_a5JS) (@ b_a5JT) ->
      GHC.Base.$dm*>
        @ SQ FDB.GADTForall.$fApplicativeSQ @ a_a5JS @ b_a5JT

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
$c<*_a5K4 [Occ=LoopBreaker] :: forall a b. SQ a -> SQ b -> SQ a
[LclId]
$c<*_a5K4
  = \ (@ a_a5K8) (@ b_a5K9) ->
      GHC.Base.$dm<*
        @ SQ FDB.GADTForall.$fApplicativeSQ @ a_a5K8 @ b_a5K9

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
$cliftA2_a5Jv [Occ=LoopBreaker]
  :: forall a b c. (a -> b -> c) -> SQ a -> SQ b -> SQ c
[LclId]
$cliftA2_a5Jv
  = \ (@ a_a5JA) (@ b_a5JB) (@ c_a5JC) ->
      GHC.Base.$dmliftA2
        @ SQ FDB.GADTForall.$fApplicativeSQ @ a_a5JA @ b_a5JB @ c_a5JC
end Rec }

-- RHS size: {terms: 25, types: 16, coercions: 11, joins: 0/1}
$c>>=_a5Ic :: forall a b. SQ a -> (a -> SQ b) -> SQ b
[LclId]
$c>>=_a5Ic
  = \ (@ a_a5Ie) (@ b_a5If) ->
      let {
        $dIP_a5Ij :: GHC.Stack.Types.HasCallStack
        [LclId]
        $dIP_a5Ij
          = (GHC.Stack.Types.pushCallStack
               (GHC.CString.unpackCString# "undefined"#,
                GHC.Stack.Types.SrcLoc
                  (GHC.CString.unpackCString# "main"#)
                  (GHC.CString.unpackCString# "FDB.GADTForall"#)
                  (GHC.CString.unpackCString# "./FDB/GADTForall.hs"#)
                  (GHC.Types.I# 111#)
                  (GHC.Types.I# 11#)
                  (GHC.Types.I# 111#)
                  (GHC.Types.I# 20#))
               ((GHC.Stack.Types.emptyCallStack
                 `cast` (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                         :: GHC.Stack.Types.CallStack
                            ~R# (?callStack::GHC.Stack.Types.CallStack)))
                `cast` (GHC.Classes.N:IP[0]
                            <"callStack">_N <GHC.Stack.Types.CallStack>_N
                        :: (?callStack::GHC.Stack.Types.CallStack)
                           ~R# GHC.Stack.Types.CallStack)))
            `cast` (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                    :: GHC.Stack.Types.CallStack
                       ~R# (?callStack::GHC.Stack.Types.CallStack)) } in
      undefined
        @ 'GHC.Types.LiftedRep
        @ (SQ a_a5Ie -> (a_a5Ie -> SQ b_a5If) -> SQ b_a5If)
        $dIP_a5Ij

Rec {
-- RHS size: {terms: 6, types: 1, coercions: 0, joins: 0/0}
FDB.GADTForall.$fMonadSQ [InlPrag=NOUSERINLINE CONLIKE] :: Monad SQ
[LclIdX[DFunId],
 Unf=DFun: \ ->
       GHC.Base.C:Monad TYPE: SQ
                        FDB.GADTForall.$fApplicativeSQ
                        $c>>=_a5Ic
                        $c>>_a5Ip
                        $creturn_a5IE
                        $cfail_a5IP]
FDB.GADTForall.$fMonadSQ
  = GHC.Base.C:Monad
      @ SQ
      FDB.GADTForall.$fApplicativeSQ
      $c>>=_a5Ic
      $c>>_a5Ip
      $creturn_a5IE
      $cfail_a5IP

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
$creturn_a5IE [Occ=LoopBreaker] :: forall a. a -> SQ a
[LclId]
$creturn_a5IE
  = \ (@ a_a5IG) ->
      GHC.Base.$dmreturn @ SQ FDB.GADTForall.$fMonadSQ @ a_a5IG

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
$cfail_a5IP [Occ=LoopBreaker] :: forall a. String -> SQ a
[LclId]
$cfail_a5IP
  = \ (@ a_a5IS) ->
      GHC.Base.$dmfail @ SQ FDB.GADTForall.$fMonadSQ @ a_a5IS

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
$c>>_a5Ip [Occ=LoopBreaker] :: forall a b. SQ a -> SQ b -> SQ b
[LclId]
$c>>_a5Ip
  = \ (@ a_a5It) (@ b_a5Iu) ->
      GHC.Base.$dm>> @ SQ FDB.GADTForall.$fMonadSQ @ a_a5It @ b_a5Iu
end Rec }

-- RHS size: {terms: 2, types: 1, coercions: 7, joins: 0/0}
$c/=_a5Hn :: TableId -> TableId -> Bool
[LclId]
$c/=_a5Hn
  = (/= @ Word16 GHC.Word.$fEqWord16)
    `cast` (Sym (FDB.GADTForall.N:TableId[0])
            ->_R Sym (FDB.GADTForall.N:TableId[0])
            ->_R <Bool>_R
            :: (Word16 -> Word16 -> Bool) ~R# (TableId -> TableId -> Bool))

-- RHS size: {terms: 2, types: 1, coercions: 7, joins: 0/0}
$c==_a5GW :: TableId -> TableId -> Bool
[LclId]
$c==_a5GW
  = (== @ Word16 GHC.Word.$fEqWord16)
    `cast` (Sym (FDB.GADTForall.N:TableId[0])
            ->_R Sym (FDB.GADTForall.N:TableId[0])
            ->_R <Bool>_R
            :: (Word16 -> Word16 -> Bool) ~R# (TableId -> TableId -> Bool))

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
FDB.GADTForall.$fEqTableId [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq TableId
[LclIdX[DFunId],
 Unf=DFun: \ -> GHC.Classes.C:Eq TYPE: TableId $c==_a5GW $c/=_a5Hn]
FDB.GADTForall.$fEqTableId
  = GHC.Classes.C:Eq @ TableId $c==_a5GW $c/=_a5Hn

-- RHS size: {terms: 2, types: 1, coercions: 7, joins: 0/0}
$c/=_a5Gt :: RowId -> RowId -> Bool
[LclId]
$c/=_a5Gt
  = (/= @ Word64 GHC.Word.$fEqWord64)
    `cast` (Sym (FDB.GADTForall.N:RowId[0])
            ->_R Sym (FDB.GADTForall.N:RowId[0])
            ->_R <Bool>_R
            :: (Word64 -> Word64 -> Bool) ~R# (RowId -> RowId -> Bool))

-- RHS size: {terms: 2, types: 1, coercions: 7, joins: 0/0}
$c==_a5G2 :: RowId -> RowId -> Bool
[LclId]
$c==_a5G2
  = (== @ Word64 GHC.Word.$fEqWord64)
    `cast` (Sym (FDB.GADTForall.N:RowId[0])
            ->_R Sym (FDB.GADTForall.N:RowId[0])
            ->_R <Bool>_R
            :: (Word64 -> Word64 -> Bool) ~R# (RowId -> RowId -> Bool))

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
FDB.GADTForall.$fEqRowId [InlPrag=NOUSERINLINE CONLIKE] :: Eq RowId
[LclIdX[DFunId],
 Unf=DFun: \ -> GHC.Classes.C:Eq TYPE: RowId $c==_a5G2 $c/=_a5Gt]
FDB.GADTForall.$fEqRowId
  = GHC.Classes.C:Eq @ RowId $c==_a5G2 $c/=_a5Gt

-- RHS size: {terms: 18, types: 16, coercions: 0, joins: 0/0}
$c==_a5HR :: forall a. RowRef a -> RowRef a -> Bool
[LclId]
$c==_a5HR
  = \ (@ a_a5HP)
      (ds_d5QW :: RowRef a_a5HP)
      (ds_d5QX :: RowRef a_a5HP) ->
      case ds_d5QW of { RowRef a1_a5sv a2_a5sw ->
      case ds_d5QX of { RowRef b1_a5sx b2_a5sy ->
      &&
        (== @ TableId FDB.GADTForall.$fEqTableId a1_a5sv b1_a5sx)
        (== @ RowId FDB.GADTForall.$fEqRowId a2_a5sw b2_a5sy)
      }
      }

Rec {
-- RHS size: {terms: 4, types: 6, coercions: 0, joins: 0/0}
FDB.GADTForall.$fEqRowRef [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Eq (RowRef a)
[LclIdX[DFunId],
 Unf=DFun: \ (@ a_a5in) ->
       GHC.Classes.C:Eq TYPE: RowRef a_a5in
                        $c==_a5HR @ a_a5in
                        $c/=_a5I0 @ a_a5in]
FDB.GADTForall.$fEqRowRef
  = \ (@ a_a5HP) ->
      GHC.Classes.C:Eq
        @ (RowRef a_a5HP) ($c==_a5HR @ a_a5HP) ($c/=_a5I0 @ a_a5HP)

-- RHS size: {terms: 3, types: 5, coercions: 0, joins: 0/0}
$c/=_a5I0 [Occ=LoopBreaker]
  :: forall a. RowRef a -> RowRef a -> Bool
[LclId]
$c/=_a5I0
  = \ (@ a_a5HP) ->
      GHC.Classes.$dm/=
        @ (RowRef a_a5HP) (FDB.GADTForall.$fEqRowRef @ a_a5HP)
end Rec }

-- RHS size: {terms: 3, types: 3, coercions: 3, joins: 0/0}
findTable :: forall a. String -> Table a
[LclIdX]
findTable
  = \ (@ a_a5FX) (v_B1 :: String) ->
      v_B1
      `cast` (Sym (FDB.GADTForall.N:Table[0] <a_a5FX>_P)
              :: String ~R# Table a_a5FX)

Rec {
-- RHS size: {terms: 23, types: 23, coercions: 0, joins: 0/1}
pull [Occ=LoopBreaker] :: forall a. Q a -> a
[LclIdX]
pull
  = \ (@ a_a5FN) (rec_a5jD :: Q a_a5FN) ->
      case rec_a5jD of wild_00 {
        __DEFAULT ->
          Control.Exception.Base.patError
            @ 'GHC.Types.LiftedRep
            @ a_a5FN
            "FDB/GADTForall.hs:(36,1)-(41,27)|function pull"#;
        Filter p_a5jE q_a5jF ->
          let {
            x_a5jG :: a_a5FN
            [LclId]
            x_a5jG = pull @ a_a5FN q_a5jF } in
          case p_a5jE x_a5jG of {
            False -> pull @ a_a5FN wild_00;
            True -> x_a5jG
          };
        Map @ b_a5FV f_a5jH q_a5jI -> f_a5jH (pull @ b_a5FV q_a5jI)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readT :: forall a. Table a -> Q a
[LclIdX]
readT = FDB.GADTForall.Read

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
mapQ :: forall a b. (a -> b) -> Q a -> Q b
[LclIdX]
mapQ = FDB.GADTForall.$WMap

-- RHS size: {terms: 11, types: 19, coercions: 0, joins: 0/0}
-|><|-> :: forall a b. NatJoin a b => Q a -> Q b -> Q b
[LclIdX]
-|><|->
  = \ (@ a_a5Fm)
      (@ b_a5Fn)
      ($dNatJoin_a5Fp :: NatJoin a_a5Fm b_a5Fn)
      (x_a5jP :: Q a_a5Fm)
      (y_a5jQ :: Q b_a5Fn) ->
      mapQ
        @ (a_a5Fm, b_a5Fn)
        @ b_a5Fn
        (snd @ a_a5Fm @ b_a5Fn)
        (|><| @ a_a5Fm @ b_a5Fn $dNatJoin_a5Fp x_a5jP y_a5jQ)

-- RHS size: {terms: 11, types: 19, coercions: 0, joins: 0/0}
<-|><|- :: forall a b. NatJoin a b => Q a -> Q b -> Q a
[LclIdX]
<-|><|-
  = \ (@ a_a5Fy)
      (@ b_a5Fz)
      ($dNatJoin_a5FB :: NatJoin a_a5Fy b_a5Fz)
      (a_a5jR :: Q a_a5Fy)
      (b_a5jS :: Q b_a5Fz) ->
      mapQ
        @ (a_a5Fy, b_a5Fz)
        @ a_a5Fy
        (fst @ a_a5Fy @ b_a5Fz)
        (|><| @ a_a5Fy @ b_a5Fz $dNatJoin_a5FB a_a5jR b_a5jS)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
filterQ :: forall a. (a -> Bool) -> Q a -> Q a
[LclIdX]
filterQ = FDB.GADTForall.Filter

-- RHS size: {terms: 4, types: 8, coercions: 0, joins: 0/0}
groupByWithKey
  :: forall k a. Ord k => (a -> k) -> Q a -> Q (k, Q a)
[LclIdX]
groupByWithKey
  = \ (@ k_a5EH) (@ a_a5EI) _ [Occ=Dead] ->
      FDB.GADTForall.$WGroupBy @ a_a5EI @ k_a5EH

-- RHS size: {terms: 8, types: 29, coercions: 0, joins: 0/0}
groupByQ :: forall k a. Ord k => (a -> k) -> Q a -> Q (Q a)
[LclIdX]
groupByQ
  = \ (@ k_a5EW) (@ a_a5EX) ($dOrd_a5EZ :: Ord k_a5EW) ->
      .:
        @ (Q (k_a5EW, Q a_a5EX))
        @ (Q (Q a_a5EX))
        @ (a_a5EX -> k_a5EW)
        @ (Q a_a5EX)
        (mapQ
           @ (k_a5EW, Q a_a5EX) @ (Q a_a5EX) (snd @ k_a5EW @ (Q a_a5EX)))
        (groupByWithKey @ k_a5EW @ a_a5EX $dOrd_a5EZ)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
orderBy :: forall b a. Ord b => (a -> b) -> Q a -> Q a
[LclIdX]
orderBy = FDB.GADTForall.$WOrderBy

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
takeQ :: forall n a. Integral n => n -> Q a -> Q a
[LclIdX]
takeQ = FDB.GADTForall.$WTake

-- RHS size: {terms: 24, types: 9, coercions: 11, joins: 0/1}
emptyQ :: forall a. Q a
[LclIdX]
emptyQ
  = \ (@ a_a5DU) ->
      let {
        $dIP_a5DY :: GHC.Stack.Types.HasCallStack
        [LclId]
        $dIP_a5DY
          = (GHC.Stack.Types.pushCallStack
               (GHC.CString.unpackCString# "undefined"#,
                GHC.Stack.Types.SrcLoc
                  (GHC.CString.unpackCString# "main"#)
                  (GHC.CString.unpackCString# "FDB.GADTForall"#)
                  (GHC.CString.unpackCString# "./FDB/GADTForall.hs"#)
                  (GHC.Types.I# 65#)
                  (GHC.Types.I# 10#)
                  (GHC.Types.I# 65#)
                  (GHC.Types.I# 19#))
               ((GHC.Stack.Types.emptyCallStack
                 `cast` (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                         :: GHC.Stack.Types.CallStack
                            ~R# (?callStack::GHC.Stack.Types.CallStack)))
                `cast` (GHC.Classes.N:IP[0]
                            <"callStack">_N <GHC.Stack.Types.CallStack>_N
                        :: (?callStack::GHC.Stack.Types.CallStack)
                           ~R# GHC.Stack.Types.CallStack)))
            `cast` (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                    :: GHC.Stack.Types.CallStack
                       ~R# (?callStack::GHC.Stack.Types.CallStack)) } in
      undefined @ 'GHC.Types.LiftedRep @ (Q a_a5DU) $dIP_a5DY

-- RHS size: {terms: 24, types: 17, coercions: 11, joins: 0/0}
eqFilter :: forall b a. Eq b => (a -> b) -> b -> Q a -> Q a
[LclIdX]
eqFilter
  = \ (@ b_a5DM) (@ a_a5DN) _ [Occ=Dead] ->
      undefined
        @ 'GHC.Types.LiftedRep
        @ ((a_a5DN -> b_a5DM) -> b_a5DM -> Q a_a5DN -> Q a_a5DN)
        ((GHC.Stack.Types.pushCallStack
            (GHC.CString.unpackCString# "undefined"#,
             GHC.Stack.Types.SrcLoc
               (GHC.CString.unpackCString# "main"#)
               (GHC.CString.unpackCString# "FDB.GADTForall"#)
               (GHC.CString.unpackCString# "./FDB/GADTForall.hs"#)
               (GHC.Types.I# 70#)
               (GHC.Types.I# 12#)
               (GHC.Types.I# 70#)
               (GHC.Types.I# 21#))
            ((GHC.Stack.Types.emptyCallStack
              `cast` (Sym (GHC.Classes.N:IP[0]
                               <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                      :: GHC.Stack.Types.CallStack
                         ~R# (?callStack::GHC.Stack.Types.CallStack)))
             `cast` (GHC.Classes.N:IP[0]
                         <"callStack">_N <GHC.Stack.Types.CallStack>_N
                     :: (?callStack::GHC.Stack.Types.CallStack)
                        ~R# GHC.Stack.Types.CallStack)))
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 25, types: 24, coercions: 11, joins: 0/0}
equiJoin
  :: forall c a b.
     Eq c =>
     (a -> c) -> (b -> c) -> Q a -> Q b -> Q (a, b)
[LclIdX]
equiJoin
  = \ (@ c_a5DD) (@ a_a5DE) (@ b_a5DF) _ [Occ=Dead] ->
      undefined
        @ 'GHC.Types.LiftedRep
        @ ((a_a5DE -> c_a5DD)
           -> (b_a5DF -> c_a5DD)
           -> Q a_a5DE
           -> Q b_a5DF
           -> Q (a_a5DE, b_a5DF))
        ((GHC.Stack.Types.pushCallStack
            (GHC.CString.unpackCString# "undefined"#,
             GHC.Stack.Types.SrcLoc
               (GHC.CString.unpackCString# "main"#)
               (GHC.CString.unpackCString# "FDB.GADTForall"#)
               (GHC.CString.unpackCString# "./FDB/GADTForall.hs"#)
               (GHC.Types.I# 73#)
               (GHC.Types.I# 12#)
               (GHC.Types.I# 73#)
               (GHC.Types.I# 21#))
            ((GHC.Stack.Types.emptyCallStack
              `cast` (Sym (GHC.Classes.N:IP[0]
                               <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                      :: GHC.Stack.Types.CallStack
                         ~R# (?callStack::GHC.Stack.Types.CallStack)))
             `cast` (GHC.Classes.N:IP[0]
                         <"callStack">_N <GHC.Stack.Types.CallStack>_N
                     :: (?callStack::GHC.Stack.Types.CallStack)
                        ~R# GHC.Stack.Types.CallStack)))
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
fetchRow :: forall a. RowRef a -> SQ (Row a)
[LclIdX]
fetchRow = FDB.GADTForall.$WFetchRow

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
subqMap :: forall a b. (a -> SQ b) -> Q a -> Q b
[LclIdX]
subqMap = FDB.GADTForall.$WMapSQ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
subqFilter :: forall a. (a -> SQ Bool) -> Q a -> Q a
[LclIdX]
subqFilter = FDB.GADTForall.FilterSQ

-- RHS size: {terms: 25, types: 16, coercions: 11, joins: 0/1}
mapToQ :: forall a b. (a -> Q b) -> SQ a -> Q b
[LclIdX]
mapToQ
  = \ (@ a_a5Dc) (@ b_a5Dd) ->
      let {
        $dIP_a5Dh :: GHC.Stack.Types.HasCallStack
        [LclId]
        $dIP_a5Dh
          = (GHC.Stack.Types.pushCallStack
               (GHC.CString.unpackCString# "undefined"#,
                GHC.Stack.Types.SrcLoc
                  (GHC.CString.unpackCString# "main"#)
                  (GHC.CString.unpackCString# "FDB.GADTForall"#)
                  (GHC.CString.unpackCString# "./FDB/GADTForall.hs"#)
                  (GHC.Types.I# 130#)
                  (GHC.Types.I# 10#)
                  (GHC.Types.I# 130#)
                  (GHC.Types.I# 19#))
               ((GHC.Stack.Types.emptyCallStack
                 `cast` (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                         :: GHC.Stack.Types.CallStack
                            ~R# (?callStack::GHC.Stack.Types.CallStack)))
                `cast` (GHC.Classes.N:IP[0]
                            <"callStack">_N <GHC.Stack.Types.CallStack>_N
                        :: (?callStack::GHC.Stack.Types.CallStack)
                           ~R# GHC.Stack.Types.CallStack)))
            `cast` (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                    :: GHC.Stack.Types.CallStack
                       ~R# (?callStack::GHC.Stack.Types.CallStack)) } in
      undefined
        @ 'GHC.Types.LiftedRep
        @ ((a_a5Dc -> Q b_a5Dd) -> SQ a_a5Dc -> Q b_a5Dd)
        $dIP_a5Dh

-- RHS size: {terms: 24, types: 11, coercions: 11, joins: 0/1}
toQ :: forall a. SQ a -> Q a
[LclIdX]
toQ
  = \ (@ a_a5D6) ->
      let {
        $dIP_a5Da :: GHC.Stack.Types.HasCallStack
        [LclId]
        $dIP_a5Da
          = (GHC.Stack.Types.pushCallStack
               (GHC.CString.unpackCString# "undefined"#,
                GHC.Stack.Types.SrcLoc
                  (GHC.CString.unpackCString# "main"#)
                  (GHC.CString.unpackCString# "FDB.GADTForall"#)
                  (GHC.CString.unpackCString# "./FDB/GADTForall.hs"#)
                  (GHC.Types.I# 133#)
                  (GHC.Types.I# 7#)
                  (GHC.Types.I# 133#)
                  (GHC.Types.I# 16#))
               ((GHC.Stack.Types.emptyCallStack
                 `cast` (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                         :: GHC.Stack.Types.CallStack
                            ~R# (?callStack::GHC.Stack.Types.CallStack)))
                `cast` (GHC.Classes.N:IP[0]
                            <"callStack">_N <GHC.Stack.Types.CallStack>_N
                        :: (?callStack::GHC.Stack.Types.CallStack)
                           ~R# GHC.Stack.Types.CallStack)))
            `cast` (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                    :: GHC.Stack.Types.CallStack
                       ~R# (?callStack::GHC.Stack.Types.CallStack)) } in
      undefined
        @ 'GHC.Types.LiftedRep @ (SQ a_a5D6 -> Q a_a5D6) $dIP_a5Da

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
agg :: forall a b s. Agg a b s -> Q a -> SQ b
[LclIdX]
agg = FDB.GADTForall.$WStateFold

-- RHS size: {terms: 12, types: 21, coercions: 0, joins: 0/0}
mapAgg :: forall b c s a. Agg b c s -> (a -> b) -> Q a -> SQ c
[LclIdX]
mapAgg
  = \ (@ b_a5Fc)
      (@ c_a5Fd)
      (@ s_a5Fe)
      (@ a_a5Ff)
      (g_a5jM :: Agg b_a5Fc c_a5Fd s_a5Fe)
      (f_a5jN :: a_a5Ff -> b_a5Fc)
      (q_a5jO :: Q a_a5Ff) ->
      agg
        @ b_a5Fc
        @ c_a5Fd
        @ s_a5Fe
        g_a5jM
        (mapQ @ a_a5Ff @ b_a5Fc f_a5jN q_a5jO)

-- RHS size: {terms: 23, types: 12, coercions: 11, joins: 0/0}
sumAgg :: forall a. Num a => Fold1 a
[LclIdX]
sumAgg
  = \ (@ a_a5CS) _ [Occ=Dead] ->
      undefined
        @ 'GHC.Types.LiftedRep
        @ (Agg a_a5CS a_a5CS a_a5CS)
        ((GHC.Stack.Types.pushCallStack
            (GHC.CString.unpackCString# "undefined"#,
             GHC.Stack.Types.SrcLoc
               (GHC.CString.unpackCString# "main"#)
               (GHC.CString.unpackCString# "FDB.GADTForall"#)
               (GHC.CString.unpackCString# "./FDB/GADTForall.hs"#)
               (GHC.Types.I# 148#)
               (GHC.Types.I# 10#)
               (GHC.Types.I# 148#)
               (GHC.Types.I# 19#))
            ((GHC.Stack.Types.emptyCallStack
              `cast` (Sym (GHC.Classes.N:IP[0]
                               <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                      :: GHC.Stack.Types.CallStack
                         ~R# (?callStack::GHC.Stack.Types.CallStack)))
             `cast` (GHC.Classes.N:IP[0]
                         <"callStack">_N <GHC.Stack.Types.CallStack>_N
                     :: (?callStack::GHC.Stack.Types.CallStack)
                        ~R# GHC.Stack.Types.CallStack)))
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 23, types: 14, coercions: 11, joins: 0/0}
avgAgg :: forall a. Fractional a => Agg a a (a, a)
[LclIdX]
avgAgg
  = \ (@ a_a5CL) _ [Occ=Dead] ->
      undefined
        @ 'GHC.Types.LiftedRep
        @ (Agg a_a5CL a_a5CL (a_a5CL, a_a5CL))
        ((GHC.Stack.Types.pushCallStack
            (GHC.CString.unpackCString# "undefined"#,
             GHC.Stack.Types.SrcLoc
               (GHC.CString.unpackCString# "main"#)
               (GHC.CString.unpackCString# "FDB.GADTForall"#)
               (GHC.CString.unpackCString# "./FDB/GADTForall.hs"#)
               (GHC.Types.I# 151#)
               (GHC.Types.I# 10#)
               (GHC.Types.I# 151#)
               (GHC.Types.I# 19#))
            ((GHC.Stack.Types.emptyCallStack
              `cast` (Sym (GHC.Classes.N:IP[0]
                               <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                      :: GHC.Stack.Types.CallStack
                         ~R# (?callStack::GHC.Stack.Types.CallStack)))
             `cast` (GHC.Classes.N:IP[0]
                         <"callStack">_N <GHC.Stack.Types.CallStack>_N
                     :: (?callStack::GHC.Stack.Types.CallStack)
                        ~R# GHC.Stack.Types.CallStack)))
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 24, types: 14, coercions: 11, joins: 0/0}
count :: forall n a. Integral n => Q a -> SQ n
[LclIdX]
count
  = \ (@ n_a5CD) (@ a_a5CE) _ [Occ=Dead] ->
      undefined
        @ 'GHC.Types.LiftedRep
        @ (Q a_a5CE -> SQ n_a5CD)
        ((GHC.Stack.Types.pushCallStack
            (GHC.CString.unpackCString# "undefined"#,
             GHC.Stack.Types.SrcLoc
               (GHC.CString.unpackCString# "main"#)
               (GHC.CString.unpackCString# "FDB.GADTForall"#)
               (GHC.CString.unpackCString# "./FDB/GADTForall.hs"#)
               (GHC.Types.I# 154#)
               (GHC.Types.I# 9#)
               (GHC.Types.I# 154#)
               (GHC.Types.I# 18#))
            ((GHC.Stack.Types.emptyCallStack
              `cast` (Sym (GHC.Classes.N:IP[0]
                               <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                      :: GHC.Stack.Types.CallStack
                         ~R# (?callStack::GHC.Stack.Types.CallStack)))
             `cast` (GHC.Classes.N:IP[0]
                         <"callStack">_N <GHC.Stack.Types.CallStack>_N
                     :: (?callStack::GHC.Stack.Types.CallStack)
                        ~R# GHC.Stack.Types.CallStack)))
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 18, types: 20, coercions: 0, joins: 0/0}
exists :: forall a. Q a -> SQ Bool
[LclIdX]
exists
  = \ (@ a_a5E8) (q_a5jK :: Q a_a5E8) ->
      >>=
        @ SQ
        FDB.GADTForall.$fMonadSQ
        @ Integer
        @ Bool
        ($ @ 'GHC.Types.LiftedRep
           @ (Q a_a5E8)
           @ (SQ Integer)
           (count @ Integer @ a_a5E8 GHC.Real.$fIntegralInteger)
           (takeQ @ Integer @ a_a5E8 GHC.Real.$fIntegralInteger 1 q_a5jK))
        (\ (c_a5jL :: Integer) ->
           return
             @ SQ
             FDB.GADTForall.$fMonadSQ
             @ Bool
             (> @ Integer
                integer-gmp-1.0.2.0:GHC.Integer.Type.$fOrdInteger
                c_a5jL
                0))

-- RHS size: {terms: 23, types: 12, coercions: 11, joins: 0/0}
minAgg :: forall a. Ord a => Fold1 a
[LclIdX]
minAgg
  = \ (@ a_a5Cw) _ [Occ=Dead] ->
      undefined
        @ 'GHC.Types.LiftedRep
        @ (Agg a_a5Cw a_a5Cw a_a5Cw)
        ((GHC.Stack.Types.pushCallStack
            (GHC.CString.unpackCString# "undefined"#,
             GHC.Stack.Types.SrcLoc
               (GHC.CString.unpackCString# "main"#)
               (GHC.CString.unpackCString# "FDB.GADTForall"#)
               (GHC.CString.unpackCString# "./FDB/GADTForall.hs"#)
               (GHC.Types.I# 157#)
               (GHC.Types.I# 10#)
               (GHC.Types.I# 157#)
               (GHC.Types.I# 19#))
            ((GHC.Stack.Types.emptyCallStack
              `cast` (Sym (GHC.Classes.N:IP[0]
                               <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                      :: GHC.Stack.Types.CallStack
                         ~R# (?callStack::GHC.Stack.Types.CallStack)))
             `cast` (GHC.Classes.N:IP[0]
                         <"callStack">_N <GHC.Stack.Types.CallStack>_N
                     :: (?callStack::GHC.Stack.Types.CallStack)
                        ~R# GHC.Stack.Types.CallStack)))
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 6, types: 9, coercions: 0, joins: 0/0}
rowVal :: forall a. Row a -> a
[LclIdX]
rowVal
  = \ (@ a_a5Cu) (ds_d5Po :: Row a_a5Cu) ->
      case ds_d5Po of { Row _ [Occ=Dead] val_a5jT -> val_a5jT }

-- RHS size: {terms: 7, types: 10, coercions: 0, joins: 0/0}
fetchForeign :: forall a. RowRef a -> SQ a
[LclIdX]
fetchForeign
  = \ (@ a_a5Du) (ref_a5jJ :: RowRef a_a5Du) ->
      <&>
        @ SQ
        @ (Row a_a5Du)
        @ a_a5Du
        FDB.GADTForall.$fFunctorSQ
        (fetchRow @ a_a5Du ref_a5jJ)
        (rowVal @ a_a5Du)

-- RHS size: {terms: 6, types: 9, coercions: 0, joins: 0/0}
rowRef :: forall a. Row a -> RowRef a
[LclIdX]
rowRef
  = \ (@ a_a5Cs) (ds_d5Ph :: Row a_a5Cs) ->
      case ds_d5Ph of { Row ref_a5jU _ [Occ=Dead] -> ref_a5jU }

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$trModule :: GHC.Types.Module
[LclIdX]
FDB.GADTForall.$trModule
  = GHC.Types.Module
      (GHC.Types.TrNameS "main"#) (GHC.Types.TrNameS "FDB.GADTForall"#)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a5Pg [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Pg
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcChar (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a5P6 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5P6
  = GHC.Types.KindRepTyConApp
      GHC.Word.$tcWord64 (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a5P4 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5P4
  = GHC.Types.KindRepTyConApp
      GHC.Word.$tcWord16 (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a5Oz [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Oz
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcBool (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a5Od [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Od
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcConstraint (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a5Pf [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Pf
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tc[]
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a5Pg (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5Oc [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Oc = GHC.Types.KindRepFun GHC.Types.krep$* $krep_a5Od

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5Ob [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Ob = GHC.Types.KindRepFun GHC.Types.krep$* $krep_a5Oc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5P7 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5P7
  = GHC.Types.KindRepFun GHC.Types.krep$* GHC.Types.krep$*->*->*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5Ou [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Ou = GHC.Types.$WKindRepVar (GHC.Types.I# 2#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5Ok [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Ok = GHC.Types.$WKindRepVar (GHC.Types.I# 1#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5Pd [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Pd = GHC.Types.KindRepFun $krep_a5Ou $krep_a5Ok

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5Oh [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Oh = GHC.Types.$WKindRepVar (GHC.Types.I# 0#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OC [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OC = GHC.Types.KindRepFun $krep_a5Oh $krep_a5Ok

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5Pa [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Pa = GHC.Types.KindRepFun $krep_a5Oh $krep_a5Ou

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5P9 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5P9 = GHC.Types.KindRepFun $krep_a5Ou $krep_a5Pa

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5Oy [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Oy = GHC.Types.KindRepFun $krep_a5Oh $krep_a5Oz

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OS [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OS = GHC.Types.KindRepFun $krep_a5Ok $krep_a5Oh

-- RHS size: {terms: 7, types: 3, coercions: 0, joins: 0/0}
$krep_a5Om [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Om
  = GHC.Types.KindRepTyConApp
      GHC.Tuple.$tc(,)
      (GHC.Types.:
         @ GHC.Types.KindRep
         $krep_a5Oh
         (GHC.Types.:
            @ GHC.Types.KindRep $krep_a5Ok (GHC.Types.[] @ GHC.Types.KindRep)))

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a5OQ [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OQ
  = GHC.Types.KindRepTyConApp
      GHC.Classes.$tcOrd
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a5Oh (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a5OV [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OV
  = GHC.Types.KindRepTyConApp
      GHC.Real.$tcIntegral
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a5Oh (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tcTable :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tcTable
  = GHC.Types.TyCon
      6112764465777374685##
      4824890021682489453##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "Table"#)
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a5OF [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OF
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcTable
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a5Oh (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5Pe [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Pe = GHC.Types.KindRepFun $krep_a5Pf $krep_a5OF

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'Table :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tc'Table
  = GHC.Types.TyCon
      10871517142501221515##
      4325455715354573628##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "'Table"#)
      1#
      $krep_a5Pe

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tcAgg :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tcAgg
  = GHC.Types.TyCon
      6997330576107404323##
      12350032399431940804##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "Agg"#)
      0#
      $krep_a5P7

-- RHS size: {terms: 9, types: 4, coercions: 0, joins: 0/0}
$krep_a5Ot [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Ot
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcAgg
      (GHC.Types.:
         @ GHC.Types.KindRep
         $krep_a5Oh
         (GHC.Types.:
            @ GHC.Types.KindRep
            $krep_a5Ok
            (GHC.Types.:
               @ GHC.Types.KindRep
               $krep_a5Ou
               (GHC.Types.[] @ GHC.Types.KindRep))))

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5Pc [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Pc = GHC.Types.KindRepFun $krep_a5Pd $krep_a5Ot

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5Pb [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Pb = GHC.Types.KindRepFun $krep_a5Ou $krep_a5Pc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5P8 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5P8 = GHC.Types.KindRepFun $krep_a5P9 $krep_a5Pb

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'Agg :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tc'Agg
  = GHC.Types.TyCon
      8300879811530789064##
      621423574753608316##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "'Agg"#)
      3#
      $krep_a5P8

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tcRowId :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tcRowId
  = GHC.Types.TyCon
      6564313131908661638##
      391072849311021736##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "RowId"#)
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a5P2 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5P2
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcRowId (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5P5 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5P5 = GHC.Types.KindRepFun $krep_a5P6 $krep_a5P2

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'RowId :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tc'RowId
  = GHC.Types.TyCon
      11182397406630558385##
      2250286617457619889##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "'RowId"#)
      0#
      $krep_a5P5

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tcTableId :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tcTableId
  = GHC.Types.TyCon
      221136922417672250##
      2647284849506157507##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "TableId"#)
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a5P0 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5P0
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcTableId (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5P3 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5P3 = GHC.Types.KindRepFun $krep_a5P4 $krep_a5P0

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'TableId :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tc'TableId
  = GHC.Types.TyCon
      299570635528495236##
      7767331940541179554##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "'TableId"#)
      0#
      $krep_a5P3

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tcRowRef :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tcRowRef
  = GHC.Types.TyCon
      6167723302899116461##
      12820464192123209494##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "RowRef"#)
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a5Op [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Op
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcRowRef
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a5Oh (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5P1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5P1 = GHC.Types.KindRepFun $krep_a5P2 $krep_a5Op

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OZ [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OZ = GHC.Types.KindRepFun $krep_a5P0 $krep_a5P1

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'RowRef :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tc'RowRef
  = GHC.Types.TyCon
      1951283466925547487##
      17778823377038719573##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "'RowRef"#)
      1#
      $krep_a5OZ

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tcRow :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tcRow
  = GHC.Types.TyCon
      7837339403267824689##
      11319950323759755044##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "Row"#)
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a5Or [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Or
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcRow
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a5Oh (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OY [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OY = GHC.Types.KindRepFun $krep_a5Oh $krep_a5Or

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OX [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OX = GHC.Types.KindRepFun $krep_a5Op $krep_a5OY

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'Row :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tc'Row
  = GHC.Types.TyCon
      16802854983749163630##
      1951157969764704594##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "'Row"#)
      1#
      $krep_a5OX

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tcQ :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tcQ
  = GHC.Types.TyCon
      18238656953556965988##
      5882741213209533844##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "Q"#)
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a5Og [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Og
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcQ
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a5Oh (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OE [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OE = GHC.Types.KindRepFun $krep_a5OF $krep_a5Og

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'Read :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tc'Read
  = GHC.Types.TyCon
      5506696017368664421##
      2631673073369786685##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "'Read"#)
      1#
      $krep_a5OE

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OA [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OA = GHC.Types.KindRepFun $krep_a5Og $krep_a5Og

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5Ox [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Ox = GHC.Types.KindRepFun $krep_a5Oy $krep_a5OA

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'Filter :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tc'Filter
  = GHC.Types.TyCon
      3342106065591891117##
      5504432989845619796##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "'Filter"#)
      1#
      $krep_a5Ox

-- RHS size: {terms: 7, types: 3, coercions: 0, joins: 0/0}
$krep_a5OJ [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OJ
  = GHC.Types.KindRepTyConApp
      GHC.Tuple.$tc(,)
      (GHC.Types.:
         @ GHC.Types.KindRep
         $krep_a5Ok
         (GHC.Types.:
            @ GHC.Types.KindRep $krep_a5Og (GHC.Types.[] @ GHC.Types.KindRep)))

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a5Oj [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Oj
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcQ
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a5Ok (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OD [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OD = GHC.Types.KindRepFun $krep_a5Og $krep_a5Oj

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OB [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OB = GHC.Types.KindRepFun $krep_a5OC $krep_a5OD

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'Map :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tc'Map
  = GHC.Types.TyCon
      14379505272008014040##
      10084327610682124345##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "'Map"#)
      2#
      $krep_a5OB

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OT [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OT = GHC.Types.KindRepFun $krep_a5Oj $krep_a5Oj

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OW [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OW = GHC.Types.KindRepFun $krep_a5Oh $krep_a5OT

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OU [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OU = GHC.Types.KindRepFun $krep_a5OV $krep_a5OW

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'Take :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tc'Take
  = GHC.Types.TyCon
      18145023462564812289##
      14897176176755836167##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "'Take"#)
      2#
      $krep_a5OU

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OR [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OR = GHC.Types.KindRepFun $krep_a5OS $krep_a5OT

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OP [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OP = GHC.Types.KindRepFun $krep_a5OQ $krep_a5OR

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'OrderBy :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tc'OrderBy
  = GHC.Types.TyCon
      14908185740511951096##
      14008337868706905896##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "'OrderBy"#)
      2#
      $krep_a5OP

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a5Ol [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Ol
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcQ
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a5Om (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5Oi [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Oi = GHC.Types.KindRepFun $krep_a5Oj $krep_a5Ol

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5Of [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Of = GHC.Types.KindRepFun $krep_a5Og $krep_a5Oi

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a5OI [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OI
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcQ
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a5OJ (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OH [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OH = GHC.Types.KindRepFun $krep_a5Og $krep_a5OI

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OG [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OG = GHC.Types.KindRepFun $krep_a5OC $krep_a5OH

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'GroupBy :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tc'GroupBy
  = GHC.Types.TyCon
      13670223224869757845##
      8697476818672593631##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "'GroupBy"#)
      2#
      $krep_a5OG

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tcSQ :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tcSQ
  = GHC.Types.TyCon
      7724225419132177098##
      14063341351447723075##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "SQ"#)
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a5Ow [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Ow
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcSQ
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a5Ok (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OL [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OL = GHC.Types.KindRepFun $krep_a5Oh $krep_a5Ow

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OK [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OK = GHC.Types.KindRepFun $krep_a5OL $krep_a5OD

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'MapSQ :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tc'MapSQ
  = GHC.Types.TyCon
      1443944143463630897##
      6245638742163314951##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "'MapSQ"#)
      2#
      $krep_a5OK

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5Ov [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Ov = GHC.Types.KindRepFun $krep_a5Og $krep_a5Ow

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5Os [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Os = GHC.Types.KindRepFun $krep_a5Ot $krep_a5Ov

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'StateFold :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tc'StateFold
  = GHC.Types.TyCon
      18411259465723880701##
      4094594497890411514##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "'StateFold"#)
      3#
      $krep_a5Os

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a5Oq [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Oq
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcSQ
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a5Or (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5Oo [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Oo = GHC.Types.KindRepFun $krep_a5Op $krep_a5Oq

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'FetchRow :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tc'FetchRow
  = GHC.Types.TyCon
      10701926302208271525##
      2310866770539922913##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "'FetchRow"#)
      1#
      $krep_a5Oo

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a5OO [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OO
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcSQ
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a5Oz (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5ON [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5ON = GHC.Types.KindRepFun $krep_a5Oh $krep_a5OO

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5OM [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5OM = GHC.Types.KindRepFun $krep_a5ON $krep_a5OA

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'FilterSQ :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tc'FilterSQ
  = GHC.Types.TyCon
      3550822472285476798##
      14511159754611735049##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "'FilterSQ"#)
      1#
      $krep_a5OM

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tcNatJoin :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tcNatJoin
  = GHC.Types.TyCon
      4754972827294106747##
      18091397365184212835##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "NatJoin"#)
      0#
      $krep_a5Ob

-- RHS size: {terms: 7, types: 3, coercions: 0, joins: 0/0}
$krep_a5On [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5On
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcNatJoin
      (GHC.Types.:
         @ GHC.Types.KindRep
         $krep_a5Oh
         (GHC.Types.:
            @ GHC.Types.KindRep $krep_a5Ok (GHC.Types.[] @ GHC.Types.KindRep)))

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5Oe [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a5Oe = GHC.Types.KindRepFun $krep_a5Of $krep_a5On

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'C:NatJoin :: GHC.Types.TyCon
[LclIdX]
FDB.GADTForall.$tc'C:NatJoin
  = GHC.Types.TyCon
      1773075345423852451##
      14997350799920276371##
      FDB.GADTForall.$trModule
      (GHC.Types.TrNameS "'C:NatJoin"#)
      2#
      $krep_a5Oe



[7 of 9] Compiling FDB.FDB          ( FDB/FDB.hs, FDB/FDB.o )

==================== Desugar (after optimization) ====================
Result size of Desugar (after optimization)
  = {terms: 6, types: 1, coercions: 0, joins: 0/0}

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
FDB.FDB.$trModule :: GHC.Types.Module
[LclIdX]
FDB.FDB.$trModule
  = GHC.Types.Module
      (GHC.Types.TrNameS "main"#) (GHC.Types.TrNameS "FDB.FDB"#)



[8 of 9] Compiling TPCH.Functional.Schema ( TPCH/Functional/Schema.hs, TPCH/Functional/Schema.o )

==================== Desugar (after optimization) ====================
Result size of Desugar (after optimization)
  = {terms: 1,125, types: 1,036, coercions: 154, joins: 1/1}

-- RHS size: {terms: 9, types: 4, coercions: 0, joins: 0/0}
$c==_a6QL :: Region -> Region -> Bool
[LclId]
$c==_a6QL
  = \ (ds_d71m :: Region) (ds_d71n :: Region) ->
      case ds_d71m of { EMEA ->
      case ds_d71n of { EMEA -> GHC.Types.True }
      }

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$fEqRegion [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq Region
[LclIdX[DFunId],
 Unf=DFun: \ -> GHC.Classes.C:Eq TYPE: Region $c==_a6QL $c/=_a6QP]
TPCH.Functional.Schema.$fEqRegion
  = GHC.Classes.C:Eq @ Region $c==_a6QL $c/=_a6QP

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$c/=_a6QP [Occ=LoopBreaker] :: Region -> Region -> Bool
[LclId]
$c/=_a6QP
  = GHC.Classes.$dm/= @ Region TPCH.Functional.Schema.$fEqRegion
end Rec }

-- RHS size: {terms: 23, types: 8, coercions: 0, joins: 1/1}
$c==_a6Qz :: Nation -> Nation -> Bool
[LclId]
$c==_a6Qz
  = \ (ds_d71i :: Nation) (ds_d71j :: Nation) ->
      join {
        fail_d71k :: GHC.Prim.Void# -> Bool
        [LclId[JoinId(1)]]
        fail_d71k _ [Occ=Dead, OS=OneShot] = GHC.Types.False } in
      case ds_d71i of {
        France ->
          case ds_d71j of {
            __DEFAULT -> jump fail_d71k GHC.Prim.void#;
            France -> GHC.Types.True
          };
        Germany ->
          case ds_d71j of {
            __DEFAULT -> jump fail_d71k GHC.Prim.void#;
            Germany -> GHC.Types.True
          }
      }

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$fEqNation [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq Nation
[LclIdX[DFunId],
 Unf=DFun: \ -> GHC.Classes.C:Eq TYPE: Nation $c==_a6Qz $c/=_a6QD]
TPCH.Functional.Schema.$fEqNation
  = GHC.Classes.C:Eq @ Nation $c==_a6Qz $c/=_a6QD

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$c/=_a6QD [Occ=LoopBreaker] :: Nation -> Nation -> Bool
[LclId]
$c/=_a6QD
  = GHC.Classes.$dm/= @ Nation TPCH.Functional.Schema.$fEqNation
end Rec }

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
p_comment :: Part -> String
[LclIdX[[RecSel]]]
p_comment
  = \ (ds_d719 :: Part) ->
      case ds_d719 of
      { Part _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds_d71h ->
      ds_d71h
      }

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
p_retailprice :: Part -> Decimal
[LclIdX[[RecSel]]]
p_retailprice
  = \ (ds_d710 :: Part) ->
      case ds_d710 of
      { Part _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
             _ [Occ=Dead] _ [Occ=Dead] ds_d717 _ [Occ=Dead] ->
      ds_d717
      }

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
p_container :: Part -> String
[LclIdX[[RecSel]]]
p_container
  = \ (ds_d70R :: Part) ->
      case ds_d70R of
      { Part _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
             _ [Occ=Dead] ds_d70X _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d70X
      }

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
p_size :: Part -> Int
[LclIdX[[RecSel]]]
p_size
  = \ (ds_d70I :: Part) ->
      case ds_d70I of
      { Part _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds_d70N
             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d70N
      }

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
p_type :: Part -> String
[LclIdX[[RecSel]]]
p_type
  = \ (ds_d70z :: Part) ->
      case ds_d70z of
      { Part _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds_d70D _ [Occ=Dead]
             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d70D
      }

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
p_brand :: Part -> String
[LclIdX[[RecSel]]]
p_brand
  = \ (ds_d70q :: Part) ->
      case ds_d70q of
      { Part _ [Occ=Dead] _ [Occ=Dead] ds_d70t _ [Occ=Dead] _ [Occ=Dead]
             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d70t
      }

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
p_mfgr :: Part -> String
[LclIdX[[RecSel]]]
p_mfgr
  = \ (ds_d70h :: Part) ->
      case ds_d70h of
      { Part _ [Occ=Dead] ds_d70j _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d70j
      }

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
p_name :: Part -> String
[LclIdX[[RecSel]]]
p_name
  = \ (ds_d708 :: Part) ->
      case ds_d708 of
      { Part ds_d709 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d709
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
c_comment :: Customer -> String
[LclIdX[[RecSel]]]
c_comment
  = \ (ds_d700 :: Customer) ->
      case ds_d700 of
      { Customer _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ds_d707 ->
      ds_d707
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
c_mktsegment :: Customer -> String
[LclIdX[[RecSel]]]
c_mktsegment
  = \ (ds_d6ZS :: Customer) ->
      case ds_d6ZS of
      { Customer _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] ds_d6ZY _ [Occ=Dead] ->
      ds_d6ZY
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
c_acctbal :: Customer -> Decimal
[LclIdX[[RecSel]]]
c_acctbal
  = \ (ds_d6ZK :: Customer) ->
      case ds_d6ZK of
      { Customer _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 ds_d6ZP _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6ZP
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
c_phone :: Customer -> PhoneNumber
[LclIdX[[RecSel]]]
c_phone
  = \ (ds_d6ZC :: Customer) ->
      case ds_d6ZC of
      { Customer _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds_d6ZG
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6ZG
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
c_nation :: Customer -> Nation
[LclIdX[[RecSel]]]
c_nation
  = \ (ds_d6Zu :: Customer) ->
      case ds_d6Zu of
      { Customer _ [Occ=Dead] _ [Occ=Dead] ds_d6Zx _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6Zx
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
c_address :: Customer -> String
[LclIdX[[RecSel]]]
c_address
  = \ (ds_d6Zm :: Customer) ->
      case ds_d6Zm of
      { Customer _ [Occ=Dead] ds_d6Zo _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6Zo
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
c_name :: Customer -> String
[LclIdX[[RecSel]]]
c_name
  = \ (ds_d6Ze :: Customer) ->
      case ds_d6Ze of
      { Customer ds_d6Zf _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6Zf
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
o_comment :: Order -> String
[LclIdX[[RecSel]]]
o_comment
  = \ (ds_d6Z5 :: Order) ->
      case ds_d6Z5 of
      { Order _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds_d6Zd ->
      ds_d6Zd
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
o_shippriority :: Order -> Int
[LclIdX[[RecSel]]]
o_shippriority
  = \ (ds_d6YW :: Order) ->
      case ds_d6YW of
      { Order _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
              _ [Occ=Dead] _ [Occ=Dead] ds_d6Z3 _ [Occ=Dead] ->
      ds_d6Z3
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
o_clerk :: Order -> String
[LclIdX[[RecSel]]]
o_clerk
  = \ (ds_d6YN :: Order) ->
      case ds_d6YN of
      { Order _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
              _ [Occ=Dead] ds_d6YT _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6YT
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
o_orderpriority :: Order -> String
[LclIdX[[RecSel]]]
o_orderpriority
  = \ (ds_d6YE :: Order) ->
      case ds_d6YE of
      { Order _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds_d6YJ
              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6YJ
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
o_orderdate :: Order -> Date
[LclIdX[[RecSel]]]
o_orderdate
  = \ (ds_d6Yv :: Order) ->
      case ds_d6Yv of
      { Order _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds_d6Yz _ [Occ=Dead]
              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6Yz
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
o_totalprice :: Order -> Decimal
[LclIdX[[RecSel]]]
o_totalprice
  = \ (ds_d6Ym :: Order) ->
      case ds_d6Ym of
      { Order _ [Occ=Dead] _ [Occ=Dead] ds_d6Yp _ [Occ=Dead] _ [Occ=Dead]
              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6Yp
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
o_orderstatus :: Order -> Char
[LclIdX[[RecSel]]]
o_orderstatus
  = \ (ds_d6Yd :: Order) ->
      case ds_d6Yd of
      { Order _ [Occ=Dead] ds_d6Yf _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6Yf
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
o_custref :: Order -> TableRef Customer
[LclIdX[[RecSel]]]
o_custref
  = \ (ds_d6Y4 :: Order) ->
      case ds_d6Y4 of
      { Order ds_d6Y5 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6Y5
      }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
s_comment :: Supplier -> String
[LclIdX[[RecSel]]]
s_comment
  = \ (ds_d6XX :: Supplier) ->
      case ds_d6XX of
      { Supplier _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] ds_d6Y3 ->
      ds_d6Y3
      }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
s_acctbal :: Supplier -> Decimal
[LclIdX[[RecSel]]]
s_acctbal
  = \ (ds_d6XQ :: Supplier) ->
      case ds_d6XQ of
      { Supplier _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 ds_d6XV _ [Occ=Dead] ->
      ds_d6XV
      }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
s_phone :: Supplier -> PhoneNumber
[LclIdX[[RecSel]]]
s_phone
  = \ (ds_d6XJ :: Supplier) ->
      case ds_d6XJ of
      { Supplier _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds_d6XN
                 _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6XN
      }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
s_nation :: Supplier -> Nation
[LclIdX[[RecSel]]]
s_nation
  = \ (ds_d6XC :: Supplier) ->
      case ds_d6XC of
      { Supplier _ [Occ=Dead] _ [Occ=Dead] ds_d6XF _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6XF
      }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
s_address :: Supplier -> String
[LclIdX[[RecSel]]]
s_address
  = \ (ds_d6Xv :: Supplier) ->
      case ds_d6Xv of
      { Supplier _ [Occ=Dead] ds_d6Xx _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6Xx
      }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
s_name :: Supplier -> String
[LclIdX[[RecSel]]]
s_name
  = \ (ds_d6Xo :: Supplier) ->
      case ds_d6Xo of
      { Supplier ds_d6Xp _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6Xp
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
l_comment :: LineItem -> String
[LclIdX[[RecSel]]]
l_comment
  = \ (ds_d6X7 :: LineItem) ->
      case ds_d6X7 of
      { LineItem _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] ds_d6Xn ->
      ds_d6Xn
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
l_shipmode :: LineItem -> String
[LclIdX[[RecSel]]]
l_shipmode
  = \ (ds_d6WQ :: LineItem) ->
      case ds_d6WQ of
      { LineItem _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 ds_d6X5 _ [Occ=Dead] ->
      ds_d6X5
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
l_shipinstruct :: LineItem -> String
[LclIdX[[RecSel]]]
l_shipinstruct
  = \ (ds_d6Wz :: LineItem) ->
      case ds_d6Wz of
      { LineItem _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds_d6WN
                 _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6WN
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
l_receiptdate :: LineItem -> Date
[LclIdX[[RecSel]]]
l_receiptdate
  = \ (ds_d6Wi :: LineItem) ->
      case ds_d6Wi of
      { LineItem _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds_d6Wv _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6Wv
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
l_commitdate :: LineItem -> Date
[LclIdX[[RecSel]]]
l_commitdate
  = \ (ds_d6W1 :: LineItem) ->
      case ds_d6W1 of
      { LineItem _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ds_d6Wd _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6Wd
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
l_shipdate :: LineItem -> Date
[LclIdX[[RecSel]]]
l_shipdate
  = \ (ds_d6VK :: LineItem) ->
      case ds_d6VK of
      { LineItem _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] ds_d6VV _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6VV
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
l_linestatus :: LineItem -> Char
[LclIdX[[RecSel]]]
l_linestatus
  = \ (ds_d6Vt :: LineItem) ->
      case ds_d6Vt of
      { LineItem _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 ds_d6VD _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6VD
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
l_returnflag :: LineItem -> Char
[LclIdX[[RecSel]]]
l_returnflag
  = \ (ds_d6Vc :: LineItem) ->
      case ds_d6Vc of
      { LineItem _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds_d6Vl
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6Vl
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
l_tax :: LineItem -> Decimal
[LclIdX[[RecSel]]]
l_tax
  = \ (ds_d6UV :: LineItem) ->
      case ds_d6UV of
      { LineItem _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds_d6V3 _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6V3
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
l_discount :: LineItem -> Decimal
[LclIdX[[RecSel]]]
l_discount
  = \ (ds_d6UE :: LineItem) ->
      case ds_d6UE of
      { LineItem _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ds_d6UL _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6UL
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
l_extendedprice :: LineItem -> Decimal
[LclIdX[[RecSel]]]
l_extendedprice
  = \ (ds_d6Un :: LineItem) ->
      case ds_d6Un of
      { LineItem _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] ds_d6Ut _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6Ut
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
l_quantity :: LineItem -> Decimal
[LclIdX[[RecSel]]]
l_quantity
  = \ (ds_d6U6 :: LineItem) ->
      case ds_d6U6 of
      { LineItem _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 ds_d6Ub _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6Ub
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
l_linenumber :: LineItem -> Int
[LclIdX[[RecSel]]]
l_linenumber
  = \ (ds_d6TP :: LineItem) ->
      case ds_d6TP of
      { LineItem _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds_d6TT
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6TT
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
l_suppref :: LineItem -> TableRef Supplier
[LclIdX[[RecSel]]]
l_suppref
  = \ (ds_d6Ty :: LineItem) ->
      case ds_d6Ty of
      { LineItem _ [Occ=Dead] _ [Occ=Dead] ds_d6TB _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6TB
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
l_partref :: LineItem -> TableRef Part
[LclIdX[[RecSel]]]
l_partref
  = \ (ds_d6Th :: LineItem) ->
      case ds_d6Th of
      { LineItem _ [Occ=Dead] ds_d6Tj _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6Tj
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
l_orderref :: LineItem -> TableRef Order
[LclIdX[[RecSel]]]
l_orderref
  = \ (ds_d6T0 :: LineItem) ->
      case ds_d6T0 of
      { LineItem ds_d6T1 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] _ [Occ=Dead] ->
      ds_d6T1
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
ps_comment :: PartSupp -> String
[LclIdX[[RecSel]]]
ps_comment
  = \ (ds_d6SU :: PartSupp) ->
      case ds_d6SU of
      { PartSupp _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 ds_d6SZ ->
      ds_d6SZ
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
ps_supplycost :: PartSupp -> Decimal
[LclIdX[[RecSel]]]
ps_supplycost
  = \ (ds_d6SO :: PartSupp) ->
      case ds_d6SO of
      { PartSupp _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds_d6SS
                 _ [Occ=Dead] ->
      ds_d6SS
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
ps_availqty :: PartSupp -> Int
[LclIdX[[RecSel]]]
ps_availqty
  = \ (ds_d6SI :: PartSupp) ->
      case ds_d6SI of
      { PartSupp _ [Occ=Dead] _ [Occ=Dead] ds_d6SL _ [Occ=Dead]
                 _ [Occ=Dead] ->
      ds_d6SL
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
ps_suppref :: PartSupp -> TableRef Supplier
[LclIdX[[RecSel]]]
ps_suppref
  = \ (ds_d6SC :: PartSupp) ->
      case ds_d6SC of
      { PartSupp _ [Occ=Dead] ds_d6SE _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] ->
      ds_d6SE
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
ps_partref :: PartSupp -> TableRef Part
[LclIdX[[RecSel]]]
ps_partref
  = \ (ds_d6Sw :: PartSupp) ->
      case ds_d6Sw of
      { PartSupp ds_d6Sx _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                 _ [Occ=Dead] ->
      ds_d6Sx
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lineitems :: Table LineItem
[LclIdX]
lineitems
  = findTable @ LineItem (GHC.CString.unpackCString# "LineItems"#)

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$trModule :: GHC.Types.Module
[LclIdX]
TPCH.Functional.Schema.$trModule
  = GHC.Types.Module
      (GHC.Types.TrNameS "main"#)
      (GHC.Types.TrNameS "TPCH.Functional.Schema"#)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a6RE [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RE
  = GHC.Types.KindRepTyConApp
      GHC.Tuple.$tc() (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a6Rp [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rp
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcChar (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a6Rm [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rm
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcDouble (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a6Rk [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rk
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcInt (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a6Ro [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Ro
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tc[]
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a6Rp (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tcPart :: GHC.Types.TyCon
[LclIdX]
TPCH.Functional.Schema.$tcPart
  = GHC.Types.TyCon
      12636939280764832122##
      2042036841775798596##
      TPCH.Functional.Schema.$trModule
      (GHC.Types.TrNameS "Part"#)
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a6Rf [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rf
  = GHC.Types.KindRepTyConApp
      TPCH.Functional.Schema.$tcPart (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Sg [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Sg = GHC.Types.KindRepFun $krep_a6Ro $krep_a6Rf

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Sf [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Sf = GHC.Types.KindRepFun $krep_a6Rm $krep_a6Sg

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Se [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Se = GHC.Types.KindRepFun $krep_a6Ro $krep_a6Sf

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Sd [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Sd = GHC.Types.KindRepFun $krep_a6Rk $krep_a6Se

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Sc [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Sc = GHC.Types.KindRepFun $krep_a6Ro $krep_a6Sd

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Sb [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Sb = GHC.Types.KindRepFun $krep_a6Ro $krep_a6Sc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Sa [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Sa = GHC.Types.KindRepFun $krep_a6Ro $krep_a6Sb

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6S9 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6S9 = GHC.Types.KindRepFun $krep_a6Ro $krep_a6Sa

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tc'Part :: GHC.Types.TyCon
[LclIdX]
TPCH.Functional.Schema.$tc'Part
  = GHC.Types.TyCon
      2861360684592645105##
      14440751847480628405##
      TPCH.Functional.Schema.$trModule
      (GHC.Types.TrNameS "'Part"#)
      0#
      $krep_a6S9

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a6Re [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Re
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcRowRef
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a6Rf (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tcNation :: GHC.Types.TyCon
[LclIdX]
TPCH.Functional.Schema.$tcNation
  = GHC.Types.TyCon
      10710764971294019521##
      2958077427421035359##
      TPCH.Functional.Schema.$trModule
      (GHC.Types.TrNameS "Nation"#)
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a6RO [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RO
  = GHC.Types.KindRepTyConApp
      TPCH.Functional.Schema.$tcNation (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tc'France :: GHC.Types.TyCon
[LclIdX]
TPCH.Functional.Schema.$tc'France
  = GHC.Types.TyCon
      15209813697351554211##
      883766417185207263##
      TPCH.Functional.Schema.$trModule
      (GHC.Types.TrNameS "'France"#)
      0#
      $krep_a6RO

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tc'Germany :: GHC.Types.TyCon
[LclIdX]
TPCH.Functional.Schema.$tc'Germany
  = GHC.Types.TyCon
      1372385427742964851##
      11954998232734438622##
      TPCH.Functional.Schema.$trModule
      (GHC.Types.TrNameS "'Germany"#)
      0#
      $krep_a6RO

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tcCustomer :: GHC.Types.TyCon
[LclIdX]
TPCH.Functional.Schema.$tcCustomer
  = GHC.Types.TyCon
      7146533123847939809##
      6452800127542812900##
      TPCH.Functional.Schema.$trModule
      (GHC.Types.TrNameS "Customer"#)
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a6RU [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RU
  = GHC.Types.KindRepTyConApp
      TPCH.Functional.Schema.$tcCustomer
      (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6S8 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6S8 = GHC.Types.KindRepFun $krep_a6Ro $krep_a6RU

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6S7 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6S7 = GHC.Types.KindRepFun $krep_a6Ro $krep_a6S8

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6S6 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6S6 = GHC.Types.KindRepFun $krep_a6Rm $krep_a6S7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6S5 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6S5 = GHC.Types.KindRepFun $krep_a6RE $krep_a6S6

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6S4 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6S4 = GHC.Types.KindRepFun $krep_a6RO $krep_a6S5

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6S3 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6S3 = GHC.Types.KindRepFun $krep_a6Ro $krep_a6S4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6S2 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6S2 = GHC.Types.KindRepFun $krep_a6Ro $krep_a6S3

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tc'Customer :: GHC.Types.TyCon
[LclIdX]
TPCH.Functional.Schema.$tc'Customer
  = GHC.Types.TyCon
      14764552819634216928##
      6068166705854968441##
      TPCH.Functional.Schema.$trModule
      (GHC.Types.TrNameS "'Customer"#)
      0#
      $krep_a6S2

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a6RT [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RT
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcRowRef
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a6RU (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tcOrder :: GHC.Types.TyCon
[LclIdX]
TPCH.Functional.Schema.$tcOrder
  = GHC.Types.TyCon
      10277513951169694645##
      16962993689770346345##
      TPCH.Functional.Schema.$trModule
      (GHC.Types.TrNameS "Order"#)
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a6Rt [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rt
  = GHC.Types.KindRepTyConApp
      TPCH.Functional.Schema.$tcOrder (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6S1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6S1 = GHC.Types.KindRepFun $krep_a6Ro $krep_a6Rt

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6S0 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6S0 = GHC.Types.KindRepFun $krep_a6Rk $krep_a6S1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RZ [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RZ = GHC.Types.KindRepFun $krep_a6Ro $krep_a6S0

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RY [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RY = GHC.Types.KindRepFun $krep_a6Ro $krep_a6RZ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RX [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RX = GHC.Types.KindRepFun $krep_a6RE $krep_a6RY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RW [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RW = GHC.Types.KindRepFun $krep_a6Rm $krep_a6RX

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RV [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RV = GHC.Types.KindRepFun $krep_a6Rp $krep_a6RW

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RS [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RS = GHC.Types.KindRepFun $krep_a6RT $krep_a6RV

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tc'Order :: GHC.Types.TyCon
[LclIdX]
TPCH.Functional.Schema.$tc'Order
  = GHC.Types.TyCon
      13153087065208477111##
      17701592658522406836##
      TPCH.Functional.Schema.$trModule
      (GHC.Types.TrNameS "'Order"#)
      0#
      $krep_a6RS

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a6Rs [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rs
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcRowRef
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a6Rt (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tcSupplier :: GHC.Types.TyCon
[LclIdX]
TPCH.Functional.Schema.$tcSupplier
  = GHC.Types.TyCon
      5537664870048215054##
      6807973368023935809##
      TPCH.Functional.Schema.$trModule
      (GHC.Types.TrNameS "Supplier"#)
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a6Ri [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Ri
  = GHC.Types.KindRepTyConApp
      TPCH.Functional.Schema.$tcSupplier
      (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RR [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RR = GHC.Types.KindRepFun $krep_a6Ro $krep_a6Ri

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RQ [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RQ = GHC.Types.KindRepFun $krep_a6Rm $krep_a6RR

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RP [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RP = GHC.Types.KindRepFun $krep_a6RE $krep_a6RQ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RN [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RN = GHC.Types.KindRepFun $krep_a6RO $krep_a6RP

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RM [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RM = GHC.Types.KindRepFun $krep_a6Ro $krep_a6RN

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RL [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RL = GHC.Types.KindRepFun $krep_a6Ro $krep_a6RM

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tc'Supplier :: GHC.Types.TyCon
[LclIdX]
TPCH.Functional.Schema.$tc'Supplier
  = GHC.Types.TyCon
      3112581097731694837##
      5980504949697491730##
      TPCH.Functional.Schema.$trModule
      (GHC.Types.TrNameS "'Supplier"#)
      0#
      $krep_a6RL

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_a6Rh [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rh
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcRowRef
      (GHC.Types.:
         @ GHC.Types.KindRep $krep_a6Ri (GHC.Types.[] @ GHC.Types.KindRep))

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tcLineItem :: GHC.Types.TyCon
[LclIdX]
TPCH.Functional.Schema.$tcLineItem
  = GHC.Types.TyCon
      4413522648051142635##
      4580059422389727633##
      TPCH.Functional.Schema.$trModule
      (GHC.Types.TrNameS "LineItem"#)
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a6RK [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RK
  = GHC.Types.KindRepTyConApp
      TPCH.Functional.Schema.$tcLineItem
      (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RJ [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RJ = GHC.Types.KindRepFun $krep_a6Ro $krep_a6RK

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RI [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RI = GHC.Types.KindRepFun $krep_a6Ro $krep_a6RJ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RH [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RH = GHC.Types.KindRepFun $krep_a6Ro $krep_a6RI

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RG [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RG = GHC.Types.KindRepFun $krep_a6RE $krep_a6RH

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RF [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RF = GHC.Types.KindRepFun $krep_a6RE $krep_a6RG

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RD [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RD = GHC.Types.KindRepFun $krep_a6RE $krep_a6RF

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RC [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RC = GHC.Types.KindRepFun $krep_a6Rp $krep_a6RD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RB [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RB = GHC.Types.KindRepFun $krep_a6Rp $krep_a6RC

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6RA [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6RA = GHC.Types.KindRepFun $krep_a6Rm $krep_a6RB

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Rz [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rz = GHC.Types.KindRepFun $krep_a6Rm $krep_a6RA

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Ry [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Ry = GHC.Types.KindRepFun $krep_a6Rm $krep_a6Rz

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Rx [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rx = GHC.Types.KindRepFun $krep_a6Rm $krep_a6Ry

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Rw [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rw = GHC.Types.KindRepFun $krep_a6Rk $krep_a6Rx

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Rv [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rv = GHC.Types.KindRepFun $krep_a6Rh $krep_a6Rw

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Ru [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Ru = GHC.Types.KindRepFun $krep_a6Re $krep_a6Rv

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Rr [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rr = GHC.Types.KindRepFun $krep_a6Rs $krep_a6Ru

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tc'LineItem :: GHC.Types.TyCon
[LclIdX]
TPCH.Functional.Schema.$tc'LineItem
  = GHC.Types.TyCon
      8539620922902222438##
      9565303329789687194##
      TPCH.Functional.Schema.$trModule
      (GHC.Types.TrNameS "'LineItem"#)
      0#
      $krep_a6Rr

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tcPartSupp :: GHC.Types.TyCon
[LclIdX]
TPCH.Functional.Schema.$tcPartSupp
  = GHC.Types.TyCon
      10849560314591573693##
      11581864324186551291##
      TPCH.Functional.Schema.$trModule
      (GHC.Types.TrNameS "PartSupp"#)
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a6Rq [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rq
  = GHC.Types.KindRepTyConApp
      TPCH.Functional.Schema.$tcPartSupp
      (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Rn [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rn = GHC.Types.KindRepFun $krep_a6Ro $krep_a6Rq

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Rl [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rl = GHC.Types.KindRepFun $krep_a6Rm $krep_a6Rn

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Rj [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rj = GHC.Types.KindRepFun $krep_a6Rk $krep_a6Rl

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Rg [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rg = GHC.Types.KindRepFun $krep_a6Rh $krep_a6Rj

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a6Rd [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rd = GHC.Types.KindRepFun $krep_a6Re $krep_a6Rg

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tc'PartSupp :: GHC.Types.TyCon
[LclIdX]
TPCH.Functional.Schema.$tc'PartSupp
  = GHC.Types.TyCon
      10754361947780373833##
      14007972955674632504##
      TPCH.Functional.Schema.$trModule
      (GHC.Types.TrNameS "'PartSupp"#)
      0#
      $krep_a6Rd

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tcRegion :: GHC.Types.TyCon
[LclIdX]
TPCH.Functional.Schema.$tcRegion
  = GHC.Types.TyCon
      17005900331151520450##
      2933480038519603125##
      TPCH.Functional.Schema.$trModule
      (GHC.Types.TrNameS "Region"#)
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a6Rc [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[LclId]
$krep_a6Rc
  = GHC.Types.KindRepTyConApp
      TPCH.Functional.Schema.$tcRegion (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tc'EMEA :: GHC.Types.TyCon
[LclIdX]
TPCH.Functional.Schema.$tc'EMEA
  = GHC.Types.TyCon
      8266201620596383484##
      3675984000706788314##
      TPCH.Functional.Schema.$trModule
      (GHC.Types.TrNameS "'EMEA"#)
      0#
      $krep_a6Rc

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a6Qx :: GHC.Stack.Types.HasCallStack
[LclId]
$dIP_a6Qx
  = (GHC.Stack.Types.pushCallStack
       (GHC.CString.unpackCString# "undefined"#,
        GHC.Stack.Types.SrcLoc
          (GHC.CString.unpackCString# "main"#)
          (GHC.CString.unpackCString# "TPCH.Functional.Schema"#)
          (GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#)
          (GHC.Types.I# 21#)
          (GHC.Types.I# 9#)
          (GHC.Types.I# 21#)
          (GHC.Types.I# 18#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
parts :: Table Part
[LclIdX]
parts = undefined @ 'GHC.Types.LiftedRep @ (Table Part) $dIP_a6Qx

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a6Qt :: GHC.Stack.Types.HasCallStack
[LclId]
$dIP_a6Qt
  = (GHC.Stack.Types.pushCallStack
       (GHC.CString.unpackCString# "undefined"#,
        GHC.Stack.Types.SrcLoc
          (GHC.CString.unpackCString# "main"#)
          (GHC.CString.unpackCString# "TPCH.Functional.Schema"#)
          (GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#)
          (GHC.Types.I# 34#)
          (GHC.Types.I# 13#)
          (GHC.Types.I# 34#)
          (GHC.Types.I# 22#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
suppliers :: Table Supplier
[LclIdX]
suppliers
  = undefined @ 'GHC.Types.LiftedRep @ (Table Supplier) $dIP_a6Qt

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a6Qp :: GHC.Stack.Types.HasCallStack
[LclId]
$dIP_a6Qp
  = (GHC.Stack.Types.pushCallStack
       (GHC.CString.unpackCString# "undefined"#,
        GHC.Stack.Types.SrcLoc
          (GHC.CString.unpackCString# "main"#)
          (GHC.CString.unpackCString# "TPCH.Functional.Schema"#)
          (GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#)
          (GHC.Types.I# 46#)
          (GHC.Types.I# 13#)
          (GHC.Types.I# 46#)
          (GHC.Types.I# 22#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
partsupps :: Table PartSupp
[LclIdX]
partsupps
  = undefined @ 'GHC.Types.LiftedRep @ (Table PartSupp) $dIP_a6Qp

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a6Ql :: GHC.Stack.Types.HasCallStack
[LclId]
$dIP_a6Ql
  = (GHC.Stack.Types.pushCallStack
       (GHC.CString.unpackCString# "undefined"#,
        GHC.Stack.Types.SrcLoc
          (GHC.CString.unpackCString# "main"#)
          (GHC.CString.unpackCString# "TPCH.Functional.Schema"#)
          (GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#)
          (GHC.Types.I# 60#)
          (GHC.Types.I# 13#)
          (GHC.Types.I# 60#)
          (GHC.Types.I# 22#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
customers :: Table Customer
[LclIdX]
customers
  = undefined @ 'GHC.Types.LiftedRep @ (Table Customer) $dIP_a6Ql

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a6Qh :: GHC.Stack.Types.HasCallStack
[LclId]
$dIP_a6Qh
  = (GHC.Stack.Types.pushCallStack
       (GHC.CString.unpackCString# "undefined"#,
        GHC.Stack.Types.SrcLoc
          (GHC.CString.unpackCString# "main"#)
          (GHC.CString.unpackCString# "TPCH.Functional.Schema"#)
          (GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#)
          (GHC.Types.I# 75#)
          (GHC.Types.I# 10#)
          (GHC.Types.I# 75#)
          (GHC.Types.I# 19#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
orders :: Table Order
[LclIdX]
orders = undefined @ 'GHC.Types.LiftedRep @ (Table Order) $dIP_a6Qh

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a6Qb :: GHC.Stack.Types.HasCallStack
[LclId]
$dIP_a6Qb
  = (GHC.Stack.Types.pushCallStack
       (GHC.CString.unpackCString# "undefined"#,
        GHC.Stack.Types.SrcLoc
          (GHC.CString.unpackCString# "main"#)
          (GHC.CString.unpackCString# "TPCH.Functional.Schema"#)
          (GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#)
          (GHC.Types.I# 106#)
          (GHC.Types.I# 10#)
          (GHC.Types.I# 106#)
          (GHC.Types.I# 19#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
n_name :: Nation -> String
[LclIdX]
n_name
  = undefined @ 'GHC.Types.LiftedRep @ (Nation -> String) $dIP_a6Qb

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a6Q7 :: GHC.Stack.Types.HasCallStack
[LclId]
$dIP_a6Q7
  = (GHC.Stack.Types.pushCallStack
       (GHC.CString.unpackCString# "undefined"#,
        GHC.Stack.Types.SrcLoc
          (GHC.CString.unpackCString# "main"#)
          (GHC.CString.unpackCString# "TPCH.Functional.Schema"#)
          (GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#)
          (GHC.Types.I# 109#)
          (GHC.Types.I# 12#)
          (GHC.Types.I# 109#)
          (GHC.Types.I# 21#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
n_region :: Nation -> Region
[LclIdX]
n_region
  = undefined @ 'GHC.Types.LiftedRep @ (Nation -> Region) $dIP_a6Q7

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a6Q3 :: GHC.Stack.Types.HasCallStack
[LclId]
$dIP_a6Q3
  = (GHC.Stack.Types.pushCallStack
       (GHC.CString.unpackCString# "undefined"#,
        GHC.Stack.Types.SrcLoc
          (GHC.CString.unpackCString# "main"#)
          (GHC.CString.unpackCString# "TPCH.Functional.Schema"#)
          (GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#)
          (GHC.Types.I# 112#)
          (GHC.Types.I# 13#)
          (GHC.Types.I# 112#)
          (GHC.Types.I# 22#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
n_comment :: Nation -> String
[LclIdX]
n_comment
  = undefined @ 'GHC.Types.LiftedRep @ (Nation -> String) $dIP_a6Q3

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a6PZ :: GHC.Stack.Types.HasCallStack
[LclId]
$dIP_a6PZ
  = (GHC.Stack.Types.pushCallStack
       (GHC.CString.unpackCString# "undefined"#,
        GHC.Stack.Types.SrcLoc
          (GHC.CString.unpackCString# "main"#)
          (GHC.CString.unpackCString# "TPCH.Functional.Schema"#)
          (GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#)
          (GHC.Types.I# 115#)
          (GHC.Types.I# 14#)
          (GHC.Types.I# 115#)
          (GHC.Types.I# 23#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
allNations :: [Nation]
[LclIdX]
allNations = undefined @ 'GHC.Types.LiftedRep @ [Nation] $dIP_a6PZ

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a6PV :: GHC.Stack.Types.HasCallStack
[LclId]
$dIP_a6PV
  = (GHC.Stack.Types.pushCallStack
       (GHC.CString.unpackCString# "undefined"#,
        GHC.Stack.Types.SrcLoc
          (GHC.CString.unpackCString# "main"#)
          (GHC.CString.unpackCString# "TPCH.Functional.Schema"#)
          (GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#)
          (GHC.Types.I# 123#)
          (GHC.Types.I# 10#)
          (GHC.Types.I# 123#)
          (GHC.Types.I# 19#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
r_name :: Region -> String
[LclIdX]
r_name
  = undefined @ 'GHC.Types.LiftedRep @ (Region -> String) $dIP_a6PV

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a6PR :: GHC.Stack.Types.HasCallStack
[LclId]
$dIP_a6PR
  = (GHC.Stack.Types.pushCallStack
       (GHC.CString.unpackCString# "undefined"#,
        GHC.Stack.Types.SrcLoc
          (GHC.CString.unpackCString# "main"#)
          (GHC.CString.unpackCString# "TPCH.Functional.Schema"#)
          (GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#)
          (GHC.Types.I# 126#)
          (GHC.Types.I# 13#)
          (GHC.Types.I# 126#)
          (GHC.Types.I# 22#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
r_comment :: Region -> String
[LclIdX]
r_comment
  = undefined @ 'GHC.Types.LiftedRep @ (Region -> String) $dIP_a6PR

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a6PN :: GHC.Stack.Types.HasCallStack
[LclId]
$dIP_a6PN
  = (GHC.Stack.Types.pushCallStack
       (GHC.CString.unpackCString# "undefined"#,
        GHC.Stack.Types.SrcLoc
          (GHC.CString.unpackCString# "main"#)
          (GHC.CString.unpackCString# "TPCH.Functional.Schema"#)
          (GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#)
          (GHC.Types.I# 129#)
          (GHC.Types.I# 14#)
          (GHC.Types.I# 129#)
          (GHC.Types.I# 23#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
allRegions :: [Region]
[LclIdX]
allRegions = undefined @ 'GHC.Types.LiftedRep @ [Region] $dIP_a6PN

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a6PJ :: GHC.Stack.Types.HasCallStack
[LclId]
$dIP_a6PJ
  = (GHC.Stack.Types.pushCallStack
       (GHC.CString.unpackCString# "undefined"#,
        GHC.Stack.Types.SrcLoc
          (GHC.CString.unpackCString# "main"#)
          (GHC.CString.unpackCString# "TPCH.Functional.Schema"#)
          (GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#)
          (GHC.Types.I# 132#)
          (GHC.Types.I# 14#)
          (GHC.Types.I# 132#)
          (GHC.Types.I# 23#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
findRegion :: String -> Region
[LclIdX]
findRegion
  = undefined @ 'GHC.Types.LiftedRep @ (String -> Region) $dIP_a6PJ

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a6PF :: GHC.Stack.Types.HasCallStack
[LclId]
$dIP_a6PF
  = (GHC.Stack.Types.pushCallStack
       (GHC.CString.unpackCString# "undefined"#,
        GHC.Stack.Types.SrcLoc
          (GHC.CString.unpackCString# "main"#)
          (GHC.CString.unpackCString# "TPCH.Functional.Schema"#)
          (GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#)
          (GHC.Types.I# 135#)
          (GHC.Types.I# 13#)
          (GHC.Types.I# 135#)
          (GHC.Types.I# 22#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 2, types: 4, coercions: 0, joins: 0/0}
nationsIn :: Region -> [Nation]
[LclIdX]
nationsIn
  = undefined @ 'GHC.Types.LiftedRep @ (Region -> [Nation]) $dIP_a6PF



[9 of 9] Compiling TPCH.Functional.Q1 ( ghc-dumps/../TPCH/Functional/Q1.hs, ghc-dumps/../TPCH/Functional/Q1.o )

==================== Desugar (after optimization) ====================
Result size of Desugar (after optimization)
  = {terms: 163, types: 400, coercions: 0, joins: 0/4}

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Q1.$trModule :: GHC.Types.Module
[LclIdX]
TPCH.Functional.Q1.$trModule
  = GHC.Types.Module
      (GHC.Types.TrNameS "main"#)
      (GHC.Types.TrNameS "TPCH.Functional.Q1"#)

-- RHS size: {terms: 10, types: 9, coercions: 0, joins: 0/0}
groupByItemState :: Q LineItem -> Q ((Char, Char), Q LineItem)
[LclIdX]
groupByItemState
  = groupByWithKey
      @ (Char, Char)
      @ LineItem
      (GHC.Classes.$fOrd(,)
         @ Char @ Char GHC.Classes.$fOrdChar GHC.Classes.$fOrdChar)
      (\ (li_a80P :: LineItem) ->
         (l_returnflag li_a80P, l_linestatus li_a80P))

-- RHS size: {terms: 10, types: 5, coercions: 0, joins: 0/0}
itemsShippedBefore :: Date -> Q LineItem
[LclIdX]
itemsShippedBefore
  = \ (maxDateAllowed_a80Q :: Date) ->
      filterQ
        @ LineItem
        (\ (li_a80R :: LineItem) ->
           <=
             @ Date
             GHC.Classes.$fOrd()
             (l_shipdate li_a80R)
             maxDateAllowed_a80Q)
        (readT @ LineItem lineitems)

-- RHS size: {terms: 125, types: 279, coercions: 0, joins: 0/4}
q1Unordered
  :: forall h.
     Integral h =>
     Int
     -> Q ((Char, Char),
           (Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, h))
[LclIdX]
q1Unordered
  = \ (@ h_a84z)
      ($dIntegral_a84O :: Integral h_a84z)
      (shipDaysBefore_a80t :: Int) ->
      subqMap
        @ ((Char, Char), Q LineItem)
        @ ((Char, Char),
           (Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal,
            h_a84z))
        (\ (ds_d85O :: ((Char, Char), Q LineItem)) ->
           case ds_d85O of { (ds_d87w, itemsSubset_a80y) ->
           case ds_d87w of { (returnflag_a80w, linestatus_a80x) ->
           let {
             disc_price_a80B :: LineItem -> Decimal
             [LclId]
             disc_price_a80B
               = \ (li_a80F :: LineItem) ->
                   * @ Decimal
                     GHC.Float.$fNumDouble
                     (l_extendedprice li_a80F)
                     (- @ Decimal
                        GHC.Float.$fNumDouble
                        (GHC.Types.D# 1.0##)
                        (l_discount li_a80F)) } in
           let {
             charge_price_a80C :: LineItem -> Decimal
             [LclId]
             charge_price_a80C
               = \ (li_a80G :: LineItem) ->
                   * @ Decimal
                     GHC.Float.$fNumDouble
                     (disc_price_a80B li_a80G)
                     (+ @ Decimal
                        GHC.Float.$fNumDouble
                        (GHC.Types.D# 1.0##)
                        (l_tax li_a80G)) } in
           let {
             avgOf_a80A :: forall c. Fractional c => (LineItem -> c) -> SQ c
             [LclId]
             avgOf_a80A
               = \ (@ c_a82b)
                   ($dFractional_a82n :: Fractional c_a82b)
                   (f_a80E :: LineItem -> c_a82b) ->
                   mapAgg
                     @ c_a82b
                     @ c_a82b
                     @ (c_a82b, c_a82b)
                     @ LineItem
                     (avgAgg @ c_a82b $dFractional_a82n)
                     f_a80E
                     itemsSubset_a80y } in
           let {
             sumOf_a80z :: forall s. Num s => (LineItem -> s) -> SQ s
             [LclId]
             sumOf_a80z
               = \ (@ s_a82E)
                   ($dNum_a82O :: Num s_a82E)
                   (f_a80D :: LineItem -> s_a82E) ->
                   mapAgg
                     @ s_a82E
                     @ s_a82E
                     @ s_a82E
                     @ LineItem
                     (sumAgg @ s_a82E $dNum_a82O)
                     f_a80D
                     itemsSubset_a80y } in
           >>=
             @ SQ
             FDB.GADTForall.$fMonadSQ
             @ Decimal
             @ ((Char, Char),
                (Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal,
                 h_a84z))
             (sumOf_a80z @ Decimal GHC.Float.$fNumDouble l_quantity)
             (\ (sum_qty_a80H :: Decimal) ->
                >>=
                  @ SQ
                  FDB.GADTForall.$fMonadSQ
                  @ Decimal
                  @ ((Char, Char),
                     (Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal,
                      h_a84z))
                  (sumOf_a80z @ Decimal GHC.Float.$fNumDouble l_extendedprice)
                  (\ (sum_base_price_a80I :: Decimal) ->
                     >>=
                       @ SQ
                       FDB.GADTForall.$fMonadSQ
                       @ Decimal
                       @ ((Char, Char),
                          (Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal,
                           h_a84z))
                       (sumOf_a80z @ Decimal GHC.Float.$fNumDouble disc_price_a80B)
                       (\ (sum_disc_price_a80J :: Decimal) ->
                          >>=
                            @ SQ
                            FDB.GADTForall.$fMonadSQ
                            @ Decimal
                            @ ((Char, Char),
                               (Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal,
                                h_a84z))
                            (sumOf_a80z @ Decimal GHC.Float.$fNumDouble charge_price_a80C)
                            (\ (sum_charge_a80K :: Decimal) ->
                               >>=
                                 @ SQ
                                 FDB.GADTForall.$fMonadSQ
                                 @ Decimal
                                 @ ((Char, Char),
                                    (Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal,
                                     h_a84z))
                                 (avgOf_a80A @ Decimal GHC.Float.$fFractionalDouble l_quantity)
                                 (\ (avg_qty_a80L :: Decimal) ->
                                    >>=
                                      @ SQ
                                      FDB.GADTForall.$fMonadSQ
                                      @ Decimal
                                      @ ((Char, Char),
                                         (Decimal, Decimal, Decimal, Decimal, Decimal, Decimal,
                                          Decimal, h_a84z))
                                      (avgOf_a80A
                                         @ Decimal GHC.Float.$fFractionalDouble l_extendedprice)
                                      (\ (avg_price_a80M :: Decimal) ->
                                         >>=
                                           @ SQ
                                           FDB.GADTForall.$fMonadSQ
                                           @ Decimal
                                           @ ((Char, Char),
                                              (Decimal, Decimal, Decimal, Decimal, Decimal, Decimal,
                                               Decimal, h_a84z))
                                           (avgOf_a80A
                                              @ Decimal GHC.Float.$fFractionalDouble l_discount)
                                           (\ (avg_disc_a80N :: Decimal) ->
                                              >>=
                                                @ SQ
                                                FDB.GADTForall.$fMonadSQ
                                                @ h_a84z
                                                @ ((Char, Char),
                                                   (Decimal, Decimal, Decimal, Decimal, Decimal,
                                                    Decimal, Decimal, h_a84z))
                                                (count
                                                   @ h_a84z
                                                   @ LineItem
                                                   $dIntegral_a84O
                                                   itemsSubset_a80y)
                                                (\ (count_order_a80O :: h_a84z) ->
                                                   return
                                                     @ SQ
                                                     FDB.GADTForall.$fMonadSQ
                                                     @ ((Char, Char),
                                                        (Decimal, Decimal, Decimal, Decimal,
                                                         Decimal, Decimal, Decimal, h_a84z))
                                                     ((returnflag_a80w, linestatus_a80x),
                                                      (sum_qty_a80H, sum_base_price_a80I,
                                                       sum_disc_price_a80J, sum_charge_a80K,
                                                       avg_qty_a80L, avg_price_a80M, avg_disc_a80N,
                                                       count_order_a80O))))))))))
           }
           })
        ($ @ 'GHC.Types.LiftedRep
           @ (Q LineItem)
           @ (Q ((Char, Char), Q LineItem))
           groupByItemState
           (itemsShippedBefore
              (minusInterval
                 (dateFromString (GHC.CString.unpackCString# "1998-12-01"#))
                 (FDB.MoreTypes.Day shipDaysBefore_a80t))))

-- RHS size: {terms: 8, types: 60, coercions: 0, joins: 0/0}
q1
  :: Int
     -> Q ((Char, Char),
           (Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal,
            Integer))
[LclIdX]
q1
  = . @ (Q ((Char, Char),
            (Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal,
             Integer)))
      @ (Q ((Char, Char),
            (Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal,
             Integer)))
      @ Int
      (orderBy
         @ (Char, Char)
         @ ((Char, Char),
            (Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal,
             Integer))
         (GHC.Classes.$fOrd(,)
            @ Char @ Char GHC.Classes.$fOrdChar GHC.Classes.$fOrdChar)
         (fst
            @ (Char, Char)
            @ (Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal,
               Integer)))
      (q1Unordered @ Integer GHC.Real.$fIntegralInteger)



