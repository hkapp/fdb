[1 of 8] Compiling FDB.MoreTypes    ( FDB/MoreTypes.hs, FDB/MoreTypes.o )

==================== Parser ====================
module FDB.MoreTypes where
type Date = ()
dateFromString :: String -> Date
dateFromString = undefined
tryDateFromString :: String -> Maybe Date
tryDateFromString = undefined
data DateInterval = Day Int
minusInterval :: Date -> DateInterval -> Date
minusInterval = undefined
type Decimal = Double
type PhoneNumber = ()


[2 of 8] Compiling FDB.Utils        ( FDB/Utils.hs, FDB/Utils.o )

==================== Parser ====================
module FDB.Utils where
compose2 f g x y = f (g x y)
f .: g = f `compose2` g
(<&>) :: Functor f => f a -> (a -> b) -> f b
as <&> f = f <$> as
infixl 1 <&>


[3 of 8] Compiling Utils.List       ( Utils/List.hs, Utils/List.o )

==================== Parser ====================
module Utils.List where
import qualified Data.List as List
import qualified Data.Set as Set
import Data.Tuple ( swap )
noDuplicates :: (Ord a) => [a] -> [a]
noDuplicates = Set.toList . Set.fromList
zipWithIndex :: [a] -> [(Int, a)]
zipWithIndex = zip [0 .. ]
zipWithIndexRight :: [a] -> [(a, Int)]
zipWithIndexRight = map swap . zipWithIndex
groupByKeyVal ::
  (Eq k) => (a -> k) -> (a -> v) -> [a] -> [(k, [v])]
groupByKeyVal key val xs
  = map transformGroup naiveGroups
  where
      naiveGroups = List.groupBy (\ x1 x2 -> (key x1) == (key x2)) xs
      transformGroup thisGroup
        = (thisGroupKey, thisGroupVals)
        where
            thisGroupKey = key (head thisGroup)
            thisGroupVals = val <$> thisGroup


[4 of 8] Compiling Utils.Prelude    ( Utils/Prelude.hs, Utils/Prelude.o )

==================== Parser ====================
module Utils.Prelude where
compose2 = (.) . (.)
(.:) = compose2
(<&>) :: Functor f => f a -> (a -> b) -> f b
as <&> f = f <$> as
infixl 1 <&>
doNothing :: IO ()
doNothing = return ()
ignore :: a -> ()
ignore = const ()


[5 of 8] Compiling Utils.AbstractGraph ( Utils/AbstractGraph.hs, Utils/AbstractGraph.o )

==================== Parser ====================
module Utils.AbstractGraph where
import Utils.List ( zipWithIndexRight )
import qualified Utils.List as ListUtils
import Utils.Prelude ( (<&>) )
import qualified Utils.Prelude as Utils
import Data.Bifunctor ( Bifunctor(..) )
import Data.Map ( Map, (!) )
import qualified Data.Map as Map
import Data.Semigroup ( Semigroup(..) )
import qualified Data.Set as Set
data Graph v e = Graph [v] [(v, e, v)]
instance Bifunctor Graph where
  bimap fv fe = mapGraphTriplets fv (mapEdgeFromTriplet fe)
  second fe = mapEdgeTriplets (mapEdgeFromTriplet fe)
instance Semigroup (Graph v e) where
  (Graph lv le) <> (Graph rv re) = Graph (lv <> rv) (le <> re)
instance Monoid (Graph v e) where
  mempty = Graph [] []
  mappend = (<>)
graphFromTree :: Tree v e -> Graph v e
graphFromTree (Tree node children)
  = let
      edgeTriplets
        = [(node, edge, getNode child) | (edge, child) <- children]
      subGraphs = [graphFromTree child | (_, child) <- children]
      localGraph = Graph [node] edgeTriplets
    in localGraph <> (mconcat subGraphs)
getNode :: Tree v e -> v
getNode (Tree node _) = node
singleton :: v -> Graph v e
singleton v = Graph [v] []
vertices :: Graph v e -> [v]
vertices (Graph vs _) = vs
edgeTriplets :: Graph v e -> [(v, e, v)]
edgeTriplets (Graph _ es) = es
mapVertices :: (v -> w) -> Graph v e -> Graph w e
mapVertices = first
mapEdges :: (e -> f) -> Graph v e -> Graph v f
mapEdges = second
mapEdgeTriplets :: ((v, e, v) -> f) -> Graph v e -> Graph v f
mapEdgeTriplets f (Graph vs es)
  = Graph vs (es <&> (\ (s, e, d) -> (s, f (s, e, d), d)))
mapGraphTriplets ::
  (v1 -> v2) -> ((v1, e1, v1) -> e2) -> Graph v1 e1 -> Graph v2 e2
mapGraphTriplets fv fe (Graph vs es)
  = Graph (map fv vs) (map fvev es)
  where
      fvev (s, e, d) = (fv s, fe (s, e, d), fv d)
mapEdgeInTriplet :: (e -> f) -> (v, e, v) -> (v, f, v)
mapEdgeInTriplet f (s, e, d) = (s, f e, d)
mapEdgeFromTriplet :: (e -> f) -> (v, e, v) -> f
mapEdgeFromTriplet f (_, e, _) = f e
assignUniqueIds ::
  (Ord v) => Graph v e -> (Graph (v, Int) e, Map v Int)
assignUniqueIds g
  = let
      idMap = Map.fromList (zipWithIndexRight (vertices g))
      gWithIds = mapVertices (\ v -> (v, idMap ! v)) g
    in (gWithIds, idMap)
eliminateDuplicateVertices :: (Ord v) => Graph v e -> Graph v e
eliminateDuplicateVertices (Graph vs es)
  = Graph (ListUtils.noDuplicates vs) es
data Tree v e = Tree v [(e, Tree v e)]
buildTree :: (t -> v) -> (t -> [(e, t)]) -> t -> Tree v e
buildTree toNode children root
  = let
      rootNode = toNode root
      rootChildren = children root
      subtrees
        = [(edge, recBuildTree child) | (edge, child) <- rootChildren]
      recBuildTree = buildTree toNode children
    in Tree rootNode subtrees
assignTreeIds :: Tree v e -> Tree (v, Int) e
assignTreeIds root
  = fst (recAssignIds 0 root)
  where
      recAssignIds :: Int -> Tree v e -> (Tree (v, Int) e, Int)
      recAssignIds id (Tree node children)
        = (Tree (node, id) childrenWithId, nextId)
        where
            (childrenWithId, nextId) = assignInSequence (id + 1) children
            assignInSequence ::
              Int -> [(e, Tree v e)] -> ([(e, Tree (v, Int) e)], Int)
            assignInSequence freeId ((edge, thisSubtree) : remEdges)
              = let
                  (thisSubtreeWithId, idAfterThisSubtree)
                    = recAssignIds freeId thisSubtree
                  (remEdgesWithId, nextFreeId)
                    = assignInSequence idAfterThisSubtree remEdges
                in ((edge, thisSubtreeWithId) : remEdgesWithId, nextFreeId)
            assignInSequence freeId [] = ([], freeId)
allTreeEdges :: Tree v e -> [(v, e, v)]
allTreeEdges (Tree root children)
  = rootEdges ++ subtreeEdges
  where
      rootEdges
        = [(root, edge, (rootNode subtree)) | (edge, subtree) <- children]
      subtreeEdges
        = do (_, subtree) <- children
             allTreeEdges subtree
allTreeNodes :: Tree v e -> [v]
allTreeNodes t = (rootNode t) : (subtrees t >>= allTreeNodes)
rootNode :: Tree v e -> v
rootNode (Tree root _) = root
subtrees :: Tree v e -> [Tree v e]
subtrees (Tree _ edges) = map snd edges
subtreeNodes :: Tree v e -> [v]
subtreeNodes = map rootNode . subtrees
mapTreeNodes :: (v -> w) -> Tree v e -> Tree w e
mapTreeNodes f (Tree root edges)
  = Tree
      (f root)
      [(edge, mapTreeNodes f subtree) | (edge, subtree) <- edges]


[6 of 8] Compiling FDB.GADTForall   ( FDB/GADTForall.hs, FDB/GADTForall.o )

==================== Parser ====================
module FDB.GADTForall where
import FDB.Utils ( (.:), (<&>) )
import Data.Word ( Word64, Word16 )
import Utils.AbstractGraph as Abstract
newtype Table a = Table String
findTable :: String -> Table a
findTable = Table
data Q a
  where
    Filter :: (a -> Bool) -> Q a -> Q a
    Map :: (b -> a) -> Q b -> Q a
    Read :: Table a -> Q a
    GroupBy :: (v -> k) -> Q v -> Q (k, Q v)
    MapSQ :: (v -> SQ b) -> Q v -> Q b
    FilterSQ :: (a -> SQ Bool) -> Q a -> Q a
    OrderBy :: (Ord b) => (a -> b) -> Q a -> Q a
    Take :: (Integral n) => n -> Q a -> Q a
pull :: Q a -> a
pull rec@(Filter p q)
  = let x = pull q in if p x then x else pull rec
pull (Map f q) = f (pull q)
readT :: Table a -> Q a
readT = Read
mapQ :: (a -> b) -> Q a -> Q b
mapQ = Map
filterQ :: (a -> Bool) -> Q a -> Q a
filterQ = Filter
groupByWithKey :: (Ord k) => (a -> k) -> Q a -> Q (k, Q a)
groupByWithKey = GroupBy
groupByQ :: (Ord k) => (a -> k) -> Q a -> Q (Q a)
groupByQ = mapQ snd .: groupByWithKey
orderBy :: (Ord b) => (a -> b) -> Q a -> Q a
orderBy = OrderBy
takeQ :: (Integral n) => n -> Q a -> Q a
takeQ = Take
emptyQ :: Q a
emptyQ = undefined
eqFilter :: (Eq b) => (a -> b) -> b -> Q a -> Q a
eqFilter = undefined
equiJoin ::
  (Eq c) => (a -> c) -> (b -> c) -> Q a -> Q b -> Q (a, b)
equiJoin = undefined
instance Functor Q where
  fmap = Map
instance Applicative Q where
  pure = undefined
  (<*>) = undefined
instance Monad Q where
  (>>=) = undefined
data SQ a
  where
    FetchRow :: RowRef a -> SQ (Row a)
    StateFold :: Agg a b s -> Q a -> SQ b
fetchRow :: RowRef a -> SQ (Row a)
fetchRow = FetchRow
fetchForeign :: RowRef a -> SQ a
fetchForeign ref = fetchRow ref <&> rowVal
instance Functor SQ where
  fmap = undefined
instance Applicative SQ where
  pure = undefined
  (<*>) = undefined
instance Monad SQ where
  (>>=) = undefined
subqMap :: (a -> SQ b) -> Q a -> Q b
subqMap = MapSQ
subqFilter :: (a -> SQ Bool) -> Q a -> Q a
subqFilter = FilterSQ
exists :: Q a -> SQ Bool
exists q
  = do c <- count $ takeQ 1 q
       return (c > 0)
mapToQ :: (a -> Q b) -> SQ a -> Q b
mapToQ = undefined
toQ :: SQ a -> Q a
toQ = undefined
data Agg a b s = Agg (s -> a -> s) s (s -> b)
type Fold a b = Agg a b b
type Fold1 a = Agg a a a
agg :: Agg a b s -> Q a -> SQ b
agg = StateFold
mapAgg :: Agg b c s -> (a -> b) -> Q a -> SQ c
mapAgg g f q = agg g (mapQ f q)
sumAgg :: (Num a) => Fold1 a
sumAgg = undefined
avgAgg :: (Fractional a) => Agg a a (a, a)
avgAgg = undefined
count :: (Integral n) => Q a -> SQ n
count = undefined
minAgg :: (Ord a) => Fold1 a
minAgg = undefined
class NatJoin a b where
  (|><|) :: Q a -> Q b -> Q (a, b)
(-|><|->) :: (NatJoin a b) => Q a -> Q b -> Q b
x -|><|-> y = mapQ snd (x |><| y)
(<-|><|-) :: (NatJoin a b) => Q a -> Q b -> Q a
a <-|><|- b = mapQ fst (a |><| b)
type TableRef a = RowRef a
data Row a = Row (RowRef a) a
data RowRef a
  = RowRef TableId RowId
  deriving Eq
newtype RowId
  = RowId Word64
  deriving Eq
newtype TableId
  = TableId Word16
  deriving Eq
rowVal :: Row a -> a
rowVal (Row _ val) = val
rowRef :: Row a -> RowRef a
rowRef (Row ref _) = ref


[7 of 8] Compiling FDB.FDB          ( FDB/FDB.hs, FDB/FDB.o )

==================== Parser ====================
module FDB.FDB (
        Table, Q, SQ, findTable, readT, filterQ, groupByQ, subqMap, Agg,
        Fold, Fold1, mapQ, fetchRow, fetchForeign, mapAgg, sumAgg, avgAgg,
        count, groupByWithKey, orderBy, eqFilter, (-|><|->), exists,
        subqFilter, minAgg, NatJoin(..), equiJoin, (<-|><|-), mapToQ,
        TableRef, rowRef, Row, RowRef, RowId, toQ, emptyQ
    ) where
import FDB.GADTForall as FDBImpl


[8 of 8] Compiling TPCH.Functional.Schema ( ghc-dumps/../TPCH/Functional/Schema.hs, ghc-dumps/../TPCH/Functional/Schema.o )

==================== Parser ====================
module TPCH.Functional.Schema where
import FDB.MoreTypes
import FDB.FDB
data Part
  = Part {p_name :: String,
          p_mfgr :: String,
          p_brand :: String,
          p_type :: String,
          p_size :: Int,
          p_container :: String,
          p_retailprice :: Decimal,
          p_comment :: String}
parts :: Table Part
parts = undefined
data Supplier
  = Supplier {s_name :: String,
              s_address :: String,
              s_nation :: Nation,
              s_phone :: PhoneNumber,
              s_acctbal :: Decimal,
              s_comment :: String}
suppliers :: Table Supplier
suppliers = undefined
data PartSupp
  = PartSupp {ps_partref :: TableRef Part,
              ps_suppref :: TableRef Supplier,
              ps_availqty :: Int,
              ps_supplycost :: Decimal,
              ps_comment :: String}
partsupps :: Table PartSupp
partsupps = undefined
data Customer
  = Customer {c_name :: String,
              c_address :: String,
              c_nation :: Nation,
              c_phone :: PhoneNumber,
              c_acctbal :: Decimal,
              c_mktsegment :: String,
              c_comment :: String}
customers :: Table Customer
customers = undefined
data Order
  = Order {o_custref :: TableRef Customer,
           o_orderstatus :: Char,
           o_totalprice :: Decimal,
           o_orderdate :: Date,
           o_orderpriority :: String,
           o_clerk :: String,
           o_shippriority :: Int,
           o_comment :: String}
orders :: Table Order
orders = undefined
data LineItem
  = LineItem {l_orderref :: TableRef Order,
              l_partref :: TableRef Part,
              l_suppref :: TableRef Supplier,
              l_linenumber :: Int,
              l_quantity :: Decimal,
              l_extendedprice :: Decimal,
              l_discount :: Decimal,
              l_tax :: Decimal,
              l_returnflag :: Char,
              l_linestatus :: Char,
              l_shipdate :: Date,
              l_commitdate :: Date,
              l_receiptdate :: Date,
              l_shipinstruct :: String,
              l_shipmode :: String,
              l_comment :: String}
lineitems :: Table LineItem
lineitems = findTable "LineItems"
data Nation
  = France | Germany
  deriving Eq
n_name :: Nation -> String
n_name = undefined
n_region :: Nation -> Region
n_region = undefined
n_comment :: Nation -> String
n_comment = undefined
allNations :: [Nation]
allNations = undefined
data Region
  = EMEA
  deriving Eq
r_name :: Region -> String
r_name = undefined
r_comment :: Region -> String
r_comment = undefined
allRegions :: [Region]
allRegions = undefined
findRegion :: String -> Region
findRegion = undefined
nationsIn :: Region -> [Nation]
nationsIn = undefined


