[1 of 9] Compiling FDB.MoreTypes    ( FDB/MoreTypes.hs, FDB/MoreTypes.o )

==================== CorePrep ====================
Result size of CorePrep
  = {terms: 188, types: 101, coercions: 12, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule1_r2qx :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule1_r2qx = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule2_r2qQ :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule2_r2qQ = GHC.Types.TrNameS $trModule1_r2qx

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule3_r2qR :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule3_r2qR = "FDB.MoreTypes"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule4_r2qS :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule4_r2qS = GHC.Types.TrNameS $trModule3_r2qR

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
FDB.MoreTypes.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
FDB.MoreTypes.$trModule
  = GHC.Types.Module $trModule2_r2qQ $trModule4_r2qS

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r2qT :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep_r2qT
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcInt (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcDateInterval1_r2qU :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcDateInterval1_r2qU = "DateInterval"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcDateInterval2_r2qV :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcDateInterval2_r2qV = GHC.Types.TrNameS $tcDateInterval1_r2qU

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.MoreTypes.$tcDateInterval :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.MoreTypes.$tcDateInterval
  = GHC.Types.TyCon
      18376018677496580262##
      7294864336028437579##
      FDB.MoreTypes.$trModule
      $tcDateInterval2_r2qV
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r2qW :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep1_r2qW
  = GHC.Types.KindRepTyConApp
      FDB.MoreTypes.$tcDateInterval (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2_r2qX :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep2_r2qX = GHC.Types.KindRepFun $krep_r2qT $krep1_r2qW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Day1_r2qY :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Day1_r2qY = "'Day"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Day2_r2qZ :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Day2_r2qZ = GHC.Types.TrNameS $tc'Day1_r2qY

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.MoreTypes.$tc'Day :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.MoreTypes.$tc'Day
  = GHC.Types.TyCon
      2870245755353241826##
      3795114783946290854##
      FDB.MoreTypes.$trModule
      $tc'Day2_r2qZ
      0#
      $krep2_r2qX

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2tl :: GHC.Types.Int
[LclId]
sat_s2tl = GHC.Types.I# 27#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2tk :: GHC.Types.Int
[LclId]
sat_s2tk = GHC.Types.I# 6#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2tj :: GHC.Types.Int
[LclId]
sat_s2tj = GHC.Types.I# 18#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2ti :: GHC.Types.Int
[LclId]
sat_s2ti = GHC.Types.I# 6#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2th :: [GHC.Types.Char]
[LclId]
sat_s2th = GHC.CString.unpackCString# "./FDB/MoreTypes.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2tg :: [GHC.Types.Char]
[LclId]
sat_s2tg = GHC.CString.unpackCString# "FDB.MoreTypes"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2tf :: [GHC.Types.Char]
[LclId]
sat_s2tf = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s2tm :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s2tm
  = GHC.Stack.Types.SrcLoc
      sat_s2tf sat_s2tg sat_s2th sat_s2ti sat_s2tj sat_s2tk sat_s2tl

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2te :: [GHC.Types.Char]
[LclId]
sat_s2te = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s2tn :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s2tn = (sat_s2te, sat_s2tm)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP_r2r0 :: GHC.Stack.Types.CallStack
[GblId]
$dIP_r2r0
  = GHC.Stack.Types.pushCallStack
      sat_s2tn GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
FDB.MoreTypes.dateFromString
  :: GHC.Base.String -> FDB.MoreTypes.Date
[GblId]
FDB.MoreTypes.dateFromString
  = GHC.Err.undefined
      @ 'GHC.Types.LiftedRep
      @ (GHC.Base.String -> FDB.MoreTypes.Date)
      ($dIP_r2r0
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2tv :: GHC.Types.Int
[LclId]
sat_s2tv = GHC.Types.I# 30#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2tu :: GHC.Types.Int
[LclId]
sat_s2tu = GHC.Types.I# 9#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2tt :: GHC.Types.Int
[LclId]
sat_s2tt = GHC.Types.I# 21#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2ts :: GHC.Types.Int
[LclId]
sat_s2ts = GHC.Types.I# 9#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2tr :: [GHC.Types.Char]
[LclId]
sat_s2tr = GHC.CString.unpackCString# "./FDB/MoreTypes.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2tq :: [GHC.Types.Char]
[LclId]
sat_s2tq = GHC.CString.unpackCString# "FDB.MoreTypes"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2tp :: [GHC.Types.Char]
[LclId]
sat_s2tp = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s2tw :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s2tw
  = GHC.Stack.Types.SrcLoc
      sat_s2tp sat_s2tq sat_s2tr sat_s2ts sat_s2tt sat_s2tu sat_s2tv

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2to :: [GHC.Types.Char]
[LclId]
sat_s2to = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s2tx :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s2tx = (sat_s2to, sat_s2tw)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP1_r2r1 :: GHC.Stack.Types.CallStack
[GblId]
$dIP1_r2r1
  = GHC.Stack.Types.pushCallStack
      sat_s2tx GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 4, coercions: 4, joins: 0/0}
FDB.MoreTypes.tryDateFromString
  :: GHC.Base.String -> GHC.Maybe.Maybe FDB.MoreTypes.Date
[GblId]
FDB.MoreTypes.tryDateFromString
  = GHC.Err.undefined
      @ 'GHC.Types.LiftedRep
      @ (GHC.Base.String -> GHC.Maybe.Maybe FDB.MoreTypes.Date)
      ($dIP1_r2r1
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2tF :: GHC.Types.Int
[LclId]
sat_s2tF = GHC.Types.I# 26#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2tE :: GHC.Types.Int
[LclId]
sat_s2tE = GHC.Types.I# 14#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2tD :: GHC.Types.Int
[LclId]
sat_s2tD = GHC.Types.I# 17#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2tC :: GHC.Types.Int
[LclId]
sat_s2tC = GHC.Types.I# 14#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2tB :: [GHC.Types.Char]
[LclId]
sat_s2tB = GHC.CString.unpackCString# "./FDB/MoreTypes.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2tA :: [GHC.Types.Char]
[LclId]
sat_s2tA = GHC.CString.unpackCString# "FDB.MoreTypes"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2tz :: [GHC.Types.Char]
[LclId]
sat_s2tz = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s2tG :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s2tG
  = GHC.Stack.Types.SrcLoc
      sat_s2tz sat_s2tA sat_s2tB sat_s2tC sat_s2tD sat_s2tE sat_s2tF

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s2ty :: [GHC.Types.Char]
[LclId]
sat_s2ty = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s2tH :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s2tH = (sat_s2ty, sat_s2tG)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP2_r2r2 :: GHC.Stack.Types.CallStack
[GblId]
$dIP2_r2r2
  = GHC.Stack.Types.pushCallStack
      sat_s2tH GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 4, coercions: 4, joins: 0/0}
FDB.MoreTypes.minusInterval
  :: FDB.MoreTypes.Date
     -> FDB.MoreTypes.DateInterval -> FDB.MoreTypes.Date
[GblId]
FDB.MoreTypes.minusInterval
  = GHC.Err.undefined
      @ 'GHC.Types.LiftedRep
      @ (FDB.MoreTypes.Date
         -> FDB.MoreTypes.DateInterval -> FDB.MoreTypes.Date)
      ($dIP2_r2r2
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
FDB.MoreTypes.Day :: GHC.Types.Int -> FDB.MoreTypes.DateInterval
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []]
FDB.MoreTypes.Day
  = \ (eta_B1 [Occ=Once] :: GHC.Types.Int) ->
      FDB.MoreTypes.Day eta_B1



[2 of 9] Compiling FDB.Utils        ( FDB/Utils.hs, FDB/Utils.o )

==================== CorePrep ====================
Result size of CorePrep
  = {terms: 55, types: 102, coercions: 0, joins: 0/2}

-- RHS size: {terms: 14, types: 16, coercions: 0, joins: 0/1}
FDB.Utils.compose2
  :: forall t1 t2 t3 t4.
     (t1 -> t2) -> (t3 -> t4 -> t1) -> t3 -> t4 -> t2
[GblId, Arity=4, Caf=NoCafRefs, Unf=OtherCon []]
FDB.Utils.compose2
  = \ (@ t_a2AR)
      (@ t1_a2AT)
      (@ t2_a2AV)
      (@ t3_a2AZ)
      (f_s2BV [Occ=Once!] :: t_a2AR -> t1_a2AT)
      (g_s2BW [Occ=Once!] :: t2_a2AV -> t3_a2AZ -> t_a2AR)
      (x_s2BX [Occ=Once] :: t2_a2AV)
      (y_s2BY [Occ=Once] :: t3_a2AZ) ->
      let {
        sat_s2BZ [Occ=Once] :: t_a2AR
        [LclId]
        sat_s2BZ = g_s2BW x_s2BX y_s2BY } in
      f_s2BV sat_s2BZ

-- RHS size: {terms: 14, types: 16, coercions: 0, joins: 0/1}
FDB.Utils..:
  :: forall t1 t2 t3 t4.
     (t1 -> t2) -> (t3 -> t4 -> t1) -> t3 -> t4 -> t2
[GblId, Arity=4, Caf=NoCafRefs, Unf=OtherCon []]
FDB.Utils..:
  = \ (@ t_a2Bo)
      (@ t1_a2Bp)
      (@ t2_a2Bq)
      (@ t3_a2Br)
      (f_s2C0 [Occ=Once!] :: t_a2Bo -> t1_a2Bp)
      (g_s2C1 [Occ=Once!] :: t2_a2Bq -> t3_a2Br -> t_a2Bo)
      (x_s2C2 [Occ=Once] :: t2_a2Bq)
      (y_s2C3 [Occ=Once] :: t3_a2Br) ->
      let {
        sat_s2C4 [Occ=Once] :: t_a2Bo
        [LclId]
        sat_s2C4 = g_s2C1 x_s2C2 y_s2C3 } in
      f_s2C0 sat_s2C4

-- RHS size: {terms: 10, types: 17, coercions: 0, joins: 0/0}
FDB.Utils.<&>
  :: forall (f :: * -> *) a b.
     GHC.Base.Functor f =>
     f a -> (a -> b) -> f b
[GblId, Arity=3, Unf=OtherCon []]
FDB.Utils.<&>
  = \ (@ (f_a2Ap :: * -> *))
      (@ a_a2Aq)
      (@ b_a2Ar)
      ($dFunctor_s2C5 [Occ=Once] :: GHC.Base.Functor f_a2Ap)
      (as_s2C6 [Occ=Once] :: f_a2Ap a_a2Aq)
      (f1_s2C7 [Occ=Once] :: a_a2Aq -> b_a2Ar) ->
      Data.Functor.<$>
        @ f_a2Ap @ a_a2Aq @ b_a2Ar $dFunctor_s2C5 f1_s2C7 as_s2C6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule1_r2A9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule1_r2A9 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule2_r2BR :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule2_r2BR = GHC.Types.TrNameS $trModule1_r2A9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule3_r2BS :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule3_r2BS = "FDB.Utils"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule4_r2BT :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule4_r2BT = GHC.Types.TrNameS $trModule3_r2BS

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
FDB.Utils.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
FDB.Utils.$trModule
  = GHC.Types.Module $trModule2_r2BR $trModule4_r2BT



[3 of 9] Compiling Utils.List       ( Utils/List.hs, Utils/List.o )

==================== CorePrep ====================
Result size of CorePrep
  = {terms: 86, types: 152, coercions: 0, joins: 0/12}

-- RHS size: {terms: 8, types: 16, coercions: 0, joins: 0/1}
Utils.List.noDuplicates
  :: forall a. GHC.Classes.Ord a => [a] -> [a]
[GblId, Arity=1, Unf=OtherCon []]
Utils.List.noDuplicates
  = \ (@ a_a3cK) ($dOrd_s3dj [Occ=Once] :: GHC.Classes.Ord a_a3cK) ->
      let {
        sat_s3dk [Occ=Once] :: [a_a3cK] -> Data.Set.Internal.Set a_a3cK
        [LclId]
        sat_s3dk = Data.Set.Internal.fromList @ a_a3cK $dOrd_s3dj } in
      GHC.Base..
        @ (Data.Set.Internal.Set a_a3cK)
        @ [a_a3cK]
        @ [a_a3cK]
        (Data.Set.Internal.toList @ a_a3cK)
        sat_s3dk

-- RHS size: {terms: 10, types: 8, coercions: 0, joins: 0/2}
Utils.List.zipWithIndex :: forall a. [a] -> [(GHC.Types.Int, a)]
[GblId]
Utils.List.zipWithIndex
  = \ (@ a_a30Z) ->
      let {
        sat_s3dm [Occ=Once] :: [GHC.Types.Int]
        [LclId]
        sat_s3dm
          = let {
              sat_s3dl [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s3dl = GHC.Types.I# 0# } in
            GHC.Enum.enumFrom @ GHC.Types.Int GHC.Enum.$fEnumInt sat_s3dl } in
      GHC.List.zip @ GHC.Types.Int @ a_a30Z sat_s3dm

-- RHS size: {terms: 7, types: 29, coercions: 0, joins: 0/1}
Utils.List.zipWithIndexRight
  :: forall a. [a] -> [(a, GHC.Types.Int)]
[GblId]
Utils.List.zipWithIndexRight
  = \ (@ a_a3cv) ->
      let {
        sat_s3dn [Occ=Once]
          :: [(GHC.Types.Int, a_a3cv)] -> [(a_a3cv, GHC.Types.Int)]
        [LclId]
        sat_s3dn
          = GHC.Base.map
              @ (GHC.Types.Int, a_a3cv)
              @ (a_a3cv, GHC.Types.Int)
              (Data.Tuple.swap @ GHC.Types.Int @ a_a3cv) } in
      GHC.Base..
        @ [(GHC.Types.Int, a_a3cv)]
        @ [(a_a3cv, GHC.Types.Int)]
        @ [a_a3cv]
        sat_s3dn
        (Utils.List.zipWithIndex @ a_a3cv)

-- RHS size: {terms: 43, types: 51, coercions: 0, joins: 0/8}
Utils.List.groupByKeyVal
  :: forall k a v.
     GHC.Classes.Eq k =>
     (a -> k) -> (a -> v) -> [a] -> [(k, [v])]
[GblId, Arity=4, Unf=OtherCon []]
Utils.List.groupByKeyVal
  = \ (@ k_a2ZZ)
      (@ a_a300)
      (@ v_a301)
      ($dEq_s3do [Occ=OnceL] :: GHC.Classes.Eq k_a2ZZ)
      (key_s3dp :: a_a300 -> k_a2ZZ)
      (val_s3dq [Occ=OnceL] :: a_a300 -> v_a301)
      (xs_s3dr [Occ=Once] :: [a_a300]) ->
      let {
        sat_s3dC [Occ=Once] :: [[a_a300]]
        [LclId]
        sat_s3dC
          = let {
              sat_s3dB [Occ=Once] :: a_a300 -> a_a300 -> GHC.Types.Bool
              [LclId]
              sat_s3dB
                = \ (x1_s3dx [Occ=Once] :: a_a300)
                    (x2_s3dy [Occ=Once] :: a_a300) ->
                    let {
                      sat_s3dA [Occ=Once] :: k_a2ZZ
                      [LclId]
                      sat_s3dA = key_s3dp x2_s3dy } in
                    let {
                      sat_s3dz [Occ=Once] :: k_a2ZZ
                      [LclId]
                      sat_s3dz = key_s3dp x1_s3dx } in
                    GHC.Classes.== @ k_a2ZZ $dEq_s3do sat_s3dz sat_s3dA } in
            Data.OldList.groupBy @ a_a300 sat_s3dB xs_s3dr } in
      let {
        sat_s3dw [Occ=Once] :: [a_a300] -> (k_a2ZZ, [v_a301])
        [LclId]
        sat_s3dw
          = \ (thisGroup_s3ds :: [a_a300]) ->
              let {
                sat_s3dv [Occ=Once] :: [v_a301]
                [LclId]
                sat_s3dv
                  = Data.Functor.<$>
                      @ []
                      @ a_a300
                      @ v_a301
                      GHC.Base.$fFunctor[]
                      val_s3dq
                      thisGroup_s3ds } in
              let {
                sat_s3du [Occ=Once] :: k_a2ZZ
                [LclId]
                sat_s3du
                  = let {
                      sat_s3dt [Occ=Once] :: a_a300
                      [LclId]
                      sat_s3dt = GHC.List.head @ a_a300 thisGroup_s3ds } in
                    key_s3dp sat_s3dt } in
              (sat_s3du, sat_s3dv) } in
      GHC.Base.map @ [a_a300] @ (k_a2ZZ, [v_a301]) sat_s3dw sat_s3dC

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule1_r3cr :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule1_r3cr = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule2_r3df :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule2_r3df = GHC.Types.TrNameS $trModule1_r3cr

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule3_r3dg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule3_r3dg = "Utils.List"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule4_r3dh :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule4_r3dh = GHC.Types.TrNameS $trModule3_r3dg

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Utils.List.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Utils.List.$trModule
  = GHC.Types.Module $trModule2_r3df $trModule4_r3dh



[4 of 9] Compiling Utils.Prelude    ( Utils/Prelude.hs, Utils/Prelude.o )

==================== CorePrep ====================
Result size of CorePrep
  = {terms: 43, types: 110, coercions: 0, joins: 0/0}

-- RHS size: {terms: 7, types: 28, coercions: 0, joins: 0/0}
Utils.Prelude.compose2
  :: forall b c a1 a2. (b -> c) -> (a1 -> a2 -> b) -> a1 -> a2 -> c
[GblId]
Utils.Prelude.compose2
  = \ (@ b_a3i3) (@ c_a3i4) (@ a_a3i2) (@ a1_a3i5) ->
      GHC.Base..
        @ ((a1_a3i5 -> b_a3i3) -> a1_a3i5 -> c_a3i4)
        @ ((a_a3i2 -> a1_a3i5 -> b_a3i3) -> a_a3i2 -> a1_a3i5 -> c_a3i4)
        @ (b_a3i3 -> c_a3i4)
        (GHC.Base.. @ (a1_a3i5 -> b_a3i3) @ (a1_a3i5 -> c_a3i4) @ a_a3i2)
        (GHC.Base.. @ b_a3i3 @ c_a3i4 @ a1_a3i5)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Utils.Prelude..:
  :: forall b c a1 a2. (b -> c) -> (a1 -> a2 -> b) -> a1 -> a2 -> c
[GblId]
Utils.Prelude..: = Utils.Prelude.compose2

-- RHS size: {terms: 10, types: 17, coercions: 0, joins: 0/0}
Utils.Prelude.<&>
  :: forall (f :: * -> *) a b.
     GHC.Base.Functor f =>
     f a -> (a -> b) -> f b
[GblId, Arity=3, Unf=OtherCon []]
Utils.Prelude.<&>
  = \ (@ (f_a3hL :: * -> *))
      (@ a_a3hM)
      (@ b_a3hN)
      ($dFunctor_s3iX [Occ=Once] :: GHC.Base.Functor f_a3hL)
      (as_s3iY [Occ=Once] :: f_a3hL a_a3hM)
      (f1_s3iZ [Occ=Once] :: a_a3hM -> b_a3hN) ->
      Data.Functor.<$>
        @ f_a3hL @ a_a3hM @ b_a3hN $dFunctor_s3iX f1_s3iZ as_s3iY

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
Utils.Prelude.ignore :: forall a. a -> ()
[GblId]
Utils.Prelude.ignore
  = \ (@ a_a3hr) -> GHC.Base.const @ () @ a_a3hr GHC.Tuple.()

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule1_r3hF :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule1_r3hF = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule2_r3iT :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule2_r3iT = GHC.Types.TrNameS $trModule1_r3hF

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule3_r3iU :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule3_r3iU = "Utils.Prelude"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule4_r3iV :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule4_r3iV = GHC.Types.TrNameS $trModule3_r3iU

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Utils.Prelude.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Utils.Prelude.$trModule
  = GHC.Types.Module $trModule2_r3iT $trModule4_r3iV

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Utils.Prelude.doNothing :: GHC.Types.IO ()
[GblId]
Utils.Prelude.doNothing
  = GHC.Base.return
      @ GHC.Types.IO GHC.Base.$fMonadIO @ () GHC.Tuple.()



[5 of 9] Compiling Utils.AbstractGraph ( Utils/AbstractGraph.hs, Utils/AbstractGraph.o )

==================== CorePrep ====================
Result size of CorePrep
  = {terms: 888, types: 2,090, coercions: 0, joins: 0/86}

-- RHS size: {terms: 23, types: 51, coercions: 0, joins: 0/2}
$c<>_r4wo
  :: forall v e.
     Utils.AbstractGraph.Graph v e
     -> Utils.AbstractGraph.Graph v e -> Utils.AbstractGraph.Graph v e
[GblId, Arity=2, Unf=OtherCon []]
$c<>_r4wo
  = \ (@ v_a4lL)
      (@ e_a4lM)
      (ds_s4DP [Occ=Once!] :: Utils.AbstractGraph.Graph v_a4lL e_a4lM)
      (ds1_s4DQ [Occ=Once!]
         :: Utils.AbstractGraph.Graph v_a4lL e_a4lM) ->
      case ds_s4DP of
      { Utils.AbstractGraph.Graph lv_s4DS [Occ=Once]
                                  le_s4DT [Occ=Once] ->
      case ds1_s4DQ of
      { Utils.AbstractGraph.Graph rv_s4DV [Occ=Once]
                                  re_s4DW [Occ=Once] ->
      let {
        sat_s4DY [Occ=Once] :: [(v_a4lL, e_a4lM, v_a4lL)]
        [LclId]
        sat_s4DY
          = GHC.Base.<>
              @ [(v_a4lL, e_a4lM, v_a4lL)]
              (GHC.Base.$fSemigroup[] @ (v_a4lL, e_a4lM, v_a4lL))
              le_s4DT
              re_s4DW } in
      let {
        sat_s4DX [Occ=Once] :: [v_a4lL]
        [LclId]
        sat_s4DX
          = GHC.Base.<>
              @ [v_a4lL] (GHC.Base.$fSemigroup[] @ v_a4lL) lv_s4DS rv_s4DV } in
      Utils.AbstractGraph.Graph @ v_a4lL @ e_a4lM sat_s4DX sat_s4DY
      }
      }

Rec {
-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
Utils.AbstractGraph.$fSemigroupGraph [InlPrag=NOUSERINLINE CONLIKE]
  :: forall v e. GHC.Base.Semigroup (Utils.AbstractGraph.Graph v e)
[GblId[DFunId]]
Utils.AbstractGraph.$fSemigroupGraph
  = \ (@ v_a4lL) (@ e_a4lM) ->
      GHC.Base.C:Semigroup
        @ (Utils.AbstractGraph.Graph v_a4lL e_a4lM)
        ($c<>_r4wo @ v_a4lL @ e_a4lM)
        ($csconcat_r4D8 @ v_a4lL @ e_a4lM)
        ($cstimes_r4D9 @ v_a4lL @ e_a4lM)

-- RHS size: {terms: 4, types: 9, coercions: 0, joins: 0/0}
$csconcat_r4D8
  :: forall v e.
     GHC.Base.NonEmpty (Utils.AbstractGraph.Graph v e)
     -> Utils.AbstractGraph.Graph v e
[GblId]
$csconcat_r4D8
  = \ (@ v_a4lL) (@ e_a4lM) ->
      GHC.Base.$dmsconcat
        @ (Utils.AbstractGraph.Graph v_a4lL e_a4lM)
        (Utils.AbstractGraph.$fSemigroupGraph @ v_a4lL @ e_a4lM)

-- RHS size: {terms: 7, types: 14, coercions: 0, joins: 0/0}
$cstimes_r4D9
  :: forall v e b.
     GHC.Real.Integral b =>
     b -> Utils.AbstractGraph.Graph v e -> Utils.AbstractGraph.Graph v e
[GblId, Arity=1, Unf=OtherCon []]
$cstimes_r4D9
  = \ (@ v_a4lL)
      (@ e_a4lM)
      (@ b_a4vg)
      ($dIntegral_s4DZ [Occ=Once] :: GHC.Real.Integral b_a4vg) ->
      GHC.Base.$dmstimes
        @ (Utils.AbstractGraph.Graph v_a4lL e_a4lM)
        (Utils.AbstractGraph.$fSemigroupGraph @ v_a4lL @ e_a4lM)
        @ b_a4vg
        $dIntegral_s4DZ
end Rec }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
$cmempty_r4Da :: forall v e. Utils.AbstractGraph.Graph v e
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$cmempty_r4Da
  = \ (@ v_a4lk) (@ e_a4ll) ->
      Utils.AbstractGraph.Graph
        @ v_a4lk
        @ e_a4ll
        (GHC.Types.[] @ v_a4lk)
        (GHC.Types.[] @ (v_a4lk, e_a4ll, v_a4lk))

Rec {
-- RHS size: {terms: 7, types: 15, coercions: 0, joins: 0/0}
Utils.AbstractGraph.$fMonoidGraph [InlPrag=NOUSERINLINE CONLIKE]
  :: forall v e. GHC.Base.Monoid (Utils.AbstractGraph.Graph v e)
[GblId[DFunId]]
Utils.AbstractGraph.$fMonoidGraph
  = \ (@ v_a4lk) (@ e_a4ll) ->
      GHC.Base.C:Monoid
        @ (Utils.AbstractGraph.Graph v_a4lk e_a4ll)
        (Utils.AbstractGraph.$fSemigroupGraph @ v_a4lk @ e_a4ll)
        ($cmempty_r4Da @ v_a4lk @ e_a4ll)
        ($c<>_r4wo @ v_a4lk @ e_a4ll)
        ($cmconcat_r4Db @ v_a4lk @ e_a4ll)

-- RHS size: {terms: 4, types: 9, coercions: 0, joins: 0/0}
$cmconcat_r4Db
  :: forall v e.
     [Utils.AbstractGraph.Graph v e] -> Utils.AbstractGraph.Graph v e
[GblId]
$cmconcat_r4Db
  = \ (@ v_a4lk) (@ e_a4ll) ->
      GHC.Base.$dmmconcat
        @ (Utils.AbstractGraph.Graph v_a4lk e_a4ll)
        (Utils.AbstractGraph.$fMonoidGraph @ v_a4lk @ e_a4ll)
end Rec }

-- RHS size: {terms: 7, types: 17, coercions: 0, joins: 0/0}
Utils.AbstractGraph.getNode
  :: forall v e. Utils.AbstractGraph.Tree v e -> v
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
Utils.AbstractGraph.getNode
  = \ (@ v_a4kz)
      (@ e_a4kA)
      (ds_s4E0 [Occ=Once!] :: Utils.AbstractGraph.Tree v_a4kz e_a4kA) ->
      case ds_s4E0 of
      { Utils.AbstractGraph.Tree node_s4E2 [Occ=Once] _ [Occ=Dead] ->
      node_s4E2
      }

Rec {
-- RHS size: {terms: 78, types: 194, coercions: 0, joins: 0/12}
Utils.AbstractGraph.graphFromTree [Occ=LoopBreaker]
  :: forall v e.
     Utils.AbstractGraph.Tree v e -> Utils.AbstractGraph.Graph v e
[GblId, Arity=1, Unf=OtherCon []]
Utils.AbstractGraph.graphFromTree
  = \ (@ v_a4kC)
      (@ e_a4kD)
      (ds_s4E4 [Occ=Once!] :: Utils.AbstractGraph.Tree v_a4kC e_a4kD) ->
      case ds_s4E4 of
      { Utils.AbstractGraph.Tree node_s4E6 children_s4E7 ->
      let {
        sat_s4Ei [Occ=Once] :: [Utils.AbstractGraph.Graph v_a4kC e_a4kD]
        [LclId]
        sat_s4Ei
          = letrec {
              ds1_s4E8 [Occ=LoopBreaker]
                :: [(e_a4kD, Utils.AbstractGraph.Tree v_a4kC e_a4kD)]
                   -> [Utils.AbstractGraph.Graph v_a4kC e_a4kD]
              [LclId, Arity=1, Unf=OtherCon []]
              ds1_s4E8
                = \ (ds2_s4E9 [Occ=Once!]
                       :: [(e_a4kD, Utils.AbstractGraph.Tree v_a4kC e_a4kD)]) ->
                    case ds2_s4E9 of {
                      [] -> GHC.Types.[] @ (Utils.AbstractGraph.Graph v_a4kC e_a4kD);
                      : ds4_s4Eb [Occ=Once!] ds5_s4Ec [Occ=Once] ->
                        case ds4_s4Eb of { (_ [Occ=Dead], child_s4Ef [Occ=Once]) ->
                        let {
                          sat_s4Eh [Occ=Once] :: [Utils.AbstractGraph.Graph v_a4kC e_a4kD]
                          [LclId]
                          sat_s4Eh = ds1_s4E8 ds5_s4Ec } in
                        let {
                          sat_s4Eg [Occ=Once] :: Utils.AbstractGraph.Graph v_a4kC e_a4kD
                          [LclId]
                          sat_s4Eg
                            = Utils.AbstractGraph.graphFromTree
                                @ v_a4kC @ e_a4kD child_s4Ef } in
                        GHC.Types.:
                          @ (Utils.AbstractGraph.Graph v_a4kC e_a4kD) sat_s4Eg sat_s4Eh
                        }
                    }; } in
            ds1_s4E8 children_s4E7 } in
      case $cmconcat_r4Db @ v_a4kC @ e_a4kD sat_s4Ei of
      { Utils.AbstractGraph.Graph rv_s4Ek [Occ=Once]
                                  re_s4El [Occ=Once] ->
      let {
        sat_s4ED [Occ=Once] :: [(v_a4kC, e_a4kD, v_a4kC)]
        [LclId]
        sat_s4ED
          = let {
              sat_s4EC [Occ=Once] :: [(v_a4kC, e_a4kD, v_a4kC)]
              [LclId]
              sat_s4EC
                = letrec {
                    ds1_s4Eo [Occ=LoopBreaker]
                      :: [(e_a4kD, Utils.AbstractGraph.Tree v_a4kC e_a4kD)]
                         -> [(v_a4kC, e_a4kD, v_a4kC)]
                    [LclId, Arity=1, Unf=OtherCon []]
                    ds1_s4Eo
                      = \ (ds2_s4Ep [Occ=Once!]
                             :: [(e_a4kD, Utils.AbstractGraph.Tree v_a4kC e_a4kD)]) ->
                          case ds2_s4Ep of {
                            [] -> GHC.Types.[] @ (v_a4kC, e_a4kD, v_a4kC);
                            : ds4_s4Er [Occ=Once!] ds5_s4Es [Occ=Once] ->
                              case ds4_s4Er of
                              { (edge_s4Eu [Occ=Once], child_s4Ev [Occ=Once!]) ->
                              let {
                                sat_s4EB [Occ=Once] :: [(v_a4kC, e_a4kD, v_a4kC)]
                                [LclId]
                                sat_s4EB = ds1_s4Eo ds5_s4Es } in
                              let {
                                sat_s4Ez [Occ=Once] :: v_a4kC
                                [LclId]
                                sat_s4Ez
                                  = case child_s4Ev of
                                    { Utils.AbstractGraph.Tree node1_s4Ex [Occ=Once] _ [Occ=Dead] ->
                                    node1_s4Ex
                                    } } in
                              let {
                                sat_s4EA [Occ=Once] :: (v_a4kC, e_a4kD, v_a4kC)
                                [LclId]
                                sat_s4EA = (node_s4E6, edge_s4Eu, sat_s4Ez) } in
                              GHC.Types.: @ (v_a4kC, e_a4kD, v_a4kC) sat_s4EA sat_s4EB
                              }
                          }; } in
                  ds1_s4Eo children_s4E7 } in
            GHC.Base.<>
              @ [(v_a4kC, e_a4kD, v_a4kC)]
              (GHC.Base.$fSemigroup[] @ (v_a4kC, e_a4kD, v_a4kC))
              sat_s4EC
              re_s4El } in
      let {
        sat_s4En [Occ=Once] :: [v_a4kC]
        [LclId]
        sat_s4En
          = let {
              sat_s4Em [Occ=Once] :: [v_a4kC]
              [LclId]
              sat_s4Em
                = GHC.Types.: @ v_a4kC node_s4E6 (GHC.Types.[] @ v_a4kC) } in
            GHC.Base.<>
              @ [v_a4kC] (GHC.Base.$fSemigroup[] @ v_a4kC) sat_s4Em rv_s4Ek } in
      Utils.AbstractGraph.Graph @ v_a4kC @ e_a4kD sat_s4En sat_s4ED
      }
      }
end Rec }

-- RHS size: {terms: 10, types: 15, coercions: 0, joins: 0/1}
Utils.AbstractGraph.singleton
  :: forall v e. v -> Utils.AbstractGraph.Graph v e
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
Utils.AbstractGraph.singleton
  = \ (@ v_a4ku) (@ e_a4kv) (v1_s4EE [Occ=Once] :: v_a4ku) ->
      let {
        sat_s4EF [Occ=Once] :: [v_a4ku]
        [LclId]
        sat_s4EF
          = GHC.Types.: @ v_a4ku v1_s4EE (GHC.Types.[] @ v_a4ku) } in
      Utils.AbstractGraph.Graph
        @ v_a4ku
        @ e_a4kv
        sat_s4EF
        (GHC.Types.[] @ (v_a4ku, e_a4kv, v_a4ku))

-- RHS size: {terms: 7, types: 17, coercions: 0, joins: 0/0}
Utils.AbstractGraph.vertices
  :: forall v e. Utils.AbstractGraph.Graph v e -> [v]
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
Utils.AbstractGraph.vertices
  = \ (@ v_a4jE)
      (@ e_a4jF)
      (ds_s4EG [Occ=Once!] :: Utils.AbstractGraph.Graph v_a4jE e_a4jF) ->
      case ds_s4EG of
      { Utils.AbstractGraph.Graph vs_s4EI [Occ=Once] _ [Occ=Dead] ->
      vs_s4EI
      }

-- RHS size: {terms: 7, types: 17, coercions: 0, joins: 0/0}
Utils.AbstractGraph.edgeTriplets
  :: forall v e. Utils.AbstractGraph.Graph v e -> [(v, e, v)]
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
Utils.AbstractGraph.edgeTriplets
  = \ (@ v_a4jB)
      (@ e_a4jC)
      (ds_s4EK [Occ=Once!] :: Utils.AbstractGraph.Graph v_a4jB e_a4jC) ->
      case ds_s4EK of
      { Utils.AbstractGraph.Graph _ [Occ=Dead] es_s4EN [Occ=Once] ->
      es_s4EN
      }

-- RHS size: {terms: 33, types: 70, coercions: 0, joins: 0/4}
Utils.AbstractGraph.mapEdgeTriplets
  :: forall v e f.
     ((v, e, v) -> f)
     -> Utils.AbstractGraph.Graph v e -> Utils.AbstractGraph.Graph v f
[GblId, Arity=2, Unf=OtherCon []]
Utils.AbstractGraph.mapEdgeTriplets
  = \ (@ v_a4iX)
      (@ e_a4iY)
      (@ f_a4iZ)
      (f1_s4EO [Occ=OnceL!] :: (v_a4iX, e_a4iY, v_a4iX) -> f_a4iZ)
      (ds_s4EP [Occ=Once!] :: Utils.AbstractGraph.Graph v_a4iX e_a4iY) ->
      case ds_s4EP of
      { Utils.AbstractGraph.Graph vs_s4ER [Occ=Once]
                                  es_s4ES [Occ=Once] ->
      let {
        sat_s4F1 [Occ=Once] :: [(v_a4iX, f_a4iZ, v_a4iX)]
        [LclId]
        sat_s4F1
          = let {
              sat_s4F0 [Occ=Once]
                :: (v_a4iX, e_a4iY, v_a4iX) -> (v_a4iX, f_a4iZ, v_a4iX)
              [LclId]
              sat_s4F0
                = \ (ds1_s4ET [Occ=Once!] :: (v_a4iX, e_a4iY, v_a4iX)) ->
                    case ds1_s4ET of { (s_s4EV, e1_s4EW [Occ=Once], d_s4EX) ->
                    let {
                      sat_s4EZ [Occ=Once] :: f_a4iZ
                      [LclId]
                      sat_s4EZ
                        = let {
                            sat_s4EY [Occ=Once] :: (v_a4iX, e_a4iY, v_a4iX)
                            [LclId]
                            sat_s4EY = (s_s4EV, e1_s4EW, d_s4EX) } in
                          f1_s4EO sat_s4EY } in
                    (s_s4EV, sat_s4EZ, d_s4EX)
                    } } in
            Utils.Prelude.<&>
              @ []
              @ (v_a4iX, e_a4iY, v_a4iX)
              @ (v_a4iX, f_a4iZ, v_a4iX)
              GHC.Base.$fFunctor[]
              es_s4ES
              sat_s4F0 } in
      Utils.AbstractGraph.Graph @ v_a4iX @ f_a4iZ vs_s4ER sat_s4F1
      }

-- RHS size: {terms: 44, types: 79, coercions: 0, joins: 0/7}
Utils.AbstractGraph.mapGraphTriplets
  :: forall v1 v2 e1 e2.
     (v1 -> v2)
     -> ((v1, e1, v1) -> e2)
     -> Utils.AbstractGraph.Graph v1 e1
     -> Utils.AbstractGraph.Graph v2 e2
[GblId, Arity=3, Unf=OtherCon []]
Utils.AbstractGraph.mapGraphTriplets
  = \ (@ v1_a4iv)
      (@ v2_a4iw)
      (@ e1_a4ix)
      (@ e2_a4iy)
      (fv_s4F2 :: v1_a4iv -> v2_a4iw)
      (fe_s4F3 [Occ=OnceL!] :: (v1_a4iv, e1_a4ix, v1_a4iv) -> e2_a4iy)
      (ds_s4F4 [Occ=Once!]
         :: Utils.AbstractGraph.Graph v1_a4iv e1_a4ix) ->
      case ds_s4F4 of
      { Utils.AbstractGraph.Graph vs_s4F6 [Occ=Once]
                                  es_s4F7 [Occ=Once] ->
      let {
        sat_s4Fj [Occ=Once] :: [(v2_a4iw, e2_a4iy, v2_a4iw)]
        [LclId]
        sat_s4Fj
          = let {
              sat_s4Fi [Occ=Once]
                :: (v1_a4iv, e1_a4ix, v1_a4iv) -> (v2_a4iw, e2_a4iy, v2_a4iw)
              [LclId]
              sat_s4Fi
                = \ (ds1_s4F9 [Occ=Once!] :: (v1_a4iv, e1_a4ix, v1_a4iv)) ->
                    case ds1_s4F9 of { (s_s4Fb, e_s4Fc [Occ=Once], d_s4Fd) ->
                    let {
                      sat_s4Fh [Occ=Once] :: v2_a4iw
                      [LclId]
                      sat_s4Fh = fv_s4F2 d_s4Fd } in
                    let {
                      sat_s4Fg [Occ=Once] :: e2_a4iy
                      [LclId]
                      sat_s4Fg
                        = let {
                            sat_s4Ff [Occ=Once] :: (v1_a4iv, e1_a4ix, v1_a4iv)
                            [LclId]
                            sat_s4Ff = (s_s4Fb, e_s4Fc, d_s4Fd) } in
                          fe_s4F3 sat_s4Ff } in
                    let {
                      sat_s4Fe [Occ=Once] :: v2_a4iw
                      [LclId]
                      sat_s4Fe = fv_s4F2 s_s4Fb } in
                    (sat_s4Fe, sat_s4Fg, sat_s4Fh)
                    } } in
            GHC.Base.map
              @ (v1_a4iv, e1_a4ix, v1_a4iv)
              @ (v2_a4iw, e2_a4iy, v2_a4iw)
              sat_s4Fi
              es_s4F7 } in
      let {
        sat_s4F8 [Occ=Once] :: [v2_a4iw]
        [LclId]
        sat_s4F8 = GHC.Base.map @ v1_a4iv @ v2_a4iw fv_s4F2 vs_s4F6 } in
      Utils.AbstractGraph.Graph @ v2_a4iw @ e2_a4iy sat_s4F8 sat_s4Fj
      }

-- RHS size: {terms: 15, types: 23, coercions: 0, joins: 0/1}
Utils.AbstractGraph.mapEdgeInTriplet
  :: forall e f v. (e -> f) -> (v, e, v) -> (v, f, v)
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
Utils.AbstractGraph.mapEdgeInTriplet
  = \ (@ e_a4ir)
      (@ f_a4is)
      (@ v_a4it)
      (f1_s4Fk [Occ=Once!] :: e_a4ir -> f_a4is)
      (ds_s4Fl [Occ=Once!] :: (v_a4it, e_a4ir, v_a4it)) ->
      case ds_s4Fl of
      { (s_s4Fn [Occ=Once], e1_s4Fo [Occ=Once], d_s4Fp [Occ=Once]) ->
      let {
        sat_s4Fq [Occ=Once] :: f_a4is
        [LclId]
        sat_s4Fq = f1_s4Fk e1_s4Fo } in
      (s_s4Fn, sat_s4Fq, d_s4Fp)
      }

-- RHS size: {terms: 10, types: 19, coercions: 0, joins: 0/0}
Utils.AbstractGraph.mapEdgeFromTriplet
  :: forall e f v. (e -> f) -> (v, e, v) -> f
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
Utils.AbstractGraph.mapEdgeFromTriplet
  = \ (@ e_a4in)
      (@ f_a4io)
      (@ v_a4ip)
      (f1_s4Fr [Occ=Once!] :: e_a4in -> f_a4io)
      (ds_s4Fs [Occ=Once!] :: (v_a4ip, e_a4in, v_a4ip)) ->
      case ds_s4Fs of
      { (_ [Occ=Dead], e1_s4Fv [Occ=Once], _ [Occ=Dead]) ->
      f1_s4Fr e1_s4Fv
      }

-- RHS size: {terms: 39, types: 69, coercions: 0, joins: 0/6}
$cbimap_r4Dc
  :: forall a b c d.
     (a -> b)
     -> (c -> d)
     -> Utils.AbstractGraph.Graph a c
     -> Utils.AbstractGraph.Graph b d
[GblId, Arity=3, Unf=OtherCon []]
$cbimap_r4Dc
  = \ (@ a_a4vx)
      (@ b_a4vy)
      (@ c_a4vz)
      (@ d_a4vA)
      (fv_s4Fx :: a_a4vx -> b_a4vy)
      (fe_s4Fy [Occ=OnceL!] :: c_a4vz -> d_a4vA)
      (ds_s4Fz [Occ=Once!] :: Utils.AbstractGraph.Graph a_a4vx c_a4vz) ->
      case ds_s4Fz of
      { Utils.AbstractGraph.Graph vs_s4FB [Occ=Once]
                                  es_s4FC [Occ=Once] ->
      let {
        sat_s4FN [Occ=Once] :: [(b_a4vy, d_a4vA, b_a4vy)]
        [LclId]
        sat_s4FN
          = let {
              sat_s4FM [Occ=Once]
                :: (a_a4vx, c_a4vz, a_a4vx) -> (b_a4vy, d_a4vA, b_a4vy)
              [LclId]
              sat_s4FM
                = \ (ds1_s4FE [Occ=Once!] :: (a_a4vx, c_a4vz, a_a4vx)) ->
                    case ds1_s4FE of
                    { (s_s4FG [Occ=Once], e_s4FH [Occ=Once], d1_s4FI [Occ=Once]) ->
                    let {
                      sat_s4FL [Occ=Once] :: b_a4vy
                      [LclId]
                      sat_s4FL = fv_s4Fx d1_s4FI } in
                    let {
                      sat_s4FK [Occ=Once] :: d_a4vA
                      [LclId]
                      sat_s4FK = fe_s4Fy e_s4FH } in
                    let {
                      sat_s4FJ [Occ=Once] :: b_a4vy
                      [LclId]
                      sat_s4FJ = fv_s4Fx s_s4FG } in
                    (sat_s4FJ, sat_s4FK, sat_s4FL)
                    } } in
            GHC.Base.map
              @ (a_a4vx, c_a4vz, a_a4vx)
              @ (b_a4vy, d_a4vA, b_a4vy)
              sat_s4FM
              es_s4FC } in
      let {
        sat_s4FD [Occ=Once] :: [b_a4vy]
        [LclId]
        sat_s4FD = GHC.Base.map @ a_a4vx @ b_a4vy fv_s4Fx vs_s4FB } in
      Utils.AbstractGraph.Graph @ b_a4vy @ d_a4vA sat_s4FD sat_s4FN
      }

-- RHS size: {terms: 28, types: 60, coercions: 0, joins: 0/3}
Utils.AbstractGraph.mapEdges
  :: forall e f v.
     (e -> f)
     -> Utils.AbstractGraph.Graph v e -> Utils.AbstractGraph.Graph v f
[GblId, Arity=2, Unf=OtherCon []]
Utils.AbstractGraph.mapEdges
  = \ (@ b_a4w3)
      (@ c_a4w4)
      (@ a_a4w5)
      (fe_s4FO [Occ=OnceL!] :: b_a4w3 -> c_a4w4)
      (ds_s4FP [Occ=Once!] :: Utils.AbstractGraph.Graph a_a4w5 b_a4w3) ->
      case ds_s4FP of
      { Utils.AbstractGraph.Graph vs_s4FR [Occ=Once]
                                  es_s4FS [Occ=Once] ->
      let {
        sat_s4G0 [Occ=Once] :: [(a_a4w5, c_a4w4, a_a4w5)]
        [LclId]
        sat_s4G0
          = let {
              sat_s4FZ [Occ=Once]
                :: (a_a4w5, b_a4w3, a_a4w5) -> (a_a4w5, c_a4w4, a_a4w5)
              [LclId]
              sat_s4FZ
                = \ (ds1_s4FT [Occ=Once!] :: (a_a4w5, b_a4w3, a_a4w5)) ->
                    case ds1_s4FT of
                    { (s_s4FV [Occ=Once], e_s4FW [Occ=Once], d_s4FX [Occ=Once]) ->
                    let {
                      sat_s4FY [Occ=Once] :: c_a4w4
                      [LclId]
                      sat_s4FY = fe_s4FO e_s4FW } in
                    (s_s4FV, sat_s4FY, d_s4FX)
                    } } in
            Utils.Prelude.<&>
              @ []
              @ (a_a4w5, b_a4w3, a_a4w5)
              @ (a_a4w5, c_a4w4, a_a4w5)
              GHC.Base.$fFunctor[]
              es_s4FS
              sat_s4FZ } in
      Utils.AbstractGraph.Graph @ a_a4w5 @ c_a4w4 vs_s4FR sat_s4G0
      }

Rec {
-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
Utils.AbstractGraph.$fBifunctorGraph [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bifunctor.Bifunctor Utils.AbstractGraph.Graph
[GblId[DFunId]]
Utils.AbstractGraph.$fBifunctorGraph
  = Data.Bifunctor.C:Bifunctor
      @ Utils.AbstractGraph.Graph
      $cbimap_r4Dc
      Utils.AbstractGraph.mapVertices
      Utils.AbstractGraph.mapEdges

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
Utils.AbstractGraph.mapVertices [Occ=LoopBreaker]
  :: forall v w e.
     (v -> w)
     -> Utils.AbstractGraph.Graph v e -> Utils.AbstractGraph.Graph w e
[GblId]
Utils.AbstractGraph.mapVertices
  = \ (@ a_a4vQ) (@ b_a4vR) (@ c_a4vS) ->
      Data.Bifunctor.$dmfirst
        @ Utils.AbstractGraph.Graph
        Utils.AbstractGraph.$fBifunctorGraph
        @ a_a4vQ
        @ b_a4vR
        @ c_a4vS
end Rec }

-- RHS size: {terms: 33, types: 59, coercions: 0, joins: 0/6}
Utils.AbstractGraph.assignUniqueIds
  :: forall v e.
     GHC.Classes.Ord v =>
     Utils.AbstractGraph.Graph v e
     -> (Utils.AbstractGraph.Graph (v, GHC.Types.Int) e,
         Data.Map.Internal.Map v GHC.Types.Int)
[GblId, Arity=2, Unf=OtherCon []]
Utils.AbstractGraph.assignUniqueIds
  = \ (@ v_a4jH)
      (@ e_a4jI)
      ($dOrd_s4G1 :: GHC.Classes.Ord v_a4jH)
      (g_s4G2 :: Utils.AbstractGraph.Graph v_a4jH e_a4jI) ->
      let {
        idMap_s4G3 :: Data.Map.Internal.Map v_a4jH GHC.Types.Int
        [LclId]
        idMap_s4G3
          = let {
              sat_s4G8 [Occ=Once] :: [(v_a4jH, GHC.Types.Int)]
              [LclId]
              sat_s4G8
                = let {
                    sat_s4G7 [Occ=Once] :: [v_a4jH]
                    [LclId]
                    sat_s4G7
                      = case g_s4G2 of
                        { Utils.AbstractGraph.Graph vs_s4G5 [Occ=Once] _ [Occ=Dead] ->
                        vs_s4G5
                        } } in
                  Utils.List.zipWithIndexRight @ v_a4jH sat_s4G7 } in
            Data.Map.Internal.fromList
              @ v_a4jH @ GHC.Types.Int $dOrd_s4G1 sat_s4G8 } in
      let {
        sat_s4Gc [Occ=Once]
          :: Utils.AbstractGraph.Graph (v_a4jH, GHC.Types.Int) e_a4jI
        [LclId]
        sat_s4Gc
          = let {
              sat_s4Gb [Occ=Once] :: v_a4jH -> (v_a4jH, GHC.Types.Int)
              [LclId]
              sat_s4Gb
                = \ (v1_s4G9 :: v_a4jH) ->
                    let {
                      sat_s4Ga [Occ=Once] :: GHC.Types.Int
                      [LclId]
                      sat_s4Ga
                        = Data.Map.Internal.!
                            @ v_a4jH @ GHC.Types.Int $dOrd_s4G1 idMap_s4G3 v1_s4G9 } in
                    (v1_s4G9, sat_s4Ga) } in
            Utils.AbstractGraph.mapVertices
              @ v_a4jH @ (v_a4jH, GHC.Types.Int) @ e_a4jI sat_s4Gb g_s4G2 } in
      (sat_s4Gc, idMap_s4G3)

-- RHS size: {terms: 14, types: 24, coercions: 0, joins: 0/1}
Utils.AbstractGraph.eliminateDuplicateVertices
  :: forall v e.
     GHC.Classes.Ord v =>
     Utils.AbstractGraph.Graph v e -> Utils.AbstractGraph.Graph v e
[GblId, Arity=2, Unf=OtherCon []]
Utils.AbstractGraph.eliminateDuplicateVertices
  = \ (@ v_a4ie)
      (@ e_a4if)
      ($dOrd_s4Gd [Occ=Once] :: GHC.Classes.Ord v_a4ie)
      (ds_s4Ge [Occ=Once!] :: Utils.AbstractGraph.Graph v_a4ie e_a4if) ->
      case ds_s4Ge of
      { Utils.AbstractGraph.Graph vs_s4Gg [Occ=Once]
                                  es_s4Gh [Occ=Once] ->
      let {
        sat_s4Gi [Occ=Once] :: [v_a4ie]
        [LclId]
        sat_s4Gi = Utils.List.noDuplicates @ v_a4ie $dOrd_s4Gd vs_s4Gg } in
      Utils.AbstractGraph.Graph @ v_a4ie @ e_a4if sat_s4Gi es_s4Gh
      }

Rec {
-- RHS size: {terms: 43, types: 88, coercions: 0, joins: 0/7}
Utils.AbstractGraph.buildTree [Occ=LoopBreaker]
  :: forall t v e.
     (t -> v) -> (t -> [(e, t)]) -> t -> Utils.AbstractGraph.Tree v e
[GblId, Arity=3, Caf=NoCafRefs, Unf=OtherCon []]
Utils.AbstractGraph.buildTree
  = \ (@ t_a4hy)
      (@ v_a4hz)
      (@ e_a4hA)
      (toNode_s4Gj :: t_a4hy -> v_a4hz)
      (children_s4Gk :: t_a4hy -> [(e_a4hA, t_a4hy)])
      (root_s4Gl :: t_a4hy) ->
      let {
        sat_s4Gz [Occ=Once]
          :: [(e_a4hA, Utils.AbstractGraph.Tree v_a4hz e_a4hA)]
        [LclId]
        sat_s4Gz
          = letrec {
              ds_s4Gn [Occ=LoopBreaker]
                :: [(e_a4hA, t_a4hy)]
                   -> [(e_a4hA, Utils.AbstractGraph.Tree v_a4hz e_a4hA)]
              [LclId, Arity=1, Unf=OtherCon []]
              ds_s4Gn
                = \ (ds1_s4Go [Occ=Once!] :: [(e_a4hA, t_a4hy)]) ->
                    case ds1_s4Go of {
                      [] ->
                        GHC.Types.[] @ (e_a4hA, Utils.AbstractGraph.Tree v_a4hz e_a4hA);
                      : ds3_s4Gq [Occ=Once!] ds4_s4Gr [Occ=Once] ->
                        case ds3_s4Gq of { (edge_s4Gt [Occ=Once], child_s4Gu [Occ=Once]) ->
                        let {
                          sat_s4Gx [Occ=Once]
                            :: [(e_a4hA, Utils.AbstractGraph.Tree v_a4hz e_a4hA)]
                          [LclId]
                          sat_s4Gx = ds_s4Gn ds4_s4Gr } in
                        let {
                          sat_s4Gv [Occ=Once] :: Utils.AbstractGraph.Tree v_a4hz e_a4hA
                          [LclId]
                          sat_s4Gv
                            = Utils.AbstractGraph.buildTree
                                @ t_a4hy
                                @ v_a4hz
                                @ e_a4hA
                                toNode_s4Gj
                                children_s4Gk
                                child_s4Gu } in
                        let {
                          sat_s4Gw [Occ=Once]
                            :: (e_a4hA, Utils.AbstractGraph.Tree v_a4hz e_a4hA)
                          [LclId]
                          sat_s4Gw = (edge_s4Gt, sat_s4Gv) } in
                        GHC.Types.:
                          @ (e_a4hA, Utils.AbstractGraph.Tree v_a4hz e_a4hA)
                          sat_s4Gw
                          sat_s4Gx
                        }
                    }; } in
            let {
              sat_s4Gy [Occ=Once] :: [(e_a4hA, t_a4hy)]
              [LclId]
              sat_s4Gy = children_s4Gk root_s4Gl } in
            ds_s4Gn sat_s4Gy } in
      let {
        sat_s4Gm [Occ=Once] :: v_a4hz
        [LclId]
        sat_s4Gm = toNode_s4Gj root_s4Gl } in
      Utils.AbstractGraph.Tree @ v_a4hz @ e_a4hA sat_s4Gm sat_s4Gz
end Rec }

-- RHS size: {terms: 107, types: 349, coercions: 0, joins: 0/19}
Utils.AbstractGraph.assignTreeIds
  :: forall v e.
     Utils.AbstractGraph.Tree v e
     -> Utils.AbstractGraph.Tree (v, GHC.Types.Int) e
[GblId, Arity=1, Unf=OtherCon []]
Utils.AbstractGraph.assignTreeIds
  = \ (@ v_a4fJ)
      (@ e_a4fK)
      (root_s4GA [Occ=Once] :: Utils.AbstractGraph.Tree v_a4fJ e_a4fK) ->
      letrec {
        recAssignIds_s4GB [Occ=LoopBreaker]
          :: forall v1 e1.
             GHC.Types.Int
             -> Utils.AbstractGraph.Tree v1 e1
             -> (Utils.AbstractGraph.Tree (v1, GHC.Types.Int) e1, GHC.Types.Int)
        [LclId, Arity=2, Unf=OtherCon []]
        recAssignIds_s4GB
          = \ (@ v1_a4g6)
              (@ e1_a4g7)
              (id_s4GC :: GHC.Types.Int)
              (ds_s4GD [Occ=Once!]
                 :: Utils.AbstractGraph.Tree v1_a4g6 e1_a4g7) ->
              case ds_s4GD of
              { Utils.AbstractGraph.Tree node_s4GF [Occ=Once]
                                         children_s4GG [Occ=Once] ->
              letrec {
                assignInSequence_s4GH [Occ=LoopBreaker]
                  :: forall e2 v2.
                     GHC.Types.Int
                     -> [(e2, Utils.AbstractGraph.Tree v2 e2)]
                     -> ([(e2, Utils.AbstractGraph.Tree (v2, GHC.Types.Int) e2)],
                         GHC.Types.Int)
                [LclId, Arity=2, Unf=OtherCon []]
                assignInSequence_s4GH
                  = \ (@ e2_a4gu)
                      (@ v2_a4gv)
                      (freeId_s4GI [Occ=Once*] :: GHC.Types.Int)
                      (ds1_s4GJ [Occ=Once!]
                         :: [(e2_a4gu, Utils.AbstractGraph.Tree v2_a4gv e2_a4gu)]) ->
                      case ds1_s4GJ of {
                        [] ->
                          (GHC.Types.[]
                             @ (e2_a4gu,
                                Utils.AbstractGraph.Tree (v2_a4gv, GHC.Types.Int) e2_a4gu),
                           freeId_s4GI);
                        : ds2_s4GL [Occ=Once!] remEdges_s4GM [Occ=Once] ->
                          case ds2_s4GL of
                          { (edge_s4GO [Occ=Once], thisSubtree_s4GP [Occ=Once]) ->
                          let {
                            ds3_s4GQ
                              :: (Utils.AbstractGraph.Tree (v2_a4gv, GHC.Types.Int) e2_a4gu,
                                  GHC.Types.Int)
                            [LclId]
                            ds3_s4GQ
                              = recAssignIds_s4GB
                                  @ v2_a4gv @ e2_a4gu freeId_s4GI thisSubtree_s4GP } in
                          let {
                            ds4_s4GR
                              :: ([(e2_a4gu,
                                    Utils.AbstractGraph.Tree (v2_a4gv, GHC.Types.Int) e2_a4gu)],
                                  GHC.Types.Int)
                            [LclId]
                            ds4_s4GR
                              = let {
                                  sat_s4GV [Occ=Once] :: GHC.Types.Int
                                  [LclId]
                                  sat_s4GV
                                    = case ds3_s4GQ of
                                      { (_ [Occ=Dead], idAfterThisSubtree_s4GU [Occ=Once]) ->
                                      idAfterThisSubtree_s4GU
                                      } } in
                                assignInSequence_s4GH
                                  @ e2_a4gu @ v2_a4gv sat_s4GV remEdges_s4GM } in
                          let {
                            sat_s4H9 [Occ=Once] :: GHC.Types.Int
                            [LclId]
                            sat_s4H9
                              = case ds4_s4GR of { (_ [Occ=Dead], nextFreeId_s4H8 [Occ=Once]) ->
                                nextFreeId_s4H8
                                } } in
                          let {
                            sat_s4H4 [Occ=Once]
                              :: [(e2_a4gu,
                                   Utils.AbstractGraph.Tree (v2_a4gv, GHC.Types.Int) e2_a4gu)]
                            [LclId]
                            sat_s4H4
                              = case ds4_s4GR of
                                { (remEdgesWithId_s4H2 [Occ=Once], _ [Occ=Dead]) ->
                                remEdgesWithId_s4H2
                                } } in
                          let {
                            sat_s4GZ [Occ=Once]
                              :: Utils.AbstractGraph.Tree (v2_a4gv, GHC.Types.Int) e2_a4gu
                            [LclId]
                            sat_s4GZ
                              = case ds3_s4GQ of
                                { (thisSubtreeWithId_s4GX [Occ=Once], _ [Occ=Dead]) ->
                                thisSubtreeWithId_s4GX
                                } } in
                          let {
                            sat_s4H0 [Occ=Once]
                              :: (e2_a4gu,
                                  Utils.AbstractGraph.Tree (v2_a4gv, GHC.Types.Int) e2_a4gu)
                            [LclId]
                            sat_s4H0 = (edge_s4GO, sat_s4GZ) } in
                          let {
                            sat_s4H5 [Occ=Once]
                              :: [(e2_a4gu,
                                   Utils.AbstractGraph.Tree (v2_a4gv, GHC.Types.Int) e2_a4gu)]
                            [LclId]
                            sat_s4H5
                              = GHC.Types.:
                                  @ (e2_a4gu,
                                     Utils.AbstractGraph.Tree (v2_a4gv, GHC.Types.Int) e2_a4gu)
                                  sat_s4H0
                                  sat_s4H4 } in
                          (sat_s4H5, sat_s4H9)
                          }
                      }; } in
              let {
                ds1_s4Ha
                  :: ([(e1_a4g7,
                        Utils.AbstractGraph.Tree (v1_a4g6, GHC.Types.Int) e1_a4g7)],
                      GHC.Types.Int)
                [LclId]
                ds1_s4Ha
                  = let {
                      sat_s4Hc [Occ=Once] :: GHC.Types.Int
                      [LclId]
                      sat_s4Hc
                        = let {
                            sat_s4Hb [Occ=Once] :: GHC.Types.Int
                            [LclId]
                            sat_s4Hb = GHC.Types.I# 1# } in
                          GHC.Num.+ @ GHC.Types.Int GHC.Num.$fNumInt id_s4GC sat_s4Hb } in
                    assignInSequence_s4GH
                      @ e1_a4g7 @ v1_a4g6 sat_s4Hc children_s4GG } in
              let {
                sat_s4Hm [Occ=Once] :: GHC.Types.Int
                [LclId]
                sat_s4Hm
                  = case ds1_s4Ha of { (_ [Occ=Dead], nextId_s4Hl [Occ=Once]) ->
                    nextId_s4Hl
                    } } in
              let {
                sat_s4Hh [Occ=Once]
                  :: [(e1_a4g7,
                       Utils.AbstractGraph.Tree (v1_a4g6, GHC.Types.Int) e1_a4g7)]
                [LclId]
                sat_s4Hh
                  = case ds1_s4Ha of
                    { (childrenWithId_s4Hf [Occ=Once], _ [Occ=Dead]) ->
                    childrenWithId_s4Hf
                    } } in
              let {
                sat_s4Hd [Occ=Once] :: (v1_a4g6, GHC.Types.Int)
                [LclId]
                sat_s4Hd = (node_s4GF, id_s4GC) } in
              let {
                sat_s4Hi [Occ=Once]
                  :: Utils.AbstractGraph.Tree (v1_a4g6, GHC.Types.Int) e1_a4g7
                [LclId]
                sat_s4Hi
                  = Utils.AbstractGraph.Tree
                      @ (v1_a4g6, GHC.Types.Int) @ e1_a4g7 sat_s4Hd sat_s4Hh } in
              (sat_s4Hi, sat_s4Hm)
              }; } in
      let {
        sat_s4Ho [Occ=Once]
          :: (Utils.AbstractGraph.Tree (v_a4fJ, GHC.Types.Int) e_a4fK,
              GHC.Types.Int)
        [LclId]
        sat_s4Ho
          = let {
              sat_s4Hn [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s4Hn = GHC.Types.I# 0# } in
            recAssignIds_s4GB @ v_a4fJ @ e_a4fK sat_s4Hn root_s4GA } in
      Data.Tuple.fst
        @ (Utils.AbstractGraph.Tree (v_a4fJ, GHC.Types.Int) e_a4fK)
        @ GHC.Types.Int
        sat_s4Ho

-- RHS size: {terms: 7, types: 17, coercions: 0, joins: 0/0}
Utils.AbstractGraph.rootNode
  :: forall v e. Utils.AbstractGraph.Tree v e -> v
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
Utils.AbstractGraph.rootNode
  = \ (@ v_a4eF)
      (@ e_a4eG)
      (ds_s4Hp [Occ=Once!] :: Utils.AbstractGraph.Tree v_a4eF e_a4eG) ->
      case ds_s4Hp of
      { Utils.AbstractGraph.Tree root_s4Hr [Occ=Once] _ [Occ=Dead] ->
      root_s4Hr
      }

Rec {
-- RHS size: {terms: 50, types: 141, coercions: 0, joins: 0/7}
Utils.AbstractGraph.allTreeEdges [Occ=LoopBreaker]
  :: forall v e. Utils.AbstractGraph.Tree v e -> [(v, e, v)]
[GblId, Arity=1, Unf=OtherCon []]
Utils.AbstractGraph.allTreeEdges
  = \ (@ v_a4fb)
      (@ e_a4fc)
      (ds_s4Ht [Occ=Once!] :: Utils.AbstractGraph.Tree v_a4fb e_a4fc) ->
      case ds_s4Ht of
      { Utils.AbstractGraph.Tree root_s4Hv [Occ=OnceL] children_s4Hw ->
      let {
        sat_s4HR [Occ=Once] :: [(v_a4fb, e_a4fc, v_a4fb)]
        [LclId]
        sat_s4HR
          = let {
              sat_s4HQ [Occ=Once]
                :: (e_a4fc, Utils.AbstractGraph.Tree v_a4fb e_a4fc)
                   -> [(v_a4fb, e_a4fc, v_a4fb)]
              [LclId]
              sat_s4HQ
                = \ (ds1_s4HM [Occ=Once!]
                       :: (e_a4fc, Utils.AbstractGraph.Tree v_a4fb e_a4fc)) ->
                    case ds1_s4HM of { (_ [Occ=Dead], subtree_s4HP [Occ=Once]) ->
                    Utils.AbstractGraph.allTreeEdges @ v_a4fb @ e_a4fc subtree_s4HP
                    } } in
            GHC.Base.>>=
              @ []
              GHC.Base.$fMonad[]
              @ (e_a4fc, Utils.AbstractGraph.Tree v_a4fb e_a4fc)
              @ (v_a4fb, e_a4fc, v_a4fb)
              children_s4Hw
              sat_s4HQ } in
      let {
        sat_s4HL [Occ=Once] :: [(v_a4fb, e_a4fc, v_a4fb)]
        [LclId]
        sat_s4HL
          = letrec {
              ds1_s4Hx [Occ=LoopBreaker]
                :: [(e_a4fc, Utils.AbstractGraph.Tree v_a4fb e_a4fc)]
                   -> [(v_a4fb, e_a4fc, v_a4fb)]
              [LclId, Arity=1, Unf=OtherCon []]
              ds1_s4Hx
                = \ (ds2_s4Hy [Occ=Once!]
                       :: [(e_a4fc, Utils.AbstractGraph.Tree v_a4fb e_a4fc)]) ->
                    case ds2_s4Hy of {
                      [] -> GHC.Types.[] @ (v_a4fb, e_a4fc, v_a4fb);
                      : ds4_s4HA [Occ=Once!] ds5_s4HB [Occ=Once] ->
                        case ds4_s4HA of
                        { (edge_s4HD [Occ=Once], subtree_s4HE [Occ=Once!]) ->
                        let {
                          sat_s4HK [Occ=Once] :: [(v_a4fb, e_a4fc, v_a4fb)]
                          [LclId]
                          sat_s4HK = ds1_s4Hx ds5_s4HB } in
                        let {
                          sat_s4HI [Occ=Once] :: v_a4fb
                          [LclId]
                          sat_s4HI
                            = case subtree_s4HE of
                              { Utils.AbstractGraph.Tree root1_s4HG [Occ=Once] _ [Occ=Dead] ->
                              root1_s4HG
                              } } in
                        let {
                          sat_s4HJ [Occ=Once] :: (v_a4fb, e_a4fc, v_a4fb)
                          [LclId]
                          sat_s4HJ = (root_s4Hv, edge_s4HD, sat_s4HI) } in
                        GHC.Types.: @ (v_a4fb, e_a4fc, v_a4fb) sat_s4HJ sat_s4HK
                        }
                    }; } in
            ds1_s4Hx children_s4Hw } in
      GHC.Base.++ @ (v_a4fb, e_a4fc, v_a4fb) sat_s4HL sat_s4HR
      }
end Rec }

-- RHS size: {terms: 9, types: 29, coercions: 0, joins: 0/0}
Utils.AbstractGraph.subtrees
  :: forall v e.
     Utils.AbstractGraph.Tree v e -> [Utils.AbstractGraph.Tree v e]
[GblId, Arity=1, Unf=OtherCon []]
Utils.AbstractGraph.subtrees
  = \ (@ v_a4ew)
      (@ e_a4ex)
      (ds_s4HS [Occ=Once!] :: Utils.AbstractGraph.Tree v_a4ew e_a4ex) ->
      case ds_s4HS of
      { Utils.AbstractGraph.Tree _ [Occ=Dead] edges_s4HV [Occ=Once] ->
      GHC.Base.map
        @ (e_a4ex, Utils.AbstractGraph.Tree v_a4ew e_a4ex)
        @ (Utils.AbstractGraph.Tree v_a4ew e_a4ex)
        (Data.Tuple.snd
           @ e_a4ex @ (Utils.AbstractGraph.Tree v_a4ew e_a4ex))
        edges_s4HV
      }

-- RHS size: {terms: 8, types: 27, coercions: 0, joins: 0/1}
Utils.AbstractGraph.subtreeNodes
  :: forall v e. Utils.AbstractGraph.Tree v e -> [v]
[GblId]
Utils.AbstractGraph.subtreeNodes
  = \ (@ v_a4eI) (@ e_a4eJ) ->
      let {
        sat_s4HW [Occ=Once]
          :: [Utils.AbstractGraph.Tree v_a4eI e_a4eJ] -> [v_a4eI]
        [LclId]
        sat_s4HW
          = GHC.Base.map
              @ (Utils.AbstractGraph.Tree v_a4eI e_a4eJ)
              @ v_a4eI
              (Utils.AbstractGraph.rootNode @ v_a4eI @ e_a4eJ) } in
      GHC.Base..
        @ [Utils.AbstractGraph.Tree v_a4eI e_a4eJ]
        @ [v_a4eI]
        @ (Utils.AbstractGraph.Tree v_a4eI e_a4eJ)
        sat_s4HW
        (Utils.AbstractGraph.subtrees @ v_a4eI @ e_a4eJ)

Rec {
-- RHS size: {terms: 23, types: 54, coercions: 0, joins: 0/3}
Utils.AbstractGraph.allTreeNodes [Occ=LoopBreaker]
  :: forall v e. Utils.AbstractGraph.Tree v e -> [v]
[GblId, Arity=1, Unf=OtherCon []]
Utils.AbstractGraph.allTreeNodes
  = \ (@ v_a4eU)
      (@ e_a4eV)
      (t_s4HX :: Utils.AbstractGraph.Tree v_a4eU e_a4eV) ->
      let {
        sat_s4I6 [Occ=Once] :: [v_a4eU]
        [LclId]
        sat_s4I6
          = let {
              sat_s4I5 [Occ=Once] :: [Utils.AbstractGraph.Tree v_a4eU e_a4eV]
              [LclId]
              sat_s4I5
                = case t_s4HX of
                  { Utils.AbstractGraph.Tree _ [Occ=Dead] edges_s4I4 [Occ=Once] ->
                  GHC.Base.map
                    @ (e_a4eV, Utils.AbstractGraph.Tree v_a4eU e_a4eV)
                    @ (Utils.AbstractGraph.Tree v_a4eU e_a4eV)
                    (Data.Tuple.snd
                       @ e_a4eV @ (Utils.AbstractGraph.Tree v_a4eU e_a4eV))
                    edges_s4I4
                  } } in
            GHC.Base.>>=
              @ []
              GHC.Base.$fMonad[]
              @ (Utils.AbstractGraph.Tree v_a4eU e_a4eV)
              @ v_a4eU
              sat_s4I5
              (Utils.AbstractGraph.allTreeNodes @ v_a4eU @ e_a4eV) } in
      let {
        sat_s4I1 [Occ=Once] :: v_a4eU
        [LclId]
        sat_s4I1
          = case t_s4HX of
            { Utils.AbstractGraph.Tree root_s4HZ [Occ=Once] _ [Occ=Dead] ->
            root_s4HZ
            } } in
      GHC.Types.: @ v_a4eU sat_s4I1 sat_s4I6
end Rec }

Rec {
-- RHS size: {terms: 41, types: 105, coercions: 0, joins: 0/6}
Utils.AbstractGraph.mapTreeNodes [Occ=LoopBreaker]
  :: forall v w e.
     (v -> w)
     -> Utils.AbstractGraph.Tree v e -> Utils.AbstractGraph.Tree w e
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
Utils.AbstractGraph.mapTreeNodes
  = \ (@ v_a4em)
      (@ w_a4en)
      (@ e_a4eo)
      (f_s4I7 :: v_a4em -> w_a4en)
      (ds_s4I8 [Occ=Once!] :: Utils.AbstractGraph.Tree v_a4em e_a4eo) ->
      case ds_s4I8 of
      { Utils.AbstractGraph.Tree root_s4Ia [Occ=Once]
                                 edges_s4Ib [Occ=Once] ->
      let {
        sat_s4Io [Occ=Once]
          :: [(e_a4eo, Utils.AbstractGraph.Tree w_a4en e_a4eo)]
        [LclId]
        sat_s4Io
          = letrec {
              ds1_s4Id [Occ=LoopBreaker]
                :: [(e_a4eo, Utils.AbstractGraph.Tree v_a4em e_a4eo)]
                   -> [(e_a4eo, Utils.AbstractGraph.Tree w_a4en e_a4eo)]
              [LclId, Arity=1, Unf=OtherCon []]
              ds1_s4Id
                = \ (ds2_s4Ie [Occ=Once!]
                       :: [(e_a4eo, Utils.AbstractGraph.Tree v_a4em e_a4eo)]) ->
                    case ds2_s4Ie of {
                      [] ->
                        GHC.Types.[] @ (e_a4eo, Utils.AbstractGraph.Tree w_a4en e_a4eo);
                      : ds4_s4Ig [Occ=Once!] ds5_s4Ih [Occ=Once] ->
                        case ds4_s4Ig of
                        { (edge_s4Ij [Occ=Once], subtree_s4Ik [Occ=Once]) ->
                        let {
                          sat_s4In [Occ=Once]
                            :: [(e_a4eo, Utils.AbstractGraph.Tree w_a4en e_a4eo)]
                          [LclId]
                          sat_s4In = ds1_s4Id ds5_s4Ih } in
                        let {
                          sat_s4Il [Occ=Once] :: Utils.AbstractGraph.Tree w_a4en e_a4eo
                          [LclId]
                          sat_s4Il
                            = Utils.AbstractGraph.mapTreeNodes
                                @ v_a4em @ w_a4en @ e_a4eo f_s4I7 subtree_s4Ik } in
                        let {
                          sat_s4Im [Occ=Once]
                            :: (e_a4eo, Utils.AbstractGraph.Tree w_a4en e_a4eo)
                          [LclId]
                          sat_s4Im = (edge_s4Ij, sat_s4Il) } in
                        GHC.Types.:
                          @ (e_a4eo, Utils.AbstractGraph.Tree w_a4en e_a4eo)
                          sat_s4Im
                          sat_s4In
                        }
                    }; } in
            ds1_s4Id edges_s4Ib } in
      let {
        sat_s4Ic [Occ=Once] :: w_a4en
        [LclId]
        sat_s4Ic = f_s4I7 root_s4Ia } in
      Utils.AbstractGraph.Tree @ w_a4en @ e_a4eo sat_s4Ic sat_s4Io
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule1_r4Dd :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule1_r4Dd = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule2_r4De :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule2_r4De = GHC.Types.TrNameS $trModule1_r4Dd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule3_r4Df :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule3_r4Df = "Utils.AbstractGraph"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule4_r4Dg :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule4_r4Dg = GHC.Types.TrNameS $trModule3_r4Df

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Utils.AbstractGraph.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Utils.AbstractGraph.$trModule
  = GHC.Types.Module $trModule2_r4De $trModule4_r4Dg

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_r4Dh :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep_r4Dh = GHC.Types.KindRepVar 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep1_r4Di :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep1_r4Di = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep2_r4Dj :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep2_r4Dj
  = GHC.Types.:
      @ GHC.Types.KindRep $krep1_r4Di (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_r4Dk :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep3_r4Dk
  = GHC.Types.: @ GHC.Types.KindRep $krep_r4Dh $krep2_r4Dj

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_r4Dl :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep4_r4Dl
  = GHC.Types.: @ GHC.Types.KindRep $krep1_r4Di $krep3_r4Dk

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5_r4Dm :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep5_r4Dm
  = GHC.Types.KindRepTyConApp GHC.Tuple.$tc(,,) $krep4_r4Dl

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep6_r4Dn :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep6_r4Dn
  = GHC.Types.:
      @ GHC.Types.KindRep $krep5_r4Dm (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_r4Do :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep7_r4Do = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep6_r4Dn

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep8_r4Dp :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep8_r4Dp
  = GHC.Types.:
      @ GHC.Types.KindRep $krep1_r4Di (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_r4Dq :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep9_r4Dq = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep8_r4Dp

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcGraph1_r4Dr :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcGraph1_r4Dr = "Graph"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcGraph2_r4Ds :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcGraph2_r4Ds = GHC.Types.TrNameS $tcGraph1_r4Dr

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Utils.AbstractGraph.$tcGraph :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Utils.AbstractGraph.$tcGraph
  = GHC.Types.TyCon
      11750601768977025181##
      11539868905161674652##
      Utils.AbstractGraph.$trModule
      $tcGraph2_r4Ds
      0#
      GHC.Types.krep$*->*->*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep10_r4Dt :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep10_r4Dt
  = GHC.Types.:
      @ GHC.Types.KindRep $krep_r4Dh (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep11_r4Du :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep11_r4Du
  = GHC.Types.: @ GHC.Types.KindRep $krep1_r4Di $krep10_r4Dt

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_r4Dv :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep12_r4Dv
  = GHC.Types.KindRepTyConApp
      Utils.AbstractGraph.$tcGraph $krep11_r4Du

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_r4Dw :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep13_r4Dw = GHC.Types.KindRepFun $krep7_r4Do $krep12_r4Dv

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_r4Dx :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep14_r4Dx = GHC.Types.KindRepFun $krep9_r4Dq $krep13_r4Dw

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Graph1_r4Dy :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Graph1_r4Dy = "'Graph"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Graph2_r4Dz :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Graph2_r4Dz = GHC.Types.TrNameS $tc'Graph1_r4Dy

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Utils.AbstractGraph.$tc'Graph :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Utils.AbstractGraph.$tc'Graph
  = GHC.Types.TyCon
      17329342475042821334##
      15132150088727508783##
      Utils.AbstractGraph.$trModule
      $tc'Graph2_r4Dz
      2#
      $krep14_r4Dx

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree1_r4DA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcTree1_r4DA = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTree2_r4DB :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcTree2_r4DB = GHC.Types.TrNameS $tcTree1_r4DA

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Utils.AbstractGraph.$tcTree :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Utils.AbstractGraph.$tcTree
  = GHC.Types.TyCon
      6515252302738829926##
      7116435001695257579##
      Utils.AbstractGraph.$trModule
      $tcTree2_r4DB
      0#
      GHC.Types.krep$*->*->*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep15_r4DC :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep15_r4DC
  = GHC.Types.:
      @ GHC.Types.KindRep $krep_r4Dh (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep16_r4DD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep16_r4DD
  = GHC.Types.: @ GHC.Types.KindRep $krep1_r4Di $krep15_r4DC

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep17_r4DE :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep17_r4DE
  = GHC.Types.KindRepTyConApp
      Utils.AbstractGraph.$tcTree $krep16_r4DD

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep18_r4DF :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep18_r4DF
  = GHC.Types.:
      @ GHC.Types.KindRep $krep17_r4DE (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep19_r4DG :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep19_r4DG
  = GHC.Types.: @ GHC.Types.KindRep $krep_r4Dh $krep18_r4DF

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep20_r4DH :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep20_r4DH
  = GHC.Types.KindRepTyConApp GHC.Tuple.$tc(,) $krep19_r4DG

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep21_r4DI :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep21_r4DI
  = GHC.Types.:
      @ GHC.Types.KindRep $krep20_r4DH (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep22_r4DJ :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep22_r4DJ
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep21_r4DI

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep23_r4DK :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep23_r4DK = GHC.Types.KindRepFun $krep22_r4DJ $krep17_r4DE

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep24_r4DL :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep24_r4DL = GHC.Types.KindRepFun $krep1_r4Di $krep23_r4DK

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Tree1_r4DM :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Tree1_r4DM = "'Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Tree2_r4DN :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Tree2_r4DN = GHC.Types.TrNameS $tc'Tree1_r4DM

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Utils.AbstractGraph.$tc'Tree :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Utils.AbstractGraph.$tc'Tree
  = GHC.Types.TyCon
      1962891149104463300##
      12402799480339590078##
      Utils.AbstractGraph.$trModule
      $tc'Tree2_r4DN
      2#
      $krep24_r4DL

-- RHS size: {terms: 7, types: 13, coercions: 0, joins: 0/0}
Utils.AbstractGraph.Graph
  :: forall v e. [v] -> [(v, e, v)] -> Utils.AbstractGraph.Graph v e
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []]
Utils.AbstractGraph.Graph
  = \ (@ v_a3Ni)
      (@ e_a3Nj)
      (eta_B2 [Occ=Once] :: [v_a3Ni[sk:0]])
      (eta_B1 [Occ=Once]
         :: [(v_a3Ni[sk:0], e_a3Nj[sk:0], v_a3Ni[sk:0])]) ->
      Utils.AbstractGraph.Graph @ v_a3Ni @ e_a3Nj eta_B2 eta_B1

-- RHS size: {terms: 7, types: 13, coercions: 0, joins: 0/0}
Utils.AbstractGraph.Tree
  :: forall v e.
     v
     -> [(e, Utils.AbstractGraph.Tree v e)]
     -> Utils.AbstractGraph.Tree v e
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []]
Utils.AbstractGraph.Tree
  = \ (@ v_a3Ng)
      (@ e_a3Nh)
      (eta_B2 [Occ=Once] :: v_a3Ng[sk:0])
      (eta_B1 [Occ=Once]
         :: [(e_a3Nh[sk:0],
              Utils.AbstractGraph.Tree v_a3Ng[sk:0] e_a3Nh[sk:0])]) ->
      Utils.AbstractGraph.Tree @ v_a3Ng @ e_a3Nh eta_B2 eta_B1



[6 of 9] Compiling FDB.GADTForall   ( FDB/GADTForall.hs, FDB/GADTForall.o )

==================== CorePrep ====================
Result size of CorePrep
  = {terms: 1,993, types: 2,169, coercions: 121, joins: 0/82}

-- RHS size: {terms: 4, types: 7, coercions: 3, joins: 0/0}
FDB.GADTForall.|><| [InlPrag=INLINE]
  :: forall a b.
     FDB.GADTForall.NatJoin a b =>
     FDB.GADTForall.Q a -> FDB.GADTForall.Q b -> FDB.GADTForall.Q (a, b)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []]
FDB.GADTForall.|><|
  = \ (@ a_a5iq)
      (@ b_a5ir)
      (v_s5VY [Occ=Once] :: FDB.GADTForall.NatJoin a_a5iq b_a5ir) ->
      v_s5VY
      `cast` (FDB.GADTForall.N:NatJoin[0] <a_a5iq>_N <b_a5ir>_N
              :: FDB.GADTForall.NatJoin a_a5iq b_a5ir
                 ~R# (FDB.GADTForall.Q a_a5iq
                      -> FDB.GADTForall.Q b_a5ir -> FDB.GADTForall.Q (a_a5iq, b_a5ir)))

-- RHS size: {terms: 7, types: 10, coercions: 0, joins: 0/0}
FDB.GADTForall.$WMap [InlPrag=INLINE[2]]
  :: forall b a. (b -> a) -> FDB.GADTForall.Q b -> FDB.GADTForall.Q a
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=OtherCon []]
FDB.GADTForall.$WMap
  = \ (@ b_X5iG)
      (@ a_a5iG)
      (dt_s5VZ [Occ=Once] :: b_X5iG -> a_a5iG)
      (dt_s5W0 [Occ=Once] :: FDB.GADTForall.Q b_X5iG) ->
      FDB.GADTForall.Map @ a_a5iG @ b_X5iG dt_s5VZ dt_s5W0

-- RHS size: {terms: 7, types: 14, coercions: 4, joins: 0/0}
FDB.GADTForall.$WGroupBy [InlPrag=INLINE[2]]
  :: forall v k.
     (v -> k)
     -> FDB.GADTForall.Q v -> FDB.GADTForall.Q (k, FDB.GADTForall.Q v)
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=OtherCon []]
FDB.GADTForall.$WGroupBy
  = \ (@ v_X5iJ)
      (@ k_X5iL)
      (dt_s5W1 [Occ=Once] :: v_X5iJ -> k_X5iL)
      (dt_s5W2 [Occ=Once] :: FDB.GADTForall.Q v_X5iJ) ->
      FDB.GADTForall.GroupBy
        @ (k_X5iL, FDB.GADTForall.Q v_X5iJ)
        @ v_X5iJ
        @ k_X5iL
        @~ (<(k_X5iL, FDB.GADTForall.Q v_X5iJ)>_N
            :: (k_X5iL, FDB.GADTForall.Q v_X5iJ)
               GHC.Prim.~# (k_X5iL, FDB.GADTForall.Q v_X5iJ))
        dt_s5W1
        dt_s5W2

-- RHS size: {terms: 7, types: 11, coercions: 0, joins: 0/0}
FDB.GADTForall.$WMapSQ [InlPrag=INLINE[2]]
  :: forall v b.
     (v -> FDB.GADTForall.SQ b)
     -> FDB.GADTForall.Q v -> FDB.GADTForall.Q b
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=OtherCon []]
FDB.GADTForall.$WMapSQ
  = \ (@ v_X5iL)
      (@ b_a5iL)
      (dt_s5W3 [Occ=Once] :: v_X5iL -> FDB.GADTForall.SQ b_a5iL)
      (dt_s5W4 [Occ=Once] :: FDB.GADTForall.Q v_X5iL) ->
      FDB.GADTForall.MapSQ @ b_a5iL @ v_X5iL dt_s5W3 dt_s5W4

-- RHS size: {terms: 9, types: 12, coercions: 0, joins: 0/0}
FDB.GADTForall.$WOrderBy [InlPrag=INLINE[2]]
  :: forall b a.
     GHC.Classes.Ord b =>
     (a -> b) -> FDB.GADTForall.Q a -> FDB.GADTForall.Q a
[GblId[DataConWrapper],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []]
FDB.GADTForall.$WOrderBy
  = \ (@ b_X5iO)
      (@ a_a5iO)
      (dt_s5W5 [Occ=Once] :: GHC.Classes.Ord b_X5iO)
      (dt_s5W6 [Occ=Once] :: a_a5iO -> b_X5iO)
      (dt_s5W7 [Occ=Once] :: FDB.GADTForall.Q a_a5iO) ->
      FDB.GADTForall.OrderBy @ a_a5iO @ b_X5iO dt_s5W5 dt_s5W6 dt_s5W7

-- RHS size: {terms: 9, types: 11, coercions: 0, joins: 0/0}
FDB.GADTForall.$WTake [InlPrag=INLINE[2]]
  :: forall n a.
     GHC.Real.Integral n =>
     n -> FDB.GADTForall.Q a -> FDB.GADTForall.Q a
[GblId[DataConWrapper],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []]
FDB.GADTForall.$WTake
  = \ (@ n_X5iQ)
      (@ a_a5iQ)
      (dt_s5W8 [Occ=Once] :: GHC.Real.Integral n_X5iQ)
      (dt_s5W9 [Occ=Once] :: n_X5iQ)
      (dt_s5Wa [Occ=Once] :: FDB.GADTForall.Q a_a5iQ) ->
      FDB.GADTForall.Take @ a_a5iQ @ n_X5iQ dt_s5W8 dt_s5W9 dt_s5Wa

-- RHS size: {terms: 4, types: 7, coercions: 2, joins: 0/0}
FDB.GADTForall.$WFetchRow [InlPrag=INLINE[2]]
  :: forall a.
     FDB.GADTForall.RowRef a -> FDB.GADTForall.SQ (FDB.GADTForall.Row a)
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=OtherCon []]
FDB.GADTForall.$WFetchRow
  = \ (@ a_X5iA)
      (dt_s5Wb [Occ=Once] :: FDB.GADTForall.RowRef a_X5iA) ->
      FDB.GADTForall.FetchRow
        @ (FDB.GADTForall.Row a_X5iA)
        @ a_X5iA
        @~ (<FDB.GADTForall.Row a_X5iA>_N
            :: FDB.GADTForall.Row a_X5iA GHC.Prim.~# FDB.GADTForall.Row a_X5iA)
        dt_s5Wb

-- RHS size: {terms: 8, types: 15, coercions: 0, joins: 0/0}
FDB.GADTForall.$WStateFold [InlPrag=INLINE[2]]
  :: forall a b s.
     FDB.GADTForall.Agg a b s
     -> FDB.GADTForall.Q a -> FDB.GADTForall.SQ b
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=OtherCon []]
FDB.GADTForall.$WStateFold
  = \ (@ a_X5iB)
      (@ b_a5iB)
      (@ s_X5iE)
      (dt_s5Wc [Occ=Once] :: FDB.GADTForall.Agg a_X5iB b_a5iB s_X5iE)
      (dt_s5Wd [Occ=Once] :: FDB.GADTForall.Q a_X5iB) ->
      FDB.GADTForall.StateFold @ b_a5iB @ a_X5iB @ s_X5iE dt_s5Wc dt_s5Wd

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
FDB.GADTForall.$fFunctorQ [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Functor FDB.GADTForall.Q
[GblId[DFunId]]
FDB.GADTForall.$fFunctorQ
  = GHC.Base.C:Functor
      @ FDB.GADTForall.Q FDB.GADTForall.$WMap $c<$_r5Nb

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
$c<$_r5Nb
  :: forall a b. a -> FDB.GADTForall.Q b -> FDB.GADTForall.Q a
[GblId]
$c<$_r5Nb
  = \ (@ a_a5ME) (@ b_a5MF) ->
      GHC.Base.$dm<$
        @ FDB.GADTForall.Q FDB.GADTForall.$fFunctorQ @ a_a5ME @ b_a5MF
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Wl :: GHC.Types.Int
[LclId]
sat_s5Wl = GHC.Types.I# 20#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Wk :: GHC.Types.Int
[LclId]
sat_s5Wk = GHC.Types.I# 82#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Wj :: GHC.Types.Int
[LclId]
sat_s5Wj = GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Wi :: GHC.Types.Int
[LclId]
sat_s5Wi = GHC.Types.I# 82#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Wh :: [GHC.Types.Char]
[LclId]
sat_s5Wh = GHC.CString.unpackCString# "./FDB/GADTForall.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Wg :: [GHC.Types.Char]
[LclId]
sat_s5Wg = GHC.CString.unpackCString# "FDB.GADTForall"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Wf :: [GHC.Types.Char]
[LclId]
sat_s5Wf = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s5Wm :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s5Wm
  = GHC.Stack.Types.SrcLoc
      sat_s5Wf sat_s5Wg sat_s5Wh sat_s5Wi sat_s5Wj sat_s5Wk sat_s5Wl

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5We :: [GHC.Types.Char]
[LclId]
sat_s5We = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s5Wn :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s5Wn = (sat_s5We, sat_s5Wm)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP_r5T0 :: GHC.Stack.Types.CallStack
[GblId]
$dIP_r5T0
  = GHC.Stack.Types.pushCallStack
      sat_s5Wn GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 4, types: 12, coercions: 4, joins: 0/0}
$c<*>_r5T1
  :: forall a b.
     FDB.GADTForall.Q (a -> b)
     -> FDB.GADTForall.Q a -> FDB.GADTForall.Q b
[GblId]
$c<*>_r5T1
  = \ (@ a_a5LL) (@ b_a5LM) ->
      GHC.Err.undefined
        @ 'GHC.Types.LiftedRep
        @ (FDB.GADTForall.Q (a_a5LL -> b_a5LM)
           -> FDB.GADTForall.Q a_a5LL -> FDB.GADTForall.Q b_a5LM)
        ($dIP_r5T0
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Wv :: GHC.Types.Int
[LclId]
sat_s5Wv = GHC.Types.I# 19#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Wu :: GHC.Types.Int
[LclId]
sat_s5Wu = GHC.Types.I# 81#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Wt :: GHC.Types.Int
[LclId]
sat_s5Wt = GHC.Types.I# 10#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Ws :: GHC.Types.Int
[LclId]
sat_s5Ws = GHC.Types.I# 81#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Wr :: [GHC.Types.Char]
[LclId]
sat_s5Wr = GHC.CString.unpackCString# "./FDB/GADTForall.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Wq :: [GHC.Types.Char]
[LclId]
sat_s5Wq = GHC.CString.unpackCString# "FDB.GADTForall"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Wp :: [GHC.Types.Char]
[LclId]
sat_s5Wp = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s5Ww :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s5Ww
  = GHC.Stack.Types.SrcLoc
      sat_s5Wp sat_s5Wq sat_s5Wr sat_s5Ws sat_s5Wt sat_s5Wu sat_s5Wv

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Wo :: [GHC.Types.Char]
[LclId]
sat_s5Wo = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s5Wx :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s5Wx = (sat_s5Wo, sat_s5Ww)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP1_r5T2 :: GHC.Stack.Types.CallStack
[GblId]
$dIP1_r5T2
  = GHC.Stack.Types.pushCallStack
      sat_s5Wx GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 3, types: 6, coercions: 4, joins: 0/0}
$cpure_r5T3 :: forall a. a -> FDB.GADTForall.Q a
[GblId]
$cpure_r5T3
  = \ (@ a_a5LC) ->
      GHC.Err.undefined
        @ 'GHC.Types.LiftedRep
        @ (a_a5LC -> FDB.GADTForall.Q a_a5LC)
        ($dIP1_r5T2
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))

Rec {
-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
FDB.GADTForall.$fApplicativeQ [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Applicative FDB.GADTForall.Q
[GblId[DFunId]]
FDB.GADTForall.$fApplicativeQ
  = GHC.Base.C:Applicative
      @ FDB.GADTForall.Q
      FDB.GADTForall.$fFunctorQ
      $cpure_r5T3
      $c<*>_r5T1
      $cliftA2_r5T6
      $c*>_r5T4
      $c<*_r5T5

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
$c*>_r5T4
  :: forall a b.
     FDB.GADTForall.Q a -> FDB.GADTForall.Q b -> FDB.GADTForall.Q b
[GblId]
$c*>_r5T4
  = \ (@ a_a5M8) (@ b_a5M9) ->
      GHC.Base.$dm*>
        @ FDB.GADTForall.Q FDB.GADTForall.$fApplicativeQ @ a_a5M8 @ b_a5M9

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
$c<*_r5T5
  :: forall a b.
     FDB.GADTForall.Q a -> FDB.GADTForall.Q b -> FDB.GADTForall.Q a
[GblId]
$c<*_r5T5
  = \ (@ a_a5Mj) (@ b_a5Mk) ->
      GHC.Base.$dm<*
        @ FDB.GADTForall.Q FDB.GADTForall.$fApplicativeQ @ a_a5Mj @ b_a5Mk

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
$cliftA2_r5T6
  :: forall a b c.
     (a -> b -> c)
     -> FDB.GADTForall.Q a -> FDB.GADTForall.Q b -> FDB.GADTForall.Q c
[GblId]
$cliftA2_r5T6
  = \ (@ a_a5LV) (@ b_a5LW) (@ c_a5LX) ->
      GHC.Base.$dmliftA2
        @ FDB.GADTForall.Q
        FDB.GADTForall.$fApplicativeQ
        @ a_a5LV
        @ b_a5LW
        @ c_a5LX
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WF :: GHC.Types.Int
[LclId]
sat_s5WF = GHC.Types.I# 20#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WE :: GHC.Types.Int
[LclId]
sat_s5WE = GHC.Types.I# 85#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WD :: GHC.Types.Int
[LclId]
sat_s5WD = GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WC :: GHC.Types.Int
[LclId]
sat_s5WC = GHC.Types.I# 85#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WB :: [GHC.Types.Char]
[LclId]
sat_s5WB = GHC.CString.unpackCString# "./FDB/GADTForall.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WA :: [GHC.Types.Char]
[LclId]
sat_s5WA = GHC.CString.unpackCString# "FDB.GADTForall"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Wz :: [GHC.Types.Char]
[LclId]
sat_s5Wz = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s5WG :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s5WG
  = GHC.Stack.Types.SrcLoc
      sat_s5Wz sat_s5WA sat_s5WB sat_s5WC sat_s5WD sat_s5WE sat_s5WF

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Wy :: [GHC.Types.Char]
[LclId]
sat_s5Wy = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s5WH :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s5WH = (sat_s5Wy, sat_s5WG)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP2_r5T7 :: GHC.Stack.Types.CallStack
[GblId]
$dIP2_r5T7
  = GHC.Stack.Types.pushCallStack
      sat_s5WH GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 4, types: 12, coercions: 4, joins: 0/0}
$c>>=_r5T8
  :: forall a b.
     FDB.GADTForall.Q a
     -> (a -> FDB.GADTForall.Q b) -> FDB.GADTForall.Q b
[GblId]
$c>>=_r5T8
  = \ (@ a_a5KT) (@ b_a5KU) ->
      GHC.Err.undefined
        @ 'GHC.Types.LiftedRep
        @ (FDB.GADTForall.Q a_a5KT
           -> (a_a5KT -> FDB.GADTForall.Q b_a5KU) -> FDB.GADTForall.Q b_a5KU)
        ($dIP2_r5T7
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))

Rec {
-- RHS size: {terms: 6, types: 1, coercions: 0, joins: 0/0}
FDB.GADTForall.$fMonadQ [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Monad FDB.GADTForall.Q
[GblId[DFunId]]
FDB.GADTForall.$fMonadQ
  = GHC.Base.C:Monad
      @ FDB.GADTForall.Q
      FDB.GADTForall.$fApplicativeQ
      $c>>=_r5T8
      $c>>_r5Tb
      $creturn_r5T9
      $cfail_r5Ta

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
$creturn_r5T9 :: forall a. a -> FDB.GADTForall.Q a
[GblId]
$creturn_r5T9
  = \ (@ a_a5Le) ->
      GHC.Base.$dmreturn
        @ FDB.GADTForall.Q FDB.GADTForall.$fMonadQ @ a_a5Le

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
$cfail_r5Ta :: forall a. GHC.Base.String -> FDB.GADTForall.Q a
[GblId]
$cfail_r5Ta
  = \ (@ a_a5Ln) ->
      GHC.Base.$dmfail
        @ FDB.GADTForall.Q FDB.GADTForall.$fMonadQ @ a_a5Ln

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
$c>>_r5Tb
  :: forall a b.
     FDB.GADTForall.Q a -> FDB.GADTForall.Q b -> FDB.GADTForall.Q b
[GblId]
$c>>_r5Tb
  = \ (@ a_a5L3) (@ b_a5L4) ->
      GHC.Base.$dm>>
        @ FDB.GADTForall.Q FDB.GADTForall.$fMonadQ @ a_a5L3 @ b_a5L4
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WP :: GHC.Types.Int
[LclId]
sat_s5WP = GHC.Types.I# 19#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WO :: GHC.Types.Int
[LclId]
sat_s5WO = GHC.Types.I# 104#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WN :: GHC.Types.Int
[LclId]
sat_s5WN = GHC.Types.I# 10#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WM :: GHC.Types.Int
[LclId]
sat_s5WM = GHC.Types.I# 104#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WL :: [GHC.Types.Char]
[LclId]
sat_s5WL = GHC.CString.unpackCString# "./FDB/GADTForall.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WK :: [GHC.Types.Char]
[LclId]
sat_s5WK = GHC.CString.unpackCString# "FDB.GADTForall"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WJ :: [GHC.Types.Char]
[LclId]
sat_s5WJ = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s5WQ :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s5WQ
  = GHC.Stack.Types.SrcLoc
      sat_s5WJ sat_s5WK sat_s5WL sat_s5WM sat_s5WN sat_s5WO sat_s5WP

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WI :: [GHC.Types.Char]
[LclId]
sat_s5WI = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s5WR :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s5WR = (sat_s5WI, sat_s5WQ)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP3_r5Tc :: GHC.Stack.Types.CallStack
[GblId]
$dIP3_r5Tc
  = GHC.Stack.Types.pushCallStack
      sat_s5WR GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 4, types: 11, coercions: 4, joins: 0/0}
$cfmap_r5Td
  :: forall a b.
     (a -> b) -> FDB.GADTForall.SQ a -> FDB.GADTForall.SQ b
[GblId]
$cfmap_r5Td
  = \ (@ a_a5Kn) (@ b_a5Ko) ->
      GHC.Err.undefined
        @ 'GHC.Types.LiftedRep
        @ ((a_a5Kn -> b_a5Ko)
           -> FDB.GADTForall.SQ a_a5Kn -> FDB.GADTForall.SQ b_a5Ko)
        ($dIP3_r5Tc
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
FDB.GADTForall.$fFunctorSQ [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Functor FDB.GADTForall.SQ
[GblId[DFunId]]
FDB.GADTForall.$fFunctorSQ
  = GHC.Base.C:Functor @ FDB.GADTForall.SQ $cfmap_r5Td $c<$1_r5Te

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
$c<$1_r5Te
  :: forall a b. a -> FDB.GADTForall.SQ b -> FDB.GADTForall.SQ a
[GblId]
$c<$1_r5Te
  = \ (@ a_a5KC) (@ b_a5KD) ->
      GHC.Base.$dm<$
        @ FDB.GADTForall.SQ FDB.GADTForall.$fFunctorSQ @ a_a5KC @ b_a5KD
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WZ :: GHC.Types.Int
[LclId]
sat_s5WZ = GHC.Types.I# 20#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WY :: GHC.Types.Int
[LclId]
sat_s5WY = GHC.Types.I# 108#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WX :: GHC.Types.Int
[LclId]
sat_s5WX = GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WW :: GHC.Types.Int
[LclId]
sat_s5WW = GHC.Types.I# 108#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WV :: [GHC.Types.Char]
[LclId]
sat_s5WV = GHC.CString.unpackCString# "./FDB/GADTForall.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WU :: [GHC.Types.Char]
[LclId]
sat_s5WU = GHC.CString.unpackCString# "FDB.GADTForall"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WT :: [GHC.Types.Char]
[LclId]
sat_s5WT = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s5X0 :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s5X0
  = GHC.Stack.Types.SrcLoc
      sat_s5WT sat_s5WU sat_s5WV sat_s5WW sat_s5WX sat_s5WY sat_s5WZ

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5WS :: [GHC.Types.Char]
[LclId]
sat_s5WS = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s5X1 :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s5X1 = (sat_s5WS, sat_s5X0)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP4_r5Tf :: GHC.Stack.Types.CallStack
[GblId]
$dIP4_r5Tf
  = GHC.Stack.Types.pushCallStack
      sat_s5X1 GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 4, types: 12, coercions: 4, joins: 0/0}
$c<*>1_r5Tg
  :: forall a b.
     FDB.GADTForall.SQ (a -> b)
     -> FDB.GADTForall.SQ a -> FDB.GADTForall.SQ b
[GblId]
$c<*>1_r5Tg
  = \ (@ a_a5Jj) (@ b_a5Jk) ->
      GHC.Err.undefined
        @ 'GHC.Types.LiftedRep
        @ (FDB.GADTForall.SQ (a_a5Jj -> b_a5Jk)
           -> FDB.GADTForall.SQ a_a5Jj -> FDB.GADTForall.SQ b_a5Jk)
        ($dIP4_r5Tf
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5X9 :: GHC.Types.Int
[LclId]
sat_s5X9 = GHC.Types.I# 19#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5X8 :: GHC.Types.Int
[LclId]
sat_s5X8 = GHC.Types.I# 107#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5X7 :: GHC.Types.Int
[LclId]
sat_s5X7 = GHC.Types.I# 10#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5X6 :: GHC.Types.Int
[LclId]
sat_s5X6 = GHC.Types.I# 107#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5X5 :: [GHC.Types.Char]
[LclId]
sat_s5X5 = GHC.CString.unpackCString# "./FDB/GADTForall.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5X4 :: [GHC.Types.Char]
[LclId]
sat_s5X4 = GHC.CString.unpackCString# "FDB.GADTForall"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5X3 :: [GHC.Types.Char]
[LclId]
sat_s5X3 = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s5Xa :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s5Xa
  = GHC.Stack.Types.SrcLoc
      sat_s5X3 sat_s5X4 sat_s5X5 sat_s5X6 sat_s5X7 sat_s5X8 sat_s5X9

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5X2 :: [GHC.Types.Char]
[LclId]
sat_s5X2 = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s5Xb :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s5Xb = (sat_s5X2, sat_s5Xa)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP5_r5Th :: GHC.Stack.Types.CallStack
[GblId]
$dIP5_r5Th
  = GHC.Stack.Types.pushCallStack
      sat_s5Xb GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 3, types: 6, coercions: 4, joins: 0/0}
$cpure1_r5Ti :: forall a. a -> FDB.GADTForall.SQ a
[GblId]
$cpure1_r5Ti
  = \ (@ a_a5J8) ->
      GHC.Err.undefined
        @ 'GHC.Types.LiftedRep
        @ (a_a5J8 -> FDB.GADTForall.SQ a_a5J8)
        ($dIP5_r5Th
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))

Rec {
-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
FDB.GADTForall.$fApplicativeSQ [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Applicative FDB.GADTForall.SQ
[GblId[DFunId]]
FDB.GADTForall.$fApplicativeSQ
  = GHC.Base.C:Applicative
      @ FDB.GADTForall.SQ
      FDB.GADTForall.$fFunctorSQ
      $cpure1_r5Ti
      $c<*>1_r5Tg
      $cliftA1_r5Tl
      $c*>1_r5Tj
      $c<*1_r5Tk

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
$c*>1_r5Tj
  :: forall a b.
     FDB.GADTForall.SQ a -> FDB.GADTForall.SQ b -> FDB.GADTForall.SQ b
[GblId]
$c*>1_r5Tj
  = \ (@ a_a5JS) (@ b_a5JT) ->
      GHC.Base.$dm*>
        @ FDB.GADTForall.SQ
        FDB.GADTForall.$fApplicativeSQ
        @ a_a5JS
        @ b_a5JT

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
$c<*1_r5Tk
  :: forall a b.
     FDB.GADTForall.SQ a -> FDB.GADTForall.SQ b -> FDB.GADTForall.SQ a
[GblId]
$c<*1_r5Tk
  = \ (@ a_a5K8) (@ b_a5K9) ->
      GHC.Base.$dm<*
        @ FDB.GADTForall.SQ
        FDB.GADTForall.$fApplicativeSQ
        @ a_a5K8
        @ b_a5K9

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
$cliftA1_r5Tl
  :: forall a b c.
     (a -> b -> c)
     -> FDB.GADTForall.SQ a
     -> FDB.GADTForall.SQ b
     -> FDB.GADTForall.SQ c
[GblId]
$cliftA1_r5Tl
  = \ (@ a_a5JA) (@ b_a5JB) (@ c_a5JC) ->
      GHC.Base.$dmliftA2
        @ FDB.GADTForall.SQ
        FDB.GADTForall.$fApplicativeSQ
        @ a_a5JA
        @ b_a5JB
        @ c_a5JC
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Xj :: GHC.Types.Int
[LclId]
sat_s5Xj = GHC.Types.I# 20#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Xi :: GHC.Types.Int
[LclId]
sat_s5Xi = GHC.Types.I# 111#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Xh :: GHC.Types.Int
[LclId]
sat_s5Xh = GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Xg :: GHC.Types.Int
[LclId]
sat_s5Xg = GHC.Types.I# 111#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Xf :: [GHC.Types.Char]
[LclId]
sat_s5Xf = GHC.CString.unpackCString# "./FDB/GADTForall.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Xe :: [GHC.Types.Char]
[LclId]
sat_s5Xe = GHC.CString.unpackCString# "FDB.GADTForall"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Xd :: [GHC.Types.Char]
[LclId]
sat_s5Xd = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s5Xk :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s5Xk
  = GHC.Stack.Types.SrcLoc
      sat_s5Xd sat_s5Xe sat_s5Xf sat_s5Xg sat_s5Xh sat_s5Xi sat_s5Xj

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Xc :: [GHC.Types.Char]
[LclId]
sat_s5Xc = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s5Xl :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s5Xl = (sat_s5Xc, sat_s5Xk)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP6_r5Tm :: GHC.Stack.Types.CallStack
[GblId]
$dIP6_r5Tm
  = GHC.Stack.Types.pushCallStack
      sat_s5Xl GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 4, types: 12, coercions: 4, joins: 0/0}
$c>>=1_r5Tn
  :: forall a b.
     FDB.GADTForall.SQ a
     -> (a -> FDB.GADTForall.SQ b) -> FDB.GADTForall.SQ b
[GblId]
$c>>=1_r5Tn
  = \ (@ a_a5Ie) (@ b_a5If) ->
      GHC.Err.undefined
        @ 'GHC.Types.LiftedRep
        @ (FDB.GADTForall.SQ a_a5Ie
           -> (a_a5Ie -> FDB.GADTForall.SQ b_a5If)
           -> FDB.GADTForall.SQ b_a5If)
        ($dIP6_r5Tm
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))

Rec {
-- RHS size: {terms: 6, types: 1, coercions: 0, joins: 0/0}
FDB.GADTForall.$fMonadSQ [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Monad FDB.GADTForall.SQ
[GblId[DFunId]]
FDB.GADTForall.$fMonadSQ
  = GHC.Base.C:Monad
      @ FDB.GADTForall.SQ
      FDB.GADTForall.$fApplicativeSQ
      $c>>=1_r5Tn
      $c>>1_r5Tq
      $creturn1_r5To
      $cfail1_r5Tp

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
$creturn1_r5To :: forall a. a -> FDB.GADTForall.SQ a
[GblId]
$creturn1_r5To
  = \ (@ a_a5IG) ->
      GHC.Base.$dmreturn
        @ FDB.GADTForall.SQ FDB.GADTForall.$fMonadSQ @ a_a5IG

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
$cfail1_r5Tp :: forall a. GHC.Base.String -> FDB.GADTForall.SQ a
[GblId]
$cfail1_r5Tp
  = \ (@ a_a5IS) ->
      GHC.Base.$dmfail
        @ FDB.GADTForall.SQ FDB.GADTForall.$fMonadSQ @ a_a5IS

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
$c>>1_r5Tq
  :: forall a b.
     FDB.GADTForall.SQ a -> FDB.GADTForall.SQ b -> FDB.GADTForall.SQ b
[GblId]
$c>>1_r5Tq
  = \ (@ a_a5It) (@ b_a5Iu) ->
      GHC.Base.$dm>>
        @ FDB.GADTForall.SQ FDB.GADTForall.$fMonadSQ @ a_a5It @ b_a5Iu
end Rec }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$c/=_r5Tr :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId]
$c/=_r5Tr = GHC.Classes./= @ GHC.Word.Word16 GHC.Word.$fEqWord16

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$c==_r5Ts :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId]
$c==_r5Ts = GHC.Classes.== @ GHC.Word.Word16 GHC.Word.$fEqWord16

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
FDB.GADTForall.$fEqTableId [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq FDB.GADTForall.TableId
[GblId[DFunId]]
FDB.GADTForall.$fEqTableId
  = GHC.Classes.C:Eq
      @ FDB.GADTForall.TableId
      ($c==_r5Ts
       `cast` (Sym (FDB.GADTForall.N:TableId[0])
               ->_R Sym (FDB.GADTForall.N:TableId[0])
               ->_R <GHC.Types.Bool>_R
               :: (GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool)
                  ~R# (FDB.GADTForall.TableId
                       -> FDB.GADTForall.TableId -> GHC.Types.Bool)))
      ($c/=_r5Tr
       `cast` (Sym (FDB.GADTForall.N:TableId[0])
               ->_R Sym (FDB.GADTForall.N:TableId[0])
               ->_R <GHC.Types.Bool>_R
               :: (GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool)
                  ~R# (FDB.GADTForall.TableId
                       -> FDB.GADTForall.TableId -> GHC.Types.Bool)))

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$c/=1_r5Tt :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId]
$c/=1_r5Tt = GHC.Classes./= @ GHC.Word.Word64 GHC.Word.$fEqWord64

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$c==1_r5Tu :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId]
$c==1_r5Tu = GHC.Classes.== @ GHC.Word.Word64 GHC.Word.$fEqWord64

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
FDB.GADTForall.$fEqRowId [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq FDB.GADTForall.RowId
[GblId[DFunId]]
FDB.GADTForall.$fEqRowId
  = GHC.Classes.C:Eq
      @ FDB.GADTForall.RowId
      ($c==1_r5Tu
       `cast` (Sym (FDB.GADTForall.N:RowId[0])
               ->_R Sym (FDB.GADTForall.N:RowId[0])
               ->_R <GHC.Types.Bool>_R
               :: (GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool)
                  ~R# (FDB.GADTForall.RowId
                       -> FDB.GADTForall.RowId -> GHC.Types.Bool)))
      ($c/=1_r5Tt
       `cast` (Sym (FDB.GADTForall.N:RowId[0])
               ->_R Sym (FDB.GADTForall.N:RowId[0])
               ->_R <GHC.Types.Bool>_R
               :: (GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool)
                  ~R# (FDB.GADTForall.RowId
                       -> FDB.GADTForall.RowId -> GHC.Types.Bool)))

-- RHS size: {terms: 20, types: 16, coercions: 4, joins: 0/2}
$c==2_r5Tv
  :: forall a.
     FDB.GADTForall.RowRef a
     -> FDB.GADTForall.RowRef a -> GHC.Types.Bool
[GblId, Arity=2, Unf=OtherCon []]
$c==2_r5Tv
  = \ (@ a_a5HP)
      (ds_s5Xm [Occ=Once!] :: FDB.GADTForall.RowRef a_a5HP)
      (ds1_s5Xn [Occ=Once!] :: FDB.GADTForall.RowRef a_a5HP) ->
      case ds_s5Xm of
      { FDB.GADTForall.RowRef a1_s5Xp [Occ=Once] a2_s5Xq [Occ=Once] ->
      case ds1_s5Xn of
      { FDB.GADTForall.RowRef b1_s5Xs [Occ=Once] b2_s5Xt [Occ=Once] ->
      let {
        sat_s5Xv [Occ=Once] :: GHC.Types.Bool
        [LclId]
        sat_s5Xv
          = $c==1_r5Tu
              (a2_s5Xq
               `cast` (FDB.GADTForall.N:RowId[0]
                       :: FDB.GADTForall.RowId ~R# GHC.Word.Word64))
              (b2_s5Xt
               `cast` (FDB.GADTForall.N:RowId[0]
                       :: FDB.GADTForall.RowId ~R# GHC.Word.Word64)) } in
      let {
        sat_s5Xu [Occ=Once] :: GHC.Types.Bool
        [LclId]
        sat_s5Xu
          = $c==_r5Ts
              (a1_s5Xp
               `cast` (FDB.GADTForall.N:TableId[0]
                       :: FDB.GADTForall.TableId ~R# GHC.Word.Word16))
              (b1_s5Xs
               `cast` (FDB.GADTForall.N:TableId[0]
                       :: FDB.GADTForall.TableId ~R# GHC.Word.Word16)) } in
      GHC.Classes.&& sat_s5Xu sat_s5Xv
      }
      }

Rec {
-- RHS size: {terms: 4, types: 6, coercions: 0, joins: 0/0}
FDB.GADTForall.$fEqRowRef [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq (FDB.GADTForall.RowRef a)
[GblId[DFunId]]
FDB.GADTForall.$fEqRowRef
  = \ (@ a_a5HP) ->
      GHC.Classes.C:Eq
        @ (FDB.GADTForall.RowRef a_a5HP)
        ($c==2_r5Tv @ a_a5HP)
        ($c/=2_r5Tw @ a_a5HP)

-- RHS size: {terms: 3, types: 5, coercions: 0, joins: 0/0}
$c/=2_r5Tw
  :: forall a.
     FDB.GADTForall.RowRef a
     -> FDB.GADTForall.RowRef a -> GHC.Types.Bool
[GblId]
$c/=2_r5Tw
  = \ (@ a_a5HP) ->
      GHC.Classes.$dm/=
        @ (FDB.GADTForall.RowRef a_a5HP)
        (FDB.GADTForall.$fEqRowRef @ a_a5HP)
end Rec }

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
findTable1_r5Tx :: forall a. GHC.Base.String -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
findTable1_r5Tx
  = \ (@ a_a5FX) (v_s5Xw [Occ=Once] :: GHC.Base.String) -> v_s5Xw

-- RHS size: {terms: 4, types: 4, coercions: 8, joins: 0/0}
FDB.GADTForall.findTable
  :: forall a. GHC.Base.String -> FDB.GADTForall.Table a
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
FDB.GADTForall.findTable
  = (\ (@ a_a5FX) (eta_B1 [Occ=Once] :: GHC.Base.String) ->
       findTable1_r5Tx @ a_a5FX eta_B1)
    `cast` (forall (a :: <*>_N).
            <GHC.Base.String>_R ->_R Sym (FDB.GADTForall.N:Table[0] <a>_P)
            :: (forall a. GHC.Base.String -> GHC.Base.String)
               ~R# (forall a. GHC.Base.String -> FDB.GADTForall.Table a))

Rec {
-- RHS size: {terms: 25, types: 24, coercions: 0, joins: 0/2}
FDB.GADTForall.pull [Occ=LoopBreaker]
  :: forall a. FDB.GADTForall.Q a -> a
[GblId, Arity=1, Unf=OtherCon []]
FDB.GADTForall.pull
  = \ (@ a_a5FN) (rec_s5Xx [Occ=Once!] :: FDB.GADTForall.Q a_a5FN) ->
      case rec_s5Xx of wild_s5Xy [Occ=Once] {
        __DEFAULT ->
          Control.Exception.Base.patError
            @ 'GHC.Types.LiftedRep
            @ a_a5FN
            "FDB/GADTForall.hs:(36,1)-(41,27)|function pull"#;
        FDB.GADTForall.Filter p_s5Xz [Occ=Once!] q_s5XA [Occ=Once] ->
          let {
            x_s5XB :: a_a5FN
            [LclId]
            x_s5XB = FDB.GADTForall.pull @ a_a5FN q_s5XA } in
          case p_s5Xz x_s5XB of {
            GHC.Types.False -> FDB.GADTForall.pull @ a_a5FN wild_s5Xy;
            GHC.Types.True -> x_s5XB
          };
        FDB.GADTForall.Map @ b_a5FV f_s5XD [Occ=Once!] q_s5XE [Occ=Once] ->
          let {
            sat_s5XF [Occ=Once] :: b_a5FV
            [LclId]
            sat_s5XF = FDB.GADTForall.pull @ b_a5FV q_s5XE } in
          f_s5XD sat_s5XF
      }
end Rec }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
FDB.GADTForall.readT
  :: forall a. FDB.GADTForall.Table a -> FDB.GADTForall.Q a
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
FDB.GADTForall.readT
  = \ (@ a_a5iH)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.Table a_a5iH) ->
      FDB.GADTForall.Read @ a_a5iH eta_B1

-- RHS size: {terms: 7, types: 10, coercions: 0, joins: 0/0}
FDB.GADTForall.mapQ
  :: forall a b. (a -> b) -> FDB.GADTForall.Q a -> FDB.GADTForall.Q b
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
FDB.GADTForall.mapQ
  = \ (@ b_X5iG)
      (@ a_a5iG)
      (eta_B2 [Occ=Once] :: b_X5iG -> a_a5iG)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.Q b_X5iG) ->
      FDB.GADTForall.$WMap @ b_X5iG @ a_a5iG eta_B2 eta_B1

-- RHS size: {terms: 12, types: 21, coercions: 3, joins: 0/1}
FDB.GADTForall.-|><|->
  :: forall a b.
     FDB.GADTForall.NatJoin a b =>
     FDB.GADTForall.Q a -> FDB.GADTForall.Q b -> FDB.GADTForall.Q b
[GblId, Arity=3, Unf=OtherCon []]
FDB.GADTForall.-|><|->
  = \ (@ a_a5Fm)
      (@ b_a5Fn)
      ($dNatJoin_s5XG [Occ=Once] :: FDB.GADTForall.NatJoin a_a5Fm b_a5Fn)
      (x_s5XH [Occ=Once] :: FDB.GADTForall.Q a_a5Fm)
      (y_s5XI [Occ=Once] :: FDB.GADTForall.Q b_a5Fn) ->
      let {
        sat_s5XJ [Occ=Once] :: FDB.GADTForall.Q (a_a5Fm, b_a5Fn)
        [LclId]
        sat_s5XJ
          = ($dNatJoin_s5XG
             `cast` (FDB.GADTForall.N:NatJoin[0] <a_a5Fm>_N <b_a5Fn>_N
                     :: FDB.GADTForall.NatJoin a_a5Fm b_a5Fn
                        ~R# (FDB.GADTForall.Q a_a5Fm
                             -> FDB.GADTForall.Q b_a5Fn -> FDB.GADTForall.Q (a_a5Fm, b_a5Fn))))
              x_s5XH y_s5XI } in
      FDB.GADTForall.Map
        @ b_a5Fn
        @ (a_a5Fm, b_a5Fn)
        (Data.Tuple.snd @ a_a5Fm @ b_a5Fn)
        sat_s5XJ

-- RHS size: {terms: 12, types: 21, coercions: 3, joins: 0/1}
FDB.GADTForall.<-|><|-
  :: forall a b.
     FDB.GADTForall.NatJoin a b =>
     FDB.GADTForall.Q a -> FDB.GADTForall.Q b -> FDB.GADTForall.Q a
[GblId, Arity=3, Unf=OtherCon []]
FDB.GADTForall.<-|><|-
  = \ (@ a_a5Fy)
      (@ b_a5Fz)
      ($dNatJoin_s5XK [Occ=Once] :: FDB.GADTForall.NatJoin a_a5Fy b_a5Fz)
      (a1_s5XL [Occ=Once] :: FDB.GADTForall.Q a_a5Fy)
      (b1_s5XM [Occ=Once] :: FDB.GADTForall.Q b_a5Fz) ->
      let {
        sat_s5XN [Occ=Once] :: FDB.GADTForall.Q (a_a5Fy, b_a5Fz)
        [LclId]
        sat_s5XN
          = ($dNatJoin_s5XK
             `cast` (FDB.GADTForall.N:NatJoin[0] <a_a5Fy>_N <b_a5Fz>_N
                     :: FDB.GADTForall.NatJoin a_a5Fy b_a5Fz
                        ~R# (FDB.GADTForall.Q a_a5Fy
                             -> FDB.GADTForall.Q b_a5Fz -> FDB.GADTForall.Q (a_a5Fy, b_a5Fz))))
              a1_s5XL b1_s5XM } in
      FDB.GADTForall.Map
        @ a_a5Fy
        @ (a_a5Fy, b_a5Fz)
        (Data.Tuple.fst @ a_a5Fy @ b_a5Fz)
        sat_s5XN

-- RHS size: {terms: 6, types: 7, coercions: 0, joins: 0/0}
FDB.GADTForall.filterQ
  :: forall a.
     (a -> GHC.Types.Bool) -> FDB.GADTForall.Q a -> FDB.GADTForall.Q a
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
FDB.GADTForall.filterQ
  = \ (@ a_a5iE)
      (eta_B2 [Occ=Once] :: a_a5iE -> GHC.Types.Bool)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.Q a_a5iE) ->
      FDB.GADTForall.Filter @ a_a5iE eta_B2 eta_B1

-- RHS size: {terms: 8, types: 12, coercions: 0, joins: 0/0}
FDB.GADTForall.groupByWithKey
  :: forall k a.
     GHC.Classes.Ord k =>
     (a -> k)
     -> FDB.GADTForall.Q a -> FDB.GADTForall.Q (k, FDB.GADTForall.Q a)
[GblId, Arity=3, Caf=NoCafRefs, Unf=OtherCon []]
FDB.GADTForall.groupByWithKey
  = \ (@ k_a5EH)
      (@ a_a5EI)
      _ [Occ=Dead]
      (eta_B2 [Occ=Once] :: a_a5EI -> k_a5EH)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.Q a_a5EI) ->
      FDB.GADTForall.$WGroupBy @ a_a5EI @ k_a5EH eta_B2 eta_B1

-- RHS size: {terms: 11, types: 42, coercions: 0, joins: 0/1}
FDB.GADTForall.groupByQ
  :: forall k a.
     GHC.Classes.Ord k =>
     (a -> k)
     -> FDB.GADTForall.Q a -> FDB.GADTForall.Q (FDB.GADTForall.Q a)
[GblId, Arity=1, Unf=OtherCon []]
FDB.GADTForall.groupByQ
  = \ (@ k_a5EW) (@ a_a5EX) _ [Occ=Dead] ->
      let {
        sat_s5XR [Occ=Once]
          :: FDB.GADTForall.Q (k_a5EW, FDB.GADTForall.Q a_a5EX)
             -> FDB.GADTForall.Q (FDB.GADTForall.Q a_a5EX)
        [LclId]
        sat_s5XR
          = \ (dt_s5XQ [Occ=Once]
                 :: FDB.GADTForall.Q (k_a5EW, FDB.GADTForall.Q a_a5EX)) ->
              FDB.GADTForall.Map
                @ (FDB.GADTForall.Q a_a5EX)
                @ (k_a5EW, FDB.GADTForall.Q a_a5EX)
                (Data.Tuple.snd @ k_a5EW @ (FDB.GADTForall.Q a_a5EX))
                dt_s5XQ } in
      FDB.Utils..:
        @ (FDB.GADTForall.Q (k_a5EW, FDB.GADTForall.Q a_a5EX))
        @ (FDB.GADTForall.Q (FDB.GADTForall.Q a_a5EX))
        @ (a_a5EX -> k_a5EW)
        @ (FDB.GADTForall.Q a_a5EX)
        sat_s5XR
        (FDB.GADTForall.$WGroupBy @ a_a5EX @ k_a5EW)

-- RHS size: {terms: 9, types: 12, coercions: 0, joins: 0/0}
FDB.GADTForall.orderBy
  :: forall b a.
     GHC.Classes.Ord b =>
     (a -> b) -> FDB.GADTForall.Q a -> FDB.GADTForall.Q a
[GblId, Arity=3, Caf=NoCafRefs, Unf=OtherCon []]
FDB.GADTForall.orderBy
  = \ (@ b_X5iO)
      (@ a_a5iO)
      (eta_B3 [Occ=Once] :: GHC.Classes.Ord b_X5iO)
      (eta_B2 [Occ=Once] :: a_a5iO -> b_X5iO)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.Q a_a5iO) ->
      FDB.GADTForall.$WOrderBy @ b_X5iO @ a_a5iO eta_B3 eta_B2 eta_B1

-- RHS size: {terms: 9, types: 11, coercions: 0, joins: 0/0}
FDB.GADTForall.takeQ
  :: forall n a.
     GHC.Real.Integral n =>
     n -> FDB.GADTForall.Q a -> FDB.GADTForall.Q a
[GblId, Arity=3, Caf=NoCafRefs, Unf=OtherCon []]
FDB.GADTForall.takeQ
  = \ (@ n_X5iQ)
      (@ a_a5iQ)
      (eta_B3 [Occ=Once] :: GHC.Real.Integral n_X5iQ)
      (eta_B2 [Occ=Once] :: n_X5iQ)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.Q a_a5iQ) ->
      FDB.GADTForall.$WTake @ n_X5iQ @ a_a5iQ eta_B3 eta_B2 eta_B1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5XZ :: GHC.Types.Int
[LclId]
sat_s5XZ = GHC.Types.I# 19#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5XY :: GHC.Types.Int
[LclId]
sat_s5XY = GHC.Types.I# 65#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5XX :: GHC.Types.Int
[LclId]
sat_s5XX = GHC.Types.I# 10#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5XW :: GHC.Types.Int
[LclId]
sat_s5XW = GHC.Types.I# 65#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5XV :: [GHC.Types.Char]
[LclId]
sat_s5XV = GHC.CString.unpackCString# "./FDB/GADTForall.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5XU :: [GHC.Types.Char]
[LclId]
sat_s5XU = GHC.CString.unpackCString# "FDB.GADTForall"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5XT :: [GHC.Types.Char]
[LclId]
sat_s5XT = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s5Y0 :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s5Y0
  = GHC.Stack.Types.SrcLoc
      sat_s5XT sat_s5XU sat_s5XV sat_s5XW sat_s5XX sat_s5XY sat_s5XZ

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5XS :: [GHC.Types.Char]
[LclId]
sat_s5XS = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s5Y1 :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s5Y1 = (sat_s5XS, sat_s5Y0)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP7_r5Ty :: GHC.Stack.Types.CallStack
[GblId]
$dIP7_r5Ty
  = GHC.Stack.Types.pushCallStack
      sat_s5Y1 GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 3, types: 5, coercions: 4, joins: 0/0}
FDB.GADTForall.emptyQ :: forall a. FDB.GADTForall.Q a
[GblId]
FDB.GADTForall.emptyQ
  = \ (@ a_a5DU) ->
      GHC.Err.undefined
        @ 'GHC.Types.LiftedRep
        @ (FDB.GADTForall.Q a_a5DU)
        ($dIP7_r5Ty
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 46, types: 35, coercions: 4, joins: 0/11}
FDB.GADTForall.eqFilter
  :: forall b a.
     GHC.Classes.Eq b =>
     (a -> b) -> b -> FDB.GADTForall.Q a -> FDB.GADTForall.Q a
[GblId, Arity=1, Unf=OtherCon []]
FDB.GADTForall.eqFilter
  = \ (@ b_a5DM) (@ a_a5DN) _ [Occ=Dead] ->
      let {
        sat_s5Yd [Occ=Once] :: GHC.Stack.Types.HasCallStack
        [LclId]
        sat_s5Yd
          = let {
              sat_s5Ya [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5Ya = GHC.Types.I# 21# } in
            let {
              sat_s5Y9 [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5Y9 = GHC.Types.I# 70# } in
            let {
              sat_s5Y8 [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5Y8 = GHC.Types.I# 12# } in
            let {
              sat_s5Y7 [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5Y7 = GHC.Types.I# 70# } in
            let {
              sat_s5Y6 [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5Y6 = GHC.CString.unpackCString# "./FDB/GADTForall.hs"# } in
            let {
              sat_s5Y5 [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5Y5 = GHC.CString.unpackCString# "FDB.GADTForall"# } in
            let {
              sat_s5Y4 [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5Y4 = GHC.CString.unpackCString# "main"# } in
            let {
              sat_s5Yb [Occ=Once] :: GHC.Stack.Types.SrcLoc
              [LclId]
              sat_s5Yb
                = GHC.Stack.Types.SrcLoc
                    sat_s5Y4 sat_s5Y5 sat_s5Y6 sat_s5Y7 sat_s5Y8 sat_s5Y9 sat_s5Ya } in
            let {
              sat_s5Y3 [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5Y3 = GHC.CString.unpackCString# "undefined"# } in
            let {
              sat_s5Yc [Occ=Once] :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
              [LclId]
              sat_s5Yc = (sat_s5Y3, sat_s5Yb) } in
            (GHC.Stack.Types.pushCallStack
               sat_s5Yc GHC.Stack.Types.emptyCallStack)
            `cast` (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                    :: GHC.Stack.Types.CallStack
                       ~R# (?callStack::GHC.Stack.Types.CallStack)) } in
      GHC.Err.undefined
        @ 'GHC.Types.LiftedRep
        @ ((a_a5DN -> b_a5DM)
           -> b_a5DM -> FDB.GADTForall.Q a_a5DN -> FDB.GADTForall.Q a_a5DN)
        sat_s5Yd

-- RHS size: {terms: 47, types: 42, coercions: 4, joins: 0/11}
FDB.GADTForall.equiJoin
  :: forall c a b.
     GHC.Classes.Eq c =>
     (a -> c)
     -> (b -> c)
     -> FDB.GADTForall.Q a
     -> FDB.GADTForall.Q b
     -> FDB.GADTForall.Q (a, b)
[GblId, Arity=1, Unf=OtherCon []]
FDB.GADTForall.equiJoin
  = \ (@ c_a5DD) (@ a_a5DE) (@ b_a5DF) _ [Occ=Dead] ->
      let {
        sat_s5Yp [Occ=Once] :: GHC.Stack.Types.HasCallStack
        [LclId]
        sat_s5Yp
          = let {
              sat_s5Ym [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5Ym = GHC.Types.I# 21# } in
            let {
              sat_s5Yl [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5Yl = GHC.Types.I# 73# } in
            let {
              sat_s5Yk [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5Yk = GHC.Types.I# 12# } in
            let {
              sat_s5Yj [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5Yj = GHC.Types.I# 73# } in
            let {
              sat_s5Yi [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5Yi = GHC.CString.unpackCString# "./FDB/GADTForall.hs"# } in
            let {
              sat_s5Yh [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5Yh = GHC.CString.unpackCString# "FDB.GADTForall"# } in
            let {
              sat_s5Yg [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5Yg = GHC.CString.unpackCString# "main"# } in
            let {
              sat_s5Yn [Occ=Once] :: GHC.Stack.Types.SrcLoc
              [LclId]
              sat_s5Yn
                = GHC.Stack.Types.SrcLoc
                    sat_s5Yg sat_s5Yh sat_s5Yi sat_s5Yj sat_s5Yk sat_s5Yl sat_s5Ym } in
            let {
              sat_s5Yf [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5Yf = GHC.CString.unpackCString# "undefined"# } in
            let {
              sat_s5Yo [Occ=Once] :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
              [LclId]
              sat_s5Yo = (sat_s5Yf, sat_s5Yn) } in
            (GHC.Stack.Types.pushCallStack
               sat_s5Yo GHC.Stack.Types.emptyCallStack)
            `cast` (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                    :: GHC.Stack.Types.CallStack
                       ~R# (?callStack::GHC.Stack.Types.CallStack)) } in
      GHC.Err.undefined
        @ 'GHC.Types.LiftedRep
        @ ((a_a5DE -> c_a5DD)
           -> (b_a5DF -> c_a5DD)
           -> FDB.GADTForall.Q a_a5DE
           -> FDB.GADTForall.Q b_a5DF
           -> FDB.GADTForall.Q (a_a5DE, b_a5DF))
        sat_s5Yp

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
FDB.GADTForall.fetchRow
  :: forall a.
     FDB.GADTForall.RowRef a -> FDB.GADTForall.SQ (FDB.GADTForall.Row a)
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
FDB.GADTForall.fetchRow
  = \ (@ a_X5iA)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.RowRef a_X5iA) ->
      FDB.GADTForall.$WFetchRow @ a_X5iA eta_B1

-- RHS size: {terms: 7, types: 11, coercions: 0, joins: 0/0}
FDB.GADTForall.subqMap
  :: forall a b.
     (a -> FDB.GADTForall.SQ b)
     -> FDB.GADTForall.Q a -> FDB.GADTForall.Q b
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
FDB.GADTForall.subqMap
  = \ (@ v_X5iL)
      (@ b_a5iL)
      (eta_B2 [Occ=Once] :: v_X5iL -> FDB.GADTForall.SQ b_a5iL)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.Q v_X5iL) ->
      FDB.GADTForall.$WMapSQ @ v_X5iL @ b_a5iL eta_B2 eta_B1

-- RHS size: {terms: 6, types: 8, coercions: 0, joins: 0/0}
FDB.GADTForall.subqFilter
  :: forall a.
     (a -> FDB.GADTForall.SQ GHC.Types.Bool)
     -> FDB.GADTForall.Q a -> FDB.GADTForall.Q a
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
FDB.GADTForall.subqFilter
  = \ (@ a_a5iM)
      (eta_B2 [Occ=Once] :: a_a5iM -> FDB.GADTForall.SQ GHC.Types.Bool)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.Q a_a5iM) ->
      FDB.GADTForall.FilterSQ @ a_a5iM eta_B2 eta_B1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Yx :: GHC.Types.Int
[LclId]
sat_s5Yx = GHC.Types.I# 19#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Yw :: GHC.Types.Int
[LclId]
sat_s5Yw = GHC.Types.I# 130#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Yv :: GHC.Types.Int
[LclId]
sat_s5Yv = GHC.Types.I# 10#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Yu :: GHC.Types.Int
[LclId]
sat_s5Yu = GHC.Types.I# 130#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Yt :: [GHC.Types.Char]
[LclId]
sat_s5Yt = GHC.CString.unpackCString# "./FDB/GADTForall.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Ys :: [GHC.Types.Char]
[LclId]
sat_s5Ys = GHC.CString.unpackCString# "FDB.GADTForall"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Yr :: [GHC.Types.Char]
[LclId]
sat_s5Yr = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s5Yy :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s5Yy
  = GHC.Stack.Types.SrcLoc
      sat_s5Yr sat_s5Ys sat_s5Yt sat_s5Yu sat_s5Yv sat_s5Yw sat_s5Yx

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5Yq :: [GHC.Types.Char]
[LclId]
sat_s5Yq = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s5Yz :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s5Yz = (sat_s5Yq, sat_s5Yy)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP8_r5Tz :: GHC.Stack.Types.CallStack
[GblId]
$dIP8_r5Tz
  = GHC.Stack.Types.pushCallStack
      sat_s5Yz GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 4, types: 12, coercions: 4, joins: 0/0}
FDB.GADTForall.mapToQ
  :: forall a b.
     (a -> FDB.GADTForall.Q b)
     -> FDB.GADTForall.SQ a -> FDB.GADTForall.Q b
[GblId]
FDB.GADTForall.mapToQ
  = \ (@ a_a5Dc) (@ b_a5Dd) ->
      GHC.Err.undefined
        @ 'GHC.Types.LiftedRep
        @ ((a_a5Dc -> FDB.GADTForall.Q b_a5Dd)
           -> FDB.GADTForall.SQ a_a5Dc -> FDB.GADTForall.Q b_a5Dd)
        ($dIP8_r5Tz
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5YH :: GHC.Types.Int
[LclId]
sat_s5YH = GHC.Types.I# 16#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5YG :: GHC.Types.Int
[LclId]
sat_s5YG = GHC.Types.I# 133#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5YF :: GHC.Types.Int
[LclId]
sat_s5YF = GHC.Types.I# 7#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5YE :: GHC.Types.Int
[LclId]
sat_s5YE = GHC.Types.I# 133#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5YD :: [GHC.Types.Char]
[LclId]
sat_s5YD = GHC.CString.unpackCString# "./FDB/GADTForall.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5YC :: [GHC.Types.Char]
[LclId]
sat_s5YC = GHC.CString.unpackCString# "FDB.GADTForall"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5YB :: [GHC.Types.Char]
[LclId]
sat_s5YB = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s5YI :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s5YI
  = GHC.Stack.Types.SrcLoc
      sat_s5YB sat_s5YC sat_s5YD sat_s5YE sat_s5YF sat_s5YG sat_s5YH

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s5YA :: [GHC.Types.Char]
[LclId]
sat_s5YA = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s5YJ :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s5YJ = (sat_s5YA, sat_s5YI)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP9_r5TA :: GHC.Stack.Types.CallStack
[GblId]
$dIP9_r5TA
  = GHC.Stack.Types.pushCallStack
      sat_s5YJ GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 3, types: 7, coercions: 4, joins: 0/0}
FDB.GADTForall.toQ
  :: forall a. FDB.GADTForall.SQ a -> FDB.GADTForall.Q a
[GblId]
FDB.GADTForall.toQ
  = \ (@ a_a5D6) ->
      GHC.Err.undefined
        @ 'GHC.Types.LiftedRep
        @ (FDB.GADTForall.SQ a_a5D6 -> FDB.GADTForall.Q a_a5D6)
        ($dIP9_r5TA
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 8, types: 15, coercions: 0, joins: 0/0}
FDB.GADTForall.agg
  :: forall a b s.
     FDB.GADTForall.Agg a b s
     -> FDB.GADTForall.Q a -> FDB.GADTForall.SQ b
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
FDB.GADTForall.agg
  = \ (@ a_X5iB)
      (@ b_a5iB)
      (@ s_X5iE)
      (eta_B2 [Occ=Once] :: FDB.GADTForall.Agg a_X5iB b_a5iB s_X5iE)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.Q a_X5iB) ->
      FDB.GADTForall.$WStateFold @ a_X5iB @ b_a5iB @ s_X5iE eta_B2 eta_B1

-- RHS size: {terms: 14, types: 23, coercions: 0, joins: 0/1}
FDB.GADTForall.mapAgg
  :: forall b c s a.
     FDB.GADTForall.Agg b c s
     -> (a -> b) -> FDB.GADTForall.Q a -> FDB.GADTForall.SQ c
[GblId, Arity=3, Caf=NoCafRefs, Unf=OtherCon []]
FDB.GADTForall.mapAgg
  = \ (@ b_a5Fc)
      (@ c_a5Fd)
      (@ s_a5Fe)
      (@ a_a5Ff)
      (g_s5YK [Occ=Once] :: FDB.GADTForall.Agg b_a5Fc c_a5Fd s_a5Fe)
      (f_s5YL [Occ=Once] :: a_a5Ff -> b_a5Fc)
      (q_s5YM [Occ=Once] :: FDB.GADTForall.Q a_a5Ff) ->
      let {
        sat_s5YN [Occ=Once] :: FDB.GADTForall.Q b_a5Fc
        [LclId]
        sat_s5YN = FDB.GADTForall.Map @ b_a5Fc @ a_a5Ff f_s5YL q_s5YM } in
      FDB.GADTForall.StateFold @ c_a5Fd @ b_a5Fc @ s_a5Fe g_s5YK sat_s5YN

-- RHS size: {terms: 45, types: 30, coercions: 4, joins: 0/11}
FDB.GADTForall.sumAgg
  :: forall a. GHC.Num.Num a => FDB.GADTForall.Fold1 a
[GblId, Arity=1, Unf=OtherCon []]
FDB.GADTForall.sumAgg
  = \ (@ a_a5CS) _ [Occ=Dead] ->
      let {
        sat_s5YZ [Occ=Once] :: GHC.Stack.Types.HasCallStack
        [LclId]
        sat_s5YZ
          = let {
              sat_s5YW [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5YW = GHC.Types.I# 19# } in
            let {
              sat_s5YV [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5YV = GHC.Types.I# 148# } in
            let {
              sat_s5YU [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5YU = GHC.Types.I# 10# } in
            let {
              sat_s5YT [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5YT = GHC.Types.I# 148# } in
            let {
              sat_s5YS [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5YS = GHC.CString.unpackCString# "./FDB/GADTForall.hs"# } in
            let {
              sat_s5YR [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5YR = GHC.CString.unpackCString# "FDB.GADTForall"# } in
            let {
              sat_s5YQ [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5YQ = GHC.CString.unpackCString# "main"# } in
            let {
              sat_s5YX [Occ=Once] :: GHC.Stack.Types.SrcLoc
              [LclId]
              sat_s5YX
                = GHC.Stack.Types.SrcLoc
                    sat_s5YQ sat_s5YR sat_s5YS sat_s5YT sat_s5YU sat_s5YV sat_s5YW } in
            let {
              sat_s5YP [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5YP = GHC.CString.unpackCString# "undefined"# } in
            let {
              sat_s5YY [Occ=Once] :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
              [LclId]
              sat_s5YY = (sat_s5YP, sat_s5YX) } in
            (GHC.Stack.Types.pushCallStack
               sat_s5YY GHC.Stack.Types.emptyCallStack)
            `cast` (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                    :: GHC.Stack.Types.CallStack
                       ~R# (?callStack::GHC.Stack.Types.CallStack)) } in
      GHC.Err.undefined
        @ 'GHC.Types.LiftedRep
        @ (FDB.GADTForall.Agg a_a5CS a_a5CS a_a5CS)
        sat_s5YZ

-- RHS size: {terms: 45, types: 32, coercions: 4, joins: 0/11}
FDB.GADTForall.avgAgg
  :: forall a. GHC.Real.Fractional a => FDB.GADTForall.Agg a a (a, a)
[GblId, Arity=1, Unf=OtherCon []]
FDB.GADTForall.avgAgg
  = \ (@ a_a5CL) _ [Occ=Dead] ->
      let {
        sat_s5Zb [Occ=Once] :: GHC.Stack.Types.HasCallStack
        [LclId]
        sat_s5Zb
          = let {
              sat_s5Z8 [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5Z8 = GHC.Types.I# 19# } in
            let {
              sat_s5Z7 [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5Z7 = GHC.Types.I# 151# } in
            let {
              sat_s5Z6 [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5Z6 = GHC.Types.I# 10# } in
            let {
              sat_s5Z5 [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5Z5 = GHC.Types.I# 151# } in
            let {
              sat_s5Z4 [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5Z4 = GHC.CString.unpackCString# "./FDB/GADTForall.hs"# } in
            let {
              sat_s5Z3 [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5Z3 = GHC.CString.unpackCString# "FDB.GADTForall"# } in
            let {
              sat_s5Z2 [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5Z2 = GHC.CString.unpackCString# "main"# } in
            let {
              sat_s5Z9 [Occ=Once] :: GHC.Stack.Types.SrcLoc
              [LclId]
              sat_s5Z9
                = GHC.Stack.Types.SrcLoc
                    sat_s5Z2 sat_s5Z3 sat_s5Z4 sat_s5Z5 sat_s5Z6 sat_s5Z7 sat_s5Z8 } in
            let {
              sat_s5Z1 [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5Z1 = GHC.CString.unpackCString# "undefined"# } in
            let {
              sat_s5Za [Occ=Once] :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
              [LclId]
              sat_s5Za = (sat_s5Z1, sat_s5Z9) } in
            (GHC.Stack.Types.pushCallStack
               sat_s5Za GHC.Stack.Types.emptyCallStack)
            `cast` (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                    :: GHC.Stack.Types.CallStack
                       ~R# (?callStack::GHC.Stack.Types.CallStack)) } in
      GHC.Err.undefined
        @ 'GHC.Types.LiftedRep
        @ (FDB.GADTForall.Agg a_a5CL a_a5CL (a_a5CL, a_a5CL))
        sat_s5Zb

-- RHS size: {terms: 46, types: 32, coercions: 4, joins: 0/11}
FDB.GADTForall.count
  :: forall n a.
     GHC.Real.Integral n =>
     FDB.GADTForall.Q a -> FDB.GADTForall.SQ n
[GblId, Arity=1, Unf=OtherCon []]
FDB.GADTForall.count
  = \ (@ n_a5CD) (@ a_a5CE) _ [Occ=Dead] ->
      let {
        sat_s5Zn [Occ=Once] :: GHC.Stack.Types.HasCallStack
        [LclId]
        sat_s5Zn
          = let {
              sat_s5Zk [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5Zk = GHC.Types.I# 18# } in
            let {
              sat_s5Zj [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5Zj = GHC.Types.I# 154# } in
            let {
              sat_s5Zi [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5Zi = GHC.Types.I# 9# } in
            let {
              sat_s5Zh [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5Zh = GHC.Types.I# 154# } in
            let {
              sat_s5Zg [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5Zg = GHC.CString.unpackCString# "./FDB/GADTForall.hs"# } in
            let {
              sat_s5Zf [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5Zf = GHC.CString.unpackCString# "FDB.GADTForall"# } in
            let {
              sat_s5Ze [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5Ze = GHC.CString.unpackCString# "main"# } in
            let {
              sat_s5Zl [Occ=Once] :: GHC.Stack.Types.SrcLoc
              [LclId]
              sat_s5Zl
                = GHC.Stack.Types.SrcLoc
                    sat_s5Ze sat_s5Zf sat_s5Zg sat_s5Zh sat_s5Zi sat_s5Zj sat_s5Zk } in
            let {
              sat_s5Zd [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5Zd = GHC.CString.unpackCString# "undefined"# } in
            let {
              sat_s5Zm [Occ=Once] :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
              [LclId]
              sat_s5Zm = (sat_s5Zd, sat_s5Zl) } in
            (GHC.Stack.Types.pushCallStack
               sat_s5Zm GHC.Stack.Types.emptyCallStack)
            `cast` (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                    :: GHC.Stack.Types.CallStack
                       ~R# (?callStack::GHC.Stack.Types.CallStack)) } in
      GHC.Err.undefined
        @ 'GHC.Types.LiftedRep
        @ (FDB.GADTForall.Q a_a5CE -> FDB.GADTForall.SQ n_a5CD)
        sat_s5Zn

-- RHS size: {terms: 32, types: 32, coercions: 0, joins: 0/7}
FDB.GADTForall.exists
  :: forall a. FDB.GADTForall.Q a -> FDB.GADTForall.SQ GHC.Types.Bool
[GblId, Arity=1, Unf=OtherCon []]
FDB.GADTForall.exists
  = \ (@ a_a5E8) (q_s5Zo [Occ=Once] :: FDB.GADTForall.Q a_a5E8) ->
      let {
        sat_s5ZE [Occ=Once]
          :: GHC.Integer.Type.Integer -> FDB.GADTForall.SQ GHC.Types.Bool
        [LclId]
        sat_s5ZE
          = \ (c_s5ZB [Occ=Once] :: GHC.Integer.Type.Integer) ->
              let {
                sat_s5ZD [Occ=Once] :: GHC.Types.Bool
                [LclId]
                sat_s5ZD
                  = let {
                      sat_s5ZC [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId]
                      sat_s5ZC = GHC.Integer.Type.S# 0# } in
                    GHC.Classes.>
                      @ GHC.Integer.Type.Integer
                      GHC.Integer.Type.$fOrdInteger
                      c_s5ZB
                      sat_s5ZC } in
              $creturn1_r5To @ GHC.Types.Bool sat_s5ZD } in
      let {
        sat_s5ZA [Occ=Once] :: FDB.GADTForall.SQ GHC.Integer.Type.Integer
        [LclId]
        sat_s5ZA
          = let {
              sat_s5Zy [Occ=Once] :: GHC.Integer.Type.Integer
              [LclId]
              sat_s5Zy = GHC.Integer.Type.S# 1# } in
            let {
              sat_s5Zz [Occ=Once] :: FDB.GADTForall.Q a_a5E8
              [LclId]
              sat_s5Zz
                = FDB.GADTForall.Take
                    @ a_a5E8
                    @ GHC.Integer.Type.Integer
                    GHC.Real.$fIntegralInteger
                    sat_s5Zy
                    q_s5Zo } in
            let {
              sat_s5Zp [Occ=Once]
                :: FDB.GADTForall.Q a_a5E8
                   -> FDB.GADTForall.SQ GHC.Integer.Type.Integer
              [LclId]
              sat_s5Zp
                = FDB.GADTForall.count
                    @ GHC.Integer.Type.Integer @ a_a5E8 GHC.Real.$fIntegralInteger } in
            GHC.Base.$
              @ 'GHC.Types.LiftedRep
              @ (FDB.GADTForall.Q a_a5E8)
              @ (FDB.GADTForall.SQ GHC.Integer.Type.Integer)
              sat_s5Zp
              sat_s5Zz } in
      $c>>=1_r5Tn
        @ GHC.Integer.Type.Integer @ GHC.Types.Bool sat_s5ZA sat_s5ZE

-- RHS size: {terms: 45, types: 30, coercions: 4, joins: 0/11}
FDB.GADTForall.minAgg
  :: forall a. GHC.Classes.Ord a => FDB.GADTForall.Fold1 a
[GblId, Arity=1, Unf=OtherCon []]
FDB.GADTForall.minAgg
  = \ (@ a_a5Cw) _ [Occ=Dead] ->
      let {
        sat_s5ZQ [Occ=Once] :: GHC.Stack.Types.HasCallStack
        [LclId]
        sat_s5ZQ
          = let {
              sat_s5ZN [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5ZN = GHC.Types.I# 19# } in
            let {
              sat_s5ZM [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5ZM = GHC.Types.I# 157# } in
            let {
              sat_s5ZL [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5ZL = GHC.Types.I# 10# } in
            let {
              sat_s5ZK [Occ=Once] :: GHC.Types.Int
              [LclId]
              sat_s5ZK = GHC.Types.I# 157# } in
            let {
              sat_s5ZJ [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5ZJ = GHC.CString.unpackCString# "./FDB/GADTForall.hs"# } in
            let {
              sat_s5ZI [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5ZI = GHC.CString.unpackCString# "FDB.GADTForall"# } in
            let {
              sat_s5ZH [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5ZH = GHC.CString.unpackCString# "main"# } in
            let {
              sat_s5ZO [Occ=Once] :: GHC.Stack.Types.SrcLoc
              [LclId]
              sat_s5ZO
                = GHC.Stack.Types.SrcLoc
                    sat_s5ZH sat_s5ZI sat_s5ZJ sat_s5ZK sat_s5ZL sat_s5ZM sat_s5ZN } in
            let {
              sat_s5ZG [Occ=Once] :: [GHC.Types.Char]
              [LclId]
              sat_s5ZG = GHC.CString.unpackCString# "undefined"# } in
            let {
              sat_s5ZP [Occ=Once] :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
              [LclId]
              sat_s5ZP = (sat_s5ZG, sat_s5ZO) } in
            (GHC.Stack.Types.pushCallStack
               sat_s5ZP GHC.Stack.Types.emptyCallStack)
            `cast` (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                    :: GHC.Stack.Types.CallStack
                       ~R# (?callStack::GHC.Stack.Types.CallStack)) } in
      GHC.Err.undefined
        @ 'GHC.Types.LiftedRep
        @ (FDB.GADTForall.Agg a_a5Cw a_a5Cw a_a5Cw)
        sat_s5ZQ

-- RHS size: {terms: 6, types: 9, coercions: 0, joins: 0/0}
FDB.GADTForall.rowVal :: forall a. FDB.GADTForall.Row a -> a
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
FDB.GADTForall.rowVal
  = \ (@ a_a5Cu)
      (ds_s5ZR [Occ=Once!] :: FDB.GADTForall.Row a_a5Cu) ->
      case ds_s5ZR of
      { FDB.GADTForall.Row _ [Occ=Dead] val_s5ZU [Occ=Once] ->
      val_s5ZU
      }

-- RHS size: {terms: 9, types: 13, coercions: 0, joins: 0/1}
FDB.GADTForall.fetchForeign
  :: forall a. FDB.GADTForall.RowRef a -> FDB.GADTForall.SQ a
[GblId, Arity=1, Unf=OtherCon []]
FDB.GADTForall.fetchForeign
  = \ (@ a_a5Du)
      (ref_s5ZV [Occ=Once] :: FDB.GADTForall.RowRef a_a5Du) ->
      let {
        sat_s5ZW [Occ=Once]
          :: FDB.GADTForall.SQ (FDB.GADTForall.Row a_a5Du)
        [LclId]
        sat_s5ZW = FDB.GADTForall.$WFetchRow @ a_a5Du ref_s5ZV } in
      FDB.Utils.<&>
        @ FDB.GADTForall.SQ
        @ (FDB.GADTForall.Row a_a5Du)
        @ a_a5Du
        FDB.GADTForall.$fFunctorSQ
        sat_s5ZW
        (FDB.GADTForall.rowVal @ a_a5Du)

-- RHS size: {terms: 6, types: 9, coercions: 0, joins: 0/0}
FDB.GADTForall.rowRef
  :: forall a. FDB.GADTForall.Row a -> FDB.GADTForall.RowRef a
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
FDB.GADTForall.rowRef
  = \ (@ a_a5Cs)
      (ds_s5ZX [Occ=Once!] :: FDB.GADTForall.Row a_a5Cs) ->
      case ds_s5ZX of
      { FDB.GADTForall.Row ref_s5ZZ [Occ=Once] _ [Occ=Dead] ->
      ref_s5ZZ
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule1_r5TB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule1_r5TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule2_r5TC :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule2_r5TC = GHC.Types.TrNameS $trModule1_r5TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule3_r5TD :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule3_r5TD = "FDB.GADTForall"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule4_r5TE :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule4_r5TE = GHC.Types.TrNameS $trModule3_r5TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
FDB.GADTForall.$trModule
  = GHC.Types.Module $trModule2_r5TC $trModule4_r5TE

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r5TF :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep_r5TF
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcChar (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r5TG :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep1_r5TG
  = GHC.Types.KindRepTyConApp
      GHC.Word.$tcWord64 (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_r5TH :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep2_r5TH
  = GHC.Types.KindRepTyConApp
      GHC.Word.$tcWord16 (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_r5TI :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep3_r5TI
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcBool (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_r5TJ :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep4_r5TJ
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcConstraint (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep5_r5TK :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep5_r5TK
  = GHC.Types.:
      @ GHC.Types.KindRep $krep_r5TF (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6_r5TL :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep6_r5TL = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep5_r5TK

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_r5TM :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep7_r5TM = GHC.Types.KindRepFun GHC.Types.krep$* $krep4_r5TJ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_r5TN :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep8_r5TN = GHC.Types.KindRepFun GHC.Types.krep$* $krep7_r5TM

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_r5TO :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep9_r5TO
  = GHC.Types.KindRepFun GHC.Types.krep$* GHC.Types.krep$*->*->*

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep10_r5TP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep10_r5TP = GHC.Types.KindRepVar 2#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep11_r5TQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep11_r5TQ = GHC.Types.KindRepVar 1#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_r5TR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep12_r5TR = GHC.Types.KindRepFun $krep10_r5TP $krep11_r5TQ

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep13_r5TS :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep13_r5TS = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_r5TT :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep14_r5TT = GHC.Types.KindRepFun $krep13_r5TS $krep11_r5TQ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep15_r5TU :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep15_r5TU = GHC.Types.KindRepFun $krep13_r5TS $krep10_r5TP

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep16_r5TV :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep16_r5TV = GHC.Types.KindRepFun $krep10_r5TP $krep15_r5TU

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep17_r5TW :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep17_r5TW = GHC.Types.KindRepFun $krep13_r5TS $krep3_r5TI

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep18_r5TX :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep18_r5TX = GHC.Types.KindRepFun $krep11_r5TQ $krep13_r5TS

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep19_r5TY :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep19_r5TY
  = GHC.Types.:
      @ GHC.Types.KindRep $krep11_r5TQ (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep20_r5TZ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep20_r5TZ
  = GHC.Types.: @ GHC.Types.KindRep $krep13_r5TS $krep19_r5TY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep21_r5U0 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep21_r5U0
  = GHC.Types.KindRepTyConApp GHC.Tuple.$tc(,) $krep20_r5TZ

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep22_r5U1 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep22_r5U1
  = GHC.Types.:
      @ GHC.Types.KindRep $krep13_r5TS (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep23_r5U2 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep23_r5U2
  = GHC.Types.KindRepTyConApp GHC.Classes.$tcOrd $krep22_r5U1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep24_r5U3 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep24_r5U3
  = GHC.Types.:
      @ GHC.Types.KindRep $krep13_r5TS (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep25_r5U4 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep25_r5U4
  = GHC.Types.KindRepTyConApp GHC.Real.$tcIntegral $krep24_r5U3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTable1_r5U5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcTable1_r5U5 = "Table"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTable2_r5U6 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcTable2_r5U6 = GHC.Types.TrNameS $tcTable1_r5U5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tcTable :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tcTable
  = GHC.Types.TyCon
      6112764465777374685##
      4824890021682489453##
      FDB.GADTForall.$trModule
      $tcTable2_r5U6
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep26_r5U7 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep26_r5U7
  = GHC.Types.:
      @ GHC.Types.KindRep $krep13_r5TS (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep27_r5U8 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep27_r5U8
  = GHC.Types.KindRepTyConApp FDB.GADTForall.$tcTable $krep26_r5U7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep28_r5U9 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep28_r5U9 = GHC.Types.KindRepFun $krep6_r5TL $krep27_r5U8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Table1_r5Ua :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Table1_r5Ua = "'Table"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Table2_r5Ub :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Table2_r5Ub = GHC.Types.TrNameS $tc'Table1_r5Ua

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'Table :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tc'Table
  = GHC.Types.TyCon
      10871517142501221515##
      4325455715354573628##
      FDB.GADTForall.$trModule
      $tc'Table2_r5Ub
      1#
      $krep28_r5U9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcAgg1_r5Uc :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcAgg1_r5Uc = "Agg"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcAgg2_r5Ud :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcAgg2_r5Ud = GHC.Types.TrNameS $tcAgg1_r5Uc

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tcAgg :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tcAgg
  = GHC.Types.TyCon
      6997330576107404323##
      12350032399431940804##
      FDB.GADTForall.$trModule
      $tcAgg2_r5Ud
      0#
      $krep9_r5TO

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep29_r5Ue :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep29_r5Ue
  = GHC.Types.:
      @ GHC.Types.KindRep $krep10_r5TP (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep30_r5Uf :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep30_r5Uf
  = GHC.Types.: @ GHC.Types.KindRep $krep11_r5TQ $krep29_r5Ue

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep31_r5Ug :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep31_r5Ug
  = GHC.Types.: @ GHC.Types.KindRep $krep13_r5TS $krep30_r5Uf

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep32_r5Uh :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep32_r5Uh
  = GHC.Types.KindRepTyConApp FDB.GADTForall.$tcAgg $krep31_r5Ug

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep33_r5Ui :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep33_r5Ui = GHC.Types.KindRepFun $krep12_r5TR $krep32_r5Uh

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep34_r5Uj :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep34_r5Uj = GHC.Types.KindRepFun $krep10_r5TP $krep33_r5Ui

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep35_r5Uk :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep35_r5Uk = GHC.Types.KindRepFun $krep16_r5TV $krep34_r5Uj

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Agg1_r5Ul :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Agg1_r5Ul = "'Agg"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Agg2_r5Um :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Agg2_r5Um = GHC.Types.TrNameS $tc'Agg1_r5Ul

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'Agg :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tc'Agg
  = GHC.Types.TyCon
      8300879811530789064##
      621423574753608316##
      FDB.GADTForall.$trModule
      $tc'Agg2_r5Um
      3#
      $krep35_r5Uk

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcRowId1_r5Un :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcRowId1_r5Un = "RowId"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcRowId2_r5Uo :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcRowId2_r5Uo = GHC.Types.TrNameS $tcRowId1_r5Un

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tcRowId :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tcRowId
  = GHC.Types.TyCon
      6564313131908661638##
      391072849311021736##
      FDB.GADTForall.$trModule
      $tcRowId2_r5Uo
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep36_r5Up :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep36_r5Up
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcRowId (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep37_r5Uq :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep37_r5Uq = GHC.Types.KindRepFun $krep1_r5TG $krep36_r5Up

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'RowId1_r5Ur :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'RowId1_r5Ur = "'RowId"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'RowId2_r5Us :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'RowId2_r5Us = GHC.Types.TrNameS $tc'RowId1_r5Ur

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'RowId :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tc'RowId
  = GHC.Types.TyCon
      11182397406630558385##
      2250286617457619889##
      FDB.GADTForall.$trModule
      $tc'RowId2_r5Us
      0#
      $krep37_r5Uq

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTableId1_r5Ut :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcTableId1_r5Ut = "TableId"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTableId2_r5Uu :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcTableId2_r5Uu = GHC.Types.TrNameS $tcTableId1_r5Ut

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tcTableId :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tcTableId
  = GHC.Types.TyCon
      221136922417672250##
      2647284849506157507##
      FDB.GADTForall.$trModule
      $tcTableId2_r5Uu
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep38_r5Uv :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep38_r5Uv
  = GHC.Types.KindRepTyConApp
      FDB.GADTForall.$tcTableId (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep39_r5Uw :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep39_r5Uw = GHC.Types.KindRepFun $krep2_r5TH $krep38_r5Uv

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'TableId1_r5Ux :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'TableId1_r5Ux = "'TableId"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'TableId2_r5Uy :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'TableId2_r5Uy = GHC.Types.TrNameS $tc'TableId1_r5Ux

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'TableId :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tc'TableId
  = GHC.Types.TyCon
      299570635528495236##
      7767331940541179554##
      FDB.GADTForall.$trModule
      $tc'TableId2_r5Uy
      0#
      $krep39_r5Uw

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcRowRef1_r5Uz :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcRowRef1_r5Uz = "RowRef"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcRowRef2_r5UA :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcRowRef2_r5UA = GHC.Types.TrNameS $tcRowRef1_r5Uz

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tcRowRef :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tcRowRef
  = GHC.Types.TyCon
      6167723302899116461##
      12820464192123209494##
      FDB.GADTForall.$trModule
      $tcRowRef2_r5UA
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep40_r5UB :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep40_r5UB
  = GHC.Types.:
      @ GHC.Types.KindRep $krep13_r5TS (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep41_r5UC :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep41_r5UC
  = GHC.Types.KindRepTyConApp FDB.GADTForall.$tcRowRef $krep40_r5UB

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep42_r5UD :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep42_r5UD = GHC.Types.KindRepFun $krep36_r5Up $krep41_r5UC

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep43_r5UE :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep43_r5UE = GHC.Types.KindRepFun $krep38_r5Uv $krep42_r5UD

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'RowRef1_r5UF :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'RowRef1_r5UF = "'RowRef"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'RowRef2_r5UG :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'RowRef2_r5UG = GHC.Types.TrNameS $tc'RowRef1_r5UF

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'RowRef :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tc'RowRef
  = GHC.Types.TyCon
      1951283466925547487##
      17778823377038719573##
      FDB.GADTForall.$trModule
      $tc'RowRef2_r5UG
      1#
      $krep43_r5UE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcRow1_r5UH :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcRow1_r5UH = "Row"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcRow2_r5UI :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcRow2_r5UI = GHC.Types.TrNameS $tcRow1_r5UH

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tcRow :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tcRow
  = GHC.Types.TyCon
      7837339403267824689##
      11319950323759755044##
      FDB.GADTForall.$trModule
      $tcRow2_r5UI
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep44_r5UJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep44_r5UJ
  = GHC.Types.:
      @ GHC.Types.KindRep $krep13_r5TS (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep45_r5UK :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep45_r5UK
  = GHC.Types.KindRepTyConApp FDB.GADTForall.$tcRow $krep44_r5UJ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep46_r5UL :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep46_r5UL = GHC.Types.KindRepFun $krep13_r5TS $krep45_r5UK

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep47_r5UM :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep47_r5UM = GHC.Types.KindRepFun $krep41_r5UC $krep46_r5UL

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Row1_r5UN :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Row1_r5UN = "'Row"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Row2_r5UO :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Row2_r5UO = GHC.Types.TrNameS $tc'Row1_r5UN

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'Row :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tc'Row
  = GHC.Types.TyCon
      16802854983749163630##
      1951157969764704594##
      FDB.GADTForall.$trModule
      $tc'Row2_r5UO
      1#
      $krep47_r5UM

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcQ1_r5UP :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcQ1_r5UP = "Q"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcQ2_r5UQ :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcQ2_r5UQ = GHC.Types.TrNameS $tcQ1_r5UP

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tcQ :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tcQ
  = GHC.Types.TyCon
      18238656953556965988##
      5882741213209533844##
      FDB.GADTForall.$trModule
      $tcQ2_r5UQ
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep48_r5UR :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep48_r5UR
  = GHC.Types.:
      @ GHC.Types.KindRep $krep13_r5TS (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep49_r5US :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep49_r5US
  = GHC.Types.KindRepTyConApp FDB.GADTForall.$tcQ $krep48_r5UR

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep50_r5UT :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep50_r5UT = GHC.Types.KindRepFun $krep27_r5U8 $krep49_r5US

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Read1_r5UU :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Read1_r5UU = "'Read"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Read2_r5UV :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Read2_r5UV = GHC.Types.TrNameS $tc'Read1_r5UU

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'Read :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tc'Read
  = GHC.Types.TyCon
      5506696017368664421##
      2631673073369786685##
      FDB.GADTForall.$trModule
      $tc'Read2_r5UV
      1#
      $krep50_r5UT

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep51_r5UW :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep51_r5UW = GHC.Types.KindRepFun $krep49_r5US $krep49_r5US

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep52_r5UX :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep52_r5UX = GHC.Types.KindRepFun $krep17_r5TW $krep51_r5UW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Filter1_r5UY :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Filter1_r5UY = "'Filter"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Filter2_r5UZ :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Filter2_r5UZ = GHC.Types.TrNameS $tc'Filter1_r5UY

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'Filter :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tc'Filter
  = GHC.Types.TyCon
      3342106065591891117##
      5504432989845619796##
      FDB.GADTForall.$trModule
      $tc'Filter2_r5UZ
      1#
      $krep52_r5UX

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep53_r5V0 :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep53_r5V0
  = GHC.Types.:
      @ GHC.Types.KindRep $krep49_r5US (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep54_r5V1 :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep54_r5V1
  = GHC.Types.: @ GHC.Types.KindRep $krep11_r5TQ $krep53_r5V0

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep55_r5V2 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep55_r5V2
  = GHC.Types.KindRepTyConApp GHC.Tuple.$tc(,) $krep54_r5V1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep56_r5V3 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep56_r5V3
  = GHC.Types.:
      @ GHC.Types.KindRep $krep11_r5TQ (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep57_r5V4 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep57_r5V4
  = GHC.Types.KindRepTyConApp FDB.GADTForall.$tcQ $krep56_r5V3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep58_r5V5 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep58_r5V5 = GHC.Types.KindRepFun $krep49_r5US $krep57_r5V4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep59_r5V6 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep59_r5V6 = GHC.Types.KindRepFun $krep14_r5TT $krep58_r5V5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Map1_r5V7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Map1_r5V7 = "'Map"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Map2_r5V8 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Map2_r5V8 = GHC.Types.TrNameS $tc'Map1_r5V7

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'Map :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tc'Map
  = GHC.Types.TyCon
      14379505272008014040##
      10084327610682124345##
      FDB.GADTForall.$trModule
      $tc'Map2_r5V8
      2#
      $krep59_r5V6

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep60_r5V9 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep60_r5V9 = GHC.Types.KindRepFun $krep57_r5V4 $krep57_r5V4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep61_r5Va :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep61_r5Va = GHC.Types.KindRepFun $krep13_r5TS $krep60_r5V9

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep62_r5Vb :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep62_r5Vb = GHC.Types.KindRepFun $krep25_r5U4 $krep61_r5Va

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Take1_r5Vc :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Take1_r5Vc = "'Take"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Take2_r5Vd :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Take2_r5Vd = GHC.Types.TrNameS $tc'Take1_r5Vc

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'Take :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tc'Take
  = GHC.Types.TyCon
      18145023462564812289##
      14897176176755836167##
      FDB.GADTForall.$trModule
      $tc'Take2_r5Vd
      2#
      $krep62_r5Vb

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep63_r5Ve :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep63_r5Ve = GHC.Types.KindRepFun $krep18_r5TX $krep60_r5V9

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep64_r5Vf :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep64_r5Vf = GHC.Types.KindRepFun $krep23_r5U2 $krep63_r5Ve

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'OrderBy1_r5Vg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'OrderBy1_r5Vg = "'OrderBy"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'OrderBy2_r5Vh :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'OrderBy2_r5Vh = GHC.Types.TrNameS $tc'OrderBy1_r5Vg

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'OrderBy :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tc'OrderBy
  = GHC.Types.TyCon
      14908185740511951096##
      14008337868706905896##
      FDB.GADTForall.$trModule
      $tc'OrderBy2_r5Vh
      2#
      $krep64_r5Vf

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep65_r5Vi :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep65_r5Vi
  = GHC.Types.:
      @ GHC.Types.KindRep $krep21_r5U0 (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep66_r5Vj :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep66_r5Vj
  = GHC.Types.KindRepTyConApp FDB.GADTForall.$tcQ $krep65_r5Vi

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep67_r5Vk :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep67_r5Vk = GHC.Types.KindRepFun $krep57_r5V4 $krep66_r5Vj

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep68_r5Vl :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep68_r5Vl = GHC.Types.KindRepFun $krep49_r5US $krep67_r5Vk

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep69_r5Vm :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep69_r5Vm
  = GHC.Types.:
      @ GHC.Types.KindRep $krep55_r5V2 (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep70_r5Vn :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep70_r5Vn
  = GHC.Types.KindRepTyConApp FDB.GADTForall.$tcQ $krep69_r5Vm

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep71_r5Vo :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep71_r5Vo = GHC.Types.KindRepFun $krep49_r5US $krep70_r5Vn

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep72_r5Vp :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep72_r5Vp = GHC.Types.KindRepFun $krep14_r5TT $krep71_r5Vo

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'GroupBy1_r5Vq :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'GroupBy1_r5Vq = "'GroupBy"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'GroupBy2_r5Vr :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'GroupBy2_r5Vr = GHC.Types.TrNameS $tc'GroupBy1_r5Vq

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'GroupBy :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tc'GroupBy
  = GHC.Types.TyCon
      13670223224869757845##
      8697476818672593631##
      FDB.GADTForall.$trModule
      $tc'GroupBy2_r5Vr
      2#
      $krep72_r5Vp

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcSQ1_r5Vs :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcSQ1_r5Vs = "SQ"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcSQ2_r5Vt :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcSQ2_r5Vt = GHC.Types.TrNameS $tcSQ1_r5Vs

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tcSQ :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tcSQ
  = GHC.Types.TyCon
      7724225419132177098##
      14063341351447723075##
      FDB.GADTForall.$trModule
      $tcSQ2_r5Vt
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep73_r5Vu :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep73_r5Vu
  = GHC.Types.:
      @ GHC.Types.KindRep $krep11_r5TQ (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep74_r5Vv :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep74_r5Vv
  = GHC.Types.KindRepTyConApp FDB.GADTForall.$tcSQ $krep73_r5Vu

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep75_r5Vw :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep75_r5Vw = GHC.Types.KindRepFun $krep13_r5TS $krep74_r5Vv

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep76_r5Vx :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep76_r5Vx = GHC.Types.KindRepFun $krep75_r5Vw $krep58_r5V5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'MapSQ1_r5Vy :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'MapSQ1_r5Vy = "'MapSQ"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'MapSQ2_r5Vz :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'MapSQ2_r5Vz = GHC.Types.TrNameS $tc'MapSQ1_r5Vy

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'MapSQ :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tc'MapSQ
  = GHC.Types.TyCon
      1443944143463630897##
      6245638742163314951##
      FDB.GADTForall.$trModule
      $tc'MapSQ2_r5Vz
      2#
      $krep76_r5Vx

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep77_r5VA :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep77_r5VA = GHC.Types.KindRepFun $krep49_r5US $krep74_r5Vv

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep78_r5VB :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep78_r5VB = GHC.Types.KindRepFun $krep32_r5Uh $krep77_r5VA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'StateFold1_r5VC :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'StateFold1_r5VC = "'StateFold"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'StateFold2_r5VD :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'StateFold2_r5VD = GHC.Types.TrNameS $tc'StateFold1_r5VC

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'StateFold :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tc'StateFold
  = GHC.Types.TyCon
      18411259465723880701##
      4094594497890411514##
      FDB.GADTForall.$trModule
      $tc'StateFold2_r5VD
      3#
      $krep78_r5VB

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep79_r5VE :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep79_r5VE
  = GHC.Types.:
      @ GHC.Types.KindRep $krep45_r5UK (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep80_r5VF :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep80_r5VF
  = GHC.Types.KindRepTyConApp FDB.GADTForall.$tcSQ $krep79_r5VE

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep81_r5VG :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep81_r5VG = GHC.Types.KindRepFun $krep41_r5UC $krep80_r5VF

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'FetchRow1_r5VH :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'FetchRow1_r5VH = "'FetchRow"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'FetchRow2_r5VI :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'FetchRow2_r5VI = GHC.Types.TrNameS $tc'FetchRow1_r5VH

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'FetchRow :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tc'FetchRow
  = GHC.Types.TyCon
      10701926302208271525##
      2310866770539922913##
      FDB.GADTForall.$trModule
      $tc'FetchRow2_r5VI
      1#
      $krep81_r5VG

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep82_r5VJ :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep82_r5VJ
  = GHC.Types.:
      @ GHC.Types.KindRep $krep3_r5TI (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep83_r5VK :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep83_r5VK
  = GHC.Types.KindRepTyConApp FDB.GADTForall.$tcSQ $krep82_r5VJ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep84_r5VL :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep84_r5VL = GHC.Types.KindRepFun $krep13_r5TS $krep83_r5VK

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep85_r5VM :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep85_r5VM = GHC.Types.KindRepFun $krep84_r5VL $krep51_r5UW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'FilterSQ1_r5VN :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'FilterSQ1_r5VN = "'FilterSQ"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'FilterSQ2_r5VO :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'FilterSQ2_r5VO = GHC.Types.TrNameS $tc'FilterSQ1_r5VN

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'FilterSQ :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tc'FilterSQ
  = GHC.Types.TyCon
      3550822472285476798##
      14511159754611735049##
      FDB.GADTForall.$trModule
      $tc'FilterSQ2_r5VO
      1#
      $krep85_r5VM

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcNatJoin1_r5VP :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcNatJoin1_r5VP = "NatJoin"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcNatJoin2_r5VQ :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcNatJoin2_r5VQ = GHC.Types.TrNameS $tcNatJoin1_r5VP

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tcNatJoin :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tcNatJoin
  = GHC.Types.TyCon
      4754972827294106747##
      18091397365184212835##
      FDB.GADTForall.$trModule
      $tcNatJoin2_r5VQ
      0#
      $krep8_r5TN

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep86_r5VR :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep86_r5VR
  = GHC.Types.:
      @ GHC.Types.KindRep $krep11_r5TQ (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep87_r5VS :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$krep87_r5VS
  = GHC.Types.: @ GHC.Types.KindRep $krep13_r5TS $krep86_r5VR

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep88_r5VT :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep88_r5VT
  = GHC.Types.KindRepTyConApp FDB.GADTForall.$tcNatJoin $krep87_r5VS

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep89_r5VU :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep89_r5VU = GHC.Types.KindRepFun $krep68_r5Vl $krep88_r5VT

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'C:NatJoin1_r5VV :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'C:NatJoin1_r5VV = "'C:NatJoin"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'C:NatJoin2_r5VW :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'C:NatJoin2_r5VW = GHC.Types.TrNameS $tc'C:NatJoin1_r5VV

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
FDB.GADTForall.$tc'C:NatJoin :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
FDB.GADTForall.$tc'C:NatJoin
  = GHC.Types.TyCon
      1773075345423852451##
      14997350799920276371##
      FDB.GADTForall.$trModule
      $tc'C:NatJoin2_r5VW
      2#
      $krep89_r5VU

-- RHS size: {terms: 10, types: 15, coercions: 0, joins: 0/0}
FDB.GADTForall.Agg
  :: forall a b s.
     (s -> a -> s) -> s -> (s -> b) -> FDB.GADTForall.Agg a b s
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []]
FDB.GADTForall.Agg
  = \ (@ a_a5iv)
      (@ b_a5iw)
      (@ s_a5ix)
      (eta_B3 [Occ=Once] :: s_a5ix[sk:0] -> a_a5iv[sk:0] -> s_a5ix[sk:0])
      (eta_B2 [Occ=Once] :: s_a5ix[sk:0])
      (eta_B1 [Occ=Once] :: s_a5ix[sk:0] -> b_a5iw[sk:0]) ->
      FDB.GADTForall.Agg @ a_a5iv @ b_a5iw @ s_a5ix eta_B3 eta_B2 eta_B1

-- RHS size: {terms: 6, types: 7, coercions: 0, joins: 0/0}
FDB.GADTForall.Filter
  :: forall a.
     (a -> GHC.Types.Bool) -> FDB.GADTForall.Q a -> FDB.GADTForall.Q a
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m1,
 Unf=OtherCon []]
FDB.GADTForall.Filter
  = \ (@ a_a5iE)
      (eta_B2 [Occ=Once] :: a_a5iE -> GHC.Types.Bool)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.Q a_a5iE) ->
      FDB.GADTForall.Filter @ a_a5iE eta_B2 eta_B1

-- RHS size: {terms: 7, types: 10, coercions: 0, joins: 0/0}
FDB.GADTForall.Map
  :: forall a b. (b -> a) -> FDB.GADTForall.Q b -> FDB.GADTForall.Q a
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=OtherCon []]
FDB.GADTForall.Map
  = \ (@ a_a5iG)
      (@ b_X5iG)
      (eta_B2 [Occ=Once] :: b_X5iG -> a_a5iG)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.Q b_X5iG) ->
      FDB.GADTForall.Map @ a_a5iG @ b_X5iG eta_B2 eta_B1

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
FDB.GADTForall.Read
  :: forall a. FDB.GADTForall.Table a -> FDB.GADTForall.Q a
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []]
FDB.GADTForall.Read
  = \ (@ a_a5iH)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.Table a_a5iH) ->
      FDB.GADTForall.Read @ a_a5iH eta_B1

-- RHS size: {terms: 9, types: 23, coercions: 1, joins: 0/0}
FDB.GADTForall.GroupBy
  :: forall a v k.
     (a GHC.Prim.~# (k, FDB.GADTForall.Q v)) =>
     (v -> k) -> FDB.GADTForall.Q v -> FDB.GADTForall.Q a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []]
FDB.GADTForall.GroupBy
  = \ (@ a_a5iD)
      (@ v_X5iJ)
      (@ k_X5iL)
      (eta_B3 :: a_a5iD GHC.Prim.~# (k_X5iL, FDB.GADTForall.Q v_X5iJ))
      (eta_B2 [Occ=Once] :: v_X5iJ -> k_X5iL)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.Q v_X5iJ) ->
      FDB.GADTForall.GroupBy
        @ a_a5iD
        @ v_X5iJ
        @ k_X5iL
        @~ (eta_B3 :: a_a5iD GHC.Prim.~# (k_X5iL, FDB.GADTForall.Q v_X5iJ))
        eta_B2
        eta_B1

-- RHS size: {terms: 7, types: 11, coercions: 0, joins: 0/0}
FDB.GADTForall.MapSQ
  :: forall b v.
     (v -> FDB.GADTForall.SQ b)
     -> FDB.GADTForall.Q v -> FDB.GADTForall.Q b
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=OtherCon []]
FDB.GADTForall.MapSQ
  = \ (@ b_a5iL)
      (@ v_X5iL)
      (eta_B2 [Occ=Once] :: v_X5iL -> FDB.GADTForall.SQ b_a5iL)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.Q v_X5iL) ->
      FDB.GADTForall.MapSQ @ b_a5iL @ v_X5iL eta_B2 eta_B1

-- RHS size: {terms: 6, types: 8, coercions: 0, joins: 0/0}
FDB.GADTForall.FilterSQ
  :: forall a.
     (a -> FDB.GADTForall.SQ GHC.Types.Bool)
     -> FDB.GADTForall.Q a -> FDB.GADTForall.Q a
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m6,
 Unf=OtherCon []]
FDB.GADTForall.FilterSQ
  = \ (@ a_a5iM)
      (eta_B2 [Occ=Once] :: a_a5iM -> FDB.GADTForall.SQ GHC.Types.Bool)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.Q a_a5iM) ->
      FDB.GADTForall.FilterSQ @ a_a5iM eta_B2 eta_B1

-- RHS size: {terms: 9, types: 12, coercions: 0, joins: 0/0}
FDB.GADTForall.OrderBy
  :: forall a b.
     GHC.Classes.Ord b =>
     (a -> b) -> FDB.GADTForall.Q a -> FDB.GADTForall.Q a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []]
FDB.GADTForall.OrderBy
  = \ (@ a_a5iO)
      (@ b_X5iO)
      (eta_B3 [Occ=Once] :: GHC.Classes.Ord b_X5iO)
      (eta_B2 [Occ=Once] :: a_a5iO -> b_X5iO)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.Q a_a5iO) ->
      FDB.GADTForall.OrderBy @ a_a5iO @ b_X5iO eta_B3 eta_B2 eta_B1

-- RHS size: {terms: 9, types: 11, coercions: 0, joins: 0/0}
FDB.GADTForall.Take
  :: forall a n.
     GHC.Real.Integral n =>
     n -> FDB.GADTForall.Q a -> FDB.GADTForall.Q a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []]
FDB.GADTForall.Take
  = \ (@ a_a5iQ)
      (@ n_X5iQ)
      (eta_B3 [Occ=Once] :: GHC.Real.Integral n_X5iQ)
      (eta_B2 [Occ=Once] :: n_X5iQ)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.Q a_a5iQ) ->
      FDB.GADTForall.Take @ a_a5iQ @ n_X5iQ eta_B3 eta_B2 eta_B1

-- RHS size: {terms: 6, types: 6, coercions: 0, joins: 0/0}
FDB.GADTForall.Row
  :: forall a. FDB.GADTForall.RowRef a -> a -> FDB.GADTForall.Row a
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []]
FDB.GADTForall.Row
  = \ (@ a_a5io)
      (eta_B2 [Occ=Once] :: FDB.GADTForall.RowRef a_a5io[sk:0])
      (eta_B1 [Occ=Once] :: a_a5io[sk:0]) ->
      FDB.GADTForall.Row @ a_a5io eta_B2 eta_B1

-- RHS size: {terms: 6, types: 5, coercions: 0, joins: 0/0}
FDB.GADTForall.RowRef
  :: forall a.
     FDB.GADTForall.TableId
     -> FDB.GADTForall.RowId -> FDB.GADTForall.RowRef a
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []]
FDB.GADTForall.RowRef
  = \ (@ a_a5in)
      (eta_B2 [Occ=Once] :: FDB.GADTForall.TableId)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.RowId) ->
      FDB.GADTForall.RowRef @ a_a5in eta_B2 eta_B1

-- RHS size: {terms: 6, types: 16, coercions: 1, joins: 0/0}
FDB.GADTForall.FetchRow
  :: forall a a.
     (a GHC.Prim.~# FDB.GADTForall.Row a) =>
     FDB.GADTForall.RowRef a -> FDB.GADTForall.SQ a
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=OtherCon []]
FDB.GADTForall.FetchRow
  = \ (@ a_a5iy)
      (@ a_X5iA)
      (eta_B2 :: a_a5iy GHC.Prim.~# FDB.GADTForall.Row a_X5iA)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.RowRef a_X5iA) ->
      FDB.GADTForall.FetchRow
        @ a_a5iy
        @ a_X5iA
        @~ (eta_B2 :: a_a5iy GHC.Prim.~# FDB.GADTForall.Row a_X5iA)
        eta_B1

-- RHS size: {terms: 8, types: 15, coercions: 0, joins: 0/0}
FDB.GADTForall.StateFold
  :: forall b a s.
     FDB.GADTForall.Agg a b s
     -> FDB.GADTForall.Q a -> FDB.GADTForall.SQ b
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=OtherCon []]
FDB.GADTForall.StateFold
  = \ (@ b_a5iB)
      (@ a_X5iB)
      (@ s_X5iE)
      (eta_B2 [Occ=Once] :: FDB.GADTForall.Agg a_X5iB b_a5iB s_X5iE)
      (eta_B1 [Occ=Once] :: FDB.GADTForall.Q a_X5iB) ->
      FDB.GADTForall.StateFold @ b_a5iB @ a_X5iB @ s_X5iE eta_B2 eta_B1



[7 of 9] Compiling FDB.FDB          ( FDB/FDB.hs, FDB/FDB.o )

==================== CorePrep ====================
Result size of CorePrep
  = {terms: 14, types: 5, coercions: 0, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule1_r6I7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule1_r6I7 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule2_r6Ig :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule2_r6Ig = GHC.Types.TrNameS $trModule1_r6I7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule3_r6Ih :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule3_r6Ih = "FDB.FDB"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule4_r6Ii :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule4_r6Ii = GHC.Types.TrNameS $trModule3_r6Ih

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
FDB.FDB.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
FDB.FDB.$trModule
  = GHC.Types.Module $trModule2_r6Ig $trModule4_r6Ii



[8 of 9] Compiling TPCH.Functional.Schema ( TPCH/Functional/Schema.hs, TPCH/Functional/Schema.o )

==================== CorePrep ====================
Result size of CorePrep
  = {terms: 1,606, types: 1,441, coercions: 56, joins: 0/0}

-- RHS size: {terms: 9, types: 4, coercions: 0, joins: 0/0}
$c==_r6NE
  :: TPCH.Functional.Schema.Region
     -> TPCH.Functional.Schema.Region -> GHC.Types.Bool
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
$c==_r6NE
  = \ (ds_s76e [Occ=Once!] :: TPCH.Functional.Schema.Region)
      (ds1_s76f [Occ=Once!] :: TPCH.Functional.Schema.Region) ->
      case ds_s76e of { TPCH.Functional.Schema.EMEA ->
      case ds1_s76f of { TPCH.Functional.Schema.EMEA -> GHC.Types.True }
      }

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$fEqRegion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq TPCH.Functional.Schema.Region
[GblId[DFunId]]
TPCH.Functional.Schema.$fEqRegion
  = GHC.Classes.C:Eq
      @ TPCH.Functional.Schema.Region $c==_r6NE $c/=_r74a

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$c/=_r74a
  :: TPCH.Functional.Schema.Region
     -> TPCH.Functional.Schema.Region -> GHC.Types.Bool
[GblId]
$c/=_r74a
  = GHC.Classes.$dm/=
      @ TPCH.Functional.Schema.Region TPCH.Functional.Schema.$fEqRegion
end Rec }

-- RHS size: {terms: 18, types: 5, coercions: 0, joins: 0/0}
$c==1_r74b
  :: TPCH.Functional.Schema.Nation
     -> TPCH.Functional.Schema.Nation -> GHC.Types.Bool
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
$c==1_r74b
  = \ (ds_s76i [Occ=Once!] :: TPCH.Functional.Schema.Nation)
      (ds1_s76j [Occ=Once*!] :: TPCH.Functional.Schema.Nation) ->
      case ds_s76i of {
        TPCH.Functional.Schema.France ->
          case ds1_s76j of {
            TPCH.Functional.Schema.France -> GHC.Types.True;
            TPCH.Functional.Schema.Germany -> GHC.Types.False
          };
        TPCH.Functional.Schema.Germany ->
          case ds1_s76j of {
            TPCH.Functional.Schema.France -> GHC.Types.False;
            TPCH.Functional.Schema.Germany -> GHC.Types.True
          }
      }

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$fEqNation [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq TPCH.Functional.Schema.Nation
[GblId[DFunId]]
TPCH.Functional.Schema.$fEqNation
  = GHC.Classes.C:Eq
      @ TPCH.Functional.Schema.Nation $c==1_r74b $c/=1_r74c

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$c/=1_r74c
  :: TPCH.Functional.Schema.Nation
     -> TPCH.Functional.Schema.Nation -> GHC.Types.Bool
[GblId]
$c/=1_r74c
  = GHC.Classes.$dm/=
      @ TPCH.Functional.Schema.Nation TPCH.Functional.Schema.$fEqNation
end Rec }

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.p_comment
  :: TPCH.Functional.Schema.Part -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.p_comment
  = \ (ds_s76n [Occ=Once!] :: TPCH.Functional.Schema.Part) ->
      case ds_s76n of
      { TPCH.Functional.Schema.Part _ [Occ=Dead] _ [Occ=Dead]
                                    _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                    ds8_s76w [Occ=Once] ->
      ds8_s76w
      }

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.p_retailprice
  :: TPCH.Functional.Schema.Part -> FDB.MoreTypes.Decimal
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.p_retailprice
  = \ (ds_s76x [Occ=Once!] :: TPCH.Functional.Schema.Part) ->
      case ds_s76x of
      { TPCH.Functional.Schema.Part _ [Occ=Dead] _ [Occ=Dead]
                                    _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                    ds7_s76F [Occ=Once] _ [Occ=Dead] ->
      ds7_s76F
      }

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.p_container
  :: TPCH.Functional.Schema.Part -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.p_container
  = \ (ds_s76H [Occ=Once!] :: TPCH.Functional.Schema.Part) ->
      case ds_s76H of
      { TPCH.Functional.Schema.Part _ [Occ=Dead] _ [Occ=Dead]
                                    _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds6_s76O [Occ=Once]
                                    _ [Occ=Dead] _ [Occ=Dead] ->
      ds6_s76O
      }

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.p_size
  :: TPCH.Functional.Schema.Part -> GHC.Types.Int
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.p_size
  = \ (ds_s76R [Occ=Once!] :: TPCH.Functional.Schema.Part) ->
      case ds_s76R of
      { TPCH.Functional.Schema.Part _ [Occ=Dead] _ [Occ=Dead]
                                    _ [Occ=Dead] _ [Occ=Dead] ds5_s76X [Occ=Once] _ [Occ=Dead]
                                    _ [Occ=Dead] _ [Occ=Dead] ->
      ds5_s76X
      }

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.p_type
  :: TPCH.Functional.Schema.Part -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.p_type
  = \ (ds_s771 [Occ=Once!] :: TPCH.Functional.Schema.Part) ->
      case ds_s771 of
      { TPCH.Functional.Schema.Part _ [Occ=Dead] _ [Occ=Dead]
                                    _ [Occ=Dead] ds4_s776 [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                                    _ [Occ=Dead] _ [Occ=Dead] ->
      ds4_s776
      }

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.p_brand
  :: TPCH.Functional.Schema.Part -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.p_brand
  = \ (ds_s77b [Occ=Once!] :: TPCH.Functional.Schema.Part) ->
      case ds_s77b of
      { TPCH.Functional.Schema.Part _ [Occ=Dead] _ [Occ=Dead]
                                    ds3_s77f [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                    _ [Occ=Dead] _ [Occ=Dead] ->
      ds3_s77f
      }

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.p_mfgr
  :: TPCH.Functional.Schema.Part -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.p_mfgr
  = \ (ds_s77l [Occ=Once!] :: TPCH.Functional.Schema.Part) ->
      case ds_s77l of
      { TPCH.Functional.Schema.Part _ [Occ=Dead] ds2_s77o [Occ=Once]
                                    _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                    _ [Occ=Dead] ->
      ds2_s77o
      }

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.p_name
  :: TPCH.Functional.Schema.Part -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.p_name
  = \ (ds_s77v [Occ=Once!] :: TPCH.Functional.Schema.Part) ->
      case ds_s77v of
      { TPCH.Functional.Schema.Part ds1_s77x [Occ=Once] _ [Occ=Dead]
                                    _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                    _ [Occ=Dead] ->
      ds1_s77x
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.c_comment
  :: TPCH.Functional.Schema.Customer -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.c_comment
  = \ (ds_s77F [Occ=Once!] :: TPCH.Functional.Schema.Customer) ->
      case ds_s77F of
      { TPCH.Functional.Schema.Customer _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        ds7_s77N [Occ=Once] ->
      ds7_s77N
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.c_mktsegment
  :: TPCH.Functional.Schema.Customer -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.c_mktsegment
  = \ (ds_s77O [Occ=Once!] :: TPCH.Functional.Schema.Customer) ->
      case ds_s77O of
      { TPCH.Functional.Schema.Customer _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds6_s77V [Occ=Once]
                                        _ [Occ=Dead] ->
      ds6_s77V
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.c_acctbal
  :: TPCH.Functional.Schema.Customer -> FDB.MoreTypes.Decimal
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.c_acctbal
  = \ (ds_s77X [Occ=Once!] :: TPCH.Functional.Schema.Customer) ->
      case ds_s77X of
      { TPCH.Functional.Schema.Customer _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ds5_s783 [Occ=Once] _ [Occ=Dead]
                                        _ [Occ=Dead] ->
      ds5_s783
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.c_phone
  :: TPCH.Functional.Schema.Customer -> FDB.MoreTypes.PhoneNumber
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.c_phone
  = \ (ds_s786 [Occ=Once!] :: TPCH.Functional.Schema.Customer) ->
      case ds_s786 of
      { TPCH.Functional.Schema.Customer _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] ds4_s78b [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] ->
      ds4_s78b
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.c_nation
  :: TPCH.Functional.Schema.Customer -> TPCH.Functional.Schema.Nation
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.c_nation
  = \ (ds_s78f [Occ=Once!] :: TPCH.Functional.Schema.Customer) ->
      case ds_s78f of
      { TPCH.Functional.Schema.Customer _ [Occ=Dead] _ [Occ=Dead]
                                        ds3_s78j [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] ->
      ds3_s78j
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.c_address
  :: TPCH.Functional.Schema.Customer -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.c_address
  = \ (ds_s78o [Occ=Once!] :: TPCH.Functional.Schema.Customer) ->
      case ds_s78o of
      { TPCH.Functional.Schema.Customer _ [Occ=Dead] ds2_s78r [Occ=Once]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] ->
      ds2_s78r
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.c_name
  :: TPCH.Functional.Schema.Customer -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.c_name
  = \ (ds_s78x [Occ=Once!] :: TPCH.Functional.Schema.Customer) ->
      case ds_s78x of
      { TPCH.Functional.Schema.Customer ds1_s78z [Occ=Once] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] ->
      ds1_s78z
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.o_comment
  :: TPCH.Functional.Schema.Order -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.o_comment
  = \ (ds_s78G [Occ=Once!] :: TPCH.Functional.Schema.Order) ->
      case ds_s78G of
      { TPCH.Functional.Schema.Order _ [Occ=Dead] _ [Occ=Dead]
                                     _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                     _ [Occ=Dead] ds8_s78P [Occ=Once] ->
      ds8_s78P
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.o_shippriority
  :: TPCH.Functional.Schema.Order -> GHC.Types.Int
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.o_shippriority
  = \ (ds_s78Q [Occ=Once!] :: TPCH.Functional.Schema.Order) ->
      case ds_s78Q of
      { TPCH.Functional.Schema.Order _ [Occ=Dead] _ [Occ=Dead]
                                     _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                     ds7_s78Y [Occ=Once] _ [Occ=Dead] ->
      ds7_s78Y
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.o_clerk
  :: TPCH.Functional.Schema.Order -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.o_clerk
  = \ (ds_s790 [Occ=Once!] :: TPCH.Functional.Schema.Order) ->
      case ds_s790 of
      { TPCH.Functional.Schema.Order _ [Occ=Dead] _ [Occ=Dead]
                                     _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds6_s797 [Occ=Once]
                                     _ [Occ=Dead] _ [Occ=Dead] ->
      ds6_s797
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.o_orderpriority
  :: TPCH.Functional.Schema.Order -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.o_orderpriority
  = \ (ds_s79a [Occ=Once!] :: TPCH.Functional.Schema.Order) ->
      case ds_s79a of
      { TPCH.Functional.Schema.Order _ [Occ=Dead] _ [Occ=Dead]
                                     _ [Occ=Dead] _ [Occ=Dead] ds5_s79g [Occ=Once] _ [Occ=Dead]
                                     _ [Occ=Dead] _ [Occ=Dead] ->
      ds5_s79g
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.o_orderdate
  :: TPCH.Functional.Schema.Order -> FDB.MoreTypes.Date
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.o_orderdate
  = \ (ds_s79k [Occ=Once!] :: TPCH.Functional.Schema.Order) ->
      case ds_s79k of
      { TPCH.Functional.Schema.Order _ [Occ=Dead] _ [Occ=Dead]
                                     _ [Occ=Dead] ds4_s79p [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                                     _ [Occ=Dead] _ [Occ=Dead] ->
      ds4_s79p
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.o_totalprice
  :: TPCH.Functional.Schema.Order -> FDB.MoreTypes.Decimal
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.o_totalprice
  = \ (ds_s79u [Occ=Once!] :: TPCH.Functional.Schema.Order) ->
      case ds_s79u of
      { TPCH.Functional.Schema.Order _ [Occ=Dead] _ [Occ=Dead]
                                     ds3_s79y [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                     _ [Occ=Dead] _ [Occ=Dead] ->
      ds3_s79y
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.o_orderstatus
  :: TPCH.Functional.Schema.Order -> GHC.Types.Char
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.o_orderstatus
  = \ (ds_s79E [Occ=Once!] :: TPCH.Functional.Schema.Order) ->
      case ds_s79E of
      { TPCH.Functional.Schema.Order _ [Occ=Dead] ds2_s79H [Occ=Once]
                                     _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                     _ [Occ=Dead] _ [Occ=Dead] ->
      ds2_s79H
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.o_custref
  :: TPCH.Functional.Schema.Order
     -> FDB.GADTForall.TableRef TPCH.Functional.Schema.Customer
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.o_custref
  = \ (ds_s79O [Occ=Once!] :: TPCH.Functional.Schema.Order) ->
      case ds_s79O of
      { TPCH.Functional.Schema.Order ds1_s79Q [Occ=Once] _ [Occ=Dead]
                                     _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                     _ [Occ=Dead] _ [Occ=Dead] ->
      ds1_s79Q
      }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.s_comment
  :: TPCH.Functional.Schema.Supplier -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.s_comment
  = \ (ds_s79Y [Occ=Once!] :: TPCH.Functional.Schema.Supplier) ->
      case ds_s79Y of
      { TPCH.Functional.Schema.Supplier _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        ds6_s7a5 [Occ=Once] ->
      ds6_s7a5
      }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.s_acctbal
  :: TPCH.Functional.Schema.Supplier -> FDB.MoreTypes.Decimal
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.s_acctbal
  = \ (ds_s7a6 [Occ=Once!] :: TPCH.Functional.Schema.Supplier) ->
      case ds_s7a6 of
      { TPCH.Functional.Schema.Supplier _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ds5_s7ac [Occ=Once]
                                        _ [Occ=Dead] ->
      ds5_s7ac
      }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.s_phone
  :: TPCH.Functional.Schema.Supplier -> FDB.MoreTypes.PhoneNumber
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.s_phone
  = \ (ds_s7ae [Occ=Once!] :: TPCH.Functional.Schema.Supplier) ->
      case ds_s7ae of
      { TPCH.Functional.Schema.Supplier _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] ds4_s7aj [Occ=Once] _ [Occ=Dead]
                                        _ [Occ=Dead] ->
      ds4_s7aj
      }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.s_nation
  :: TPCH.Functional.Schema.Supplier -> TPCH.Functional.Schema.Nation
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.s_nation
  = \ (ds_s7am [Occ=Once!] :: TPCH.Functional.Schema.Supplier) ->
      case ds_s7am of
      { TPCH.Functional.Schema.Supplier _ [Occ=Dead] _ [Occ=Dead]
                                        ds3_s7aq [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] ->
      ds3_s7aq
      }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.s_address
  :: TPCH.Functional.Schema.Supplier -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.s_address
  = \ (ds_s7au [Occ=Once!] :: TPCH.Functional.Schema.Supplier) ->
      case ds_s7au of
      { TPCH.Functional.Schema.Supplier _ [Occ=Dead] ds2_s7ax [Occ=Once]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
      ds2_s7ax
      }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.s_name
  :: TPCH.Functional.Schema.Supplier -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.s_name
  = \ (ds_s7aC [Occ=Once!] :: TPCH.Functional.Schema.Supplier) ->
      case ds_s7aC of
      { TPCH.Functional.Schema.Supplier ds1_s7aE [Occ=Once] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
      ds1_s7aE
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.l_comment
  :: TPCH.Functional.Schema.LineItem -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.l_comment
  = \ (ds_s7aK [Occ=Once!] :: TPCH.Functional.Schema.LineItem) ->
      case ds_s7aK of
      { TPCH.Functional.Schema.LineItem _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] ds16_s7b1 [Occ=Once] ->
      ds16_s7b1
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.l_shipmode
  :: TPCH.Functional.Schema.LineItem -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.l_shipmode
  = \ (ds_s7b2 [Occ=Once!] :: TPCH.Functional.Schema.LineItem) ->
      case ds_s7b2 of
      { TPCH.Functional.Schema.LineItem _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        ds15_s7bi [Occ=Once] _ [Occ=Dead] ->
      ds15_s7bi
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.l_shipinstruct
  :: TPCH.Functional.Schema.LineItem -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.l_shipinstruct
  = \ (ds_s7bk [Occ=Once!] :: TPCH.Functional.Schema.LineItem) ->
      case ds_s7bk of
      { TPCH.Functional.Schema.LineItem _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds14_s7bz [Occ=Once]
                                        _ [Occ=Dead] _ [Occ=Dead] ->
      ds14_s7bz
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.l_receiptdate
  :: TPCH.Functional.Schema.LineItem -> FDB.MoreTypes.Date
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.l_receiptdate
  = \ (ds_s7bC [Occ=Once!] :: TPCH.Functional.Schema.LineItem) ->
      case ds_s7bC of
      { TPCH.Functional.Schema.LineItem _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ds13_s7bQ [Occ=Once] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ->
      ds13_s7bQ
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.l_commitdate
  :: TPCH.Functional.Schema.LineItem -> FDB.MoreTypes.Date
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.l_commitdate
  = \ (ds_s7bU [Occ=Once!] :: TPCH.Functional.Schema.LineItem) ->
      case ds_s7bU of
      { TPCH.Functional.Schema.LineItem _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] ds12_s7c7 [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ->
      ds12_s7c7
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.l_shipdate
  :: TPCH.Functional.Schema.LineItem -> FDB.MoreTypes.Date
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.l_shipdate
  = \ (ds_s7cc [Occ=Once!] :: TPCH.Functional.Schema.LineItem) ->
      case ds_s7cc of
      { TPCH.Functional.Schema.LineItem _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        ds11_s7co [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ->
      ds11_s7co
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.l_linestatus
  :: TPCH.Functional.Schema.LineItem -> GHC.Types.Char
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.l_linestatus
  = \ (ds_s7cu [Occ=Once!] :: TPCH.Functional.Schema.LineItem) ->
      case ds_s7cu of
      { TPCH.Functional.Schema.LineItem _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds10_s7cF [Occ=Once]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ->
      ds10_s7cF
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.l_returnflag
  :: TPCH.Functional.Schema.LineItem -> GHC.Types.Char
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.l_returnflag
  = \ (ds_s7cM [Occ=Once!] :: TPCH.Functional.Schema.LineItem) ->
      case ds_s7cM of
      { TPCH.Functional.Schema.LineItem _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ds9_s7cW [Occ=Once] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ->
      ds9_s7cW
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.l_tax
  :: TPCH.Functional.Schema.LineItem -> FDB.MoreTypes.Decimal
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.l_tax
  = \ (ds_s7d4 [Occ=Once!] :: TPCH.Functional.Schema.LineItem) ->
      case ds_s7d4 of
      { TPCH.Functional.Schema.LineItem _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] ds8_s7dd [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ->
      ds8_s7dd
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.l_discount
  :: TPCH.Functional.Schema.LineItem -> FDB.MoreTypes.Decimal
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.l_discount
  = \ (ds_s7dm [Occ=Once!] :: TPCH.Functional.Schema.LineItem) ->
      case ds_s7dm of
      { TPCH.Functional.Schema.LineItem _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        ds7_s7du [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ->
      ds7_s7du
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.l_extendedprice
  :: TPCH.Functional.Schema.LineItem -> FDB.MoreTypes.Decimal
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.l_extendedprice
  = \ (ds_s7dE [Occ=Once!] :: TPCH.Functional.Schema.LineItem) ->
      case ds_s7dE of
      { TPCH.Functional.Schema.LineItem _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds6_s7dL [Occ=Once]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ->
      ds6_s7dL
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.l_quantity
  :: TPCH.Functional.Schema.LineItem -> FDB.MoreTypes.Decimal
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.l_quantity
  = \ (ds_s7dW [Occ=Once!] :: TPCH.Functional.Schema.LineItem) ->
      case ds_s7dW of
      { TPCH.Functional.Schema.LineItem _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ds5_s7e2 [Occ=Once] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ->
      ds5_s7e2
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.l_linenumber
  :: TPCH.Functional.Schema.LineItem -> GHC.Types.Int
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.l_linenumber
  = \ (ds_s7ee [Occ=Once!] :: TPCH.Functional.Schema.LineItem) ->
      case ds_s7ee of
      { TPCH.Functional.Schema.LineItem _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] ds4_s7ej [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ->
      ds4_s7ej
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.l_suppref
  :: TPCH.Functional.Schema.LineItem
     -> FDB.GADTForall.TableRef TPCH.Functional.Schema.Supplier
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.l_suppref
  = \ (ds_s7ew [Occ=Once!] :: TPCH.Functional.Schema.LineItem) ->
      case ds_s7ew of
      { TPCH.Functional.Schema.LineItem _ [Occ=Dead] _ [Occ=Dead]
                                        ds3_s7eA [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ->
      ds3_s7eA
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.l_partref
  :: TPCH.Functional.Schema.LineItem
     -> FDB.GADTForall.TableRef TPCH.Functional.Schema.Part
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.l_partref
  = \ (ds_s7eO [Occ=Once!] :: TPCH.Functional.Schema.LineItem) ->
      case ds_s7eO of
      { TPCH.Functional.Schema.LineItem _ [Occ=Dead] ds2_s7eR [Occ=Once]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ->
      ds2_s7eR
      }

-- RHS size: {terms: 5, types: 21, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.l_orderref
  :: TPCH.Functional.Schema.LineItem
     -> FDB.GADTForall.TableRef TPCH.Functional.Schema.Order
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.l_orderref
  = \ (ds_s7f6 [Occ=Once!] :: TPCH.Functional.Schema.LineItem) ->
      case ds_s7f6 of
      { TPCH.Functional.Schema.LineItem ds1_s7f8 [Occ=Once] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ->
      ds1_s7f8
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.ps_comment
  :: TPCH.Functional.Schema.PartSupp -> GHC.Base.String
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.ps_comment
  = \ (ds_s7fo [Occ=Once!] :: TPCH.Functional.Schema.PartSupp) ->
      case ds_s7fo of
      { TPCH.Functional.Schema.PartSupp _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] ds5_s7fu [Occ=Once] ->
      ds5_s7fu
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.ps_supplycost
  :: TPCH.Functional.Schema.PartSupp -> FDB.MoreTypes.Decimal
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.ps_supplycost
  = \ (ds_s7fv [Occ=Once!] :: TPCH.Functional.Schema.PartSupp) ->
      case ds_s7fv of
      { TPCH.Functional.Schema.PartSupp _ [Occ=Dead] _ [Occ=Dead]
                                        _ [Occ=Dead] ds4_s7fA [Occ=Once] _ [Occ=Dead] ->
      ds4_s7fA
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.ps_availqty
  :: TPCH.Functional.Schema.PartSupp -> GHC.Types.Int
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.ps_availqty
  = \ (ds_s7fC [Occ=Once!] :: TPCH.Functional.Schema.PartSupp) ->
      case ds_s7fC of
      { TPCH.Functional.Schema.PartSupp _ [Occ=Dead] _ [Occ=Dead]
                                        ds3_s7fG [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
      ds3_s7fG
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.ps_suppref
  :: TPCH.Functional.Schema.PartSupp
     -> FDB.GADTForall.TableRef TPCH.Functional.Schema.Supplier
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.ps_suppref
  = \ (ds_s7fJ [Occ=Once!] :: TPCH.Functional.Schema.PartSupp) ->
      case ds_s7fJ of
      { TPCH.Functional.Schema.PartSupp _ [Occ=Dead] ds2_s7fM [Occ=Once]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
      ds2_s7fM
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.ps_partref
  :: TPCH.Functional.Schema.PartSupp
     -> FDB.GADTForall.TableRef TPCH.Functional.Schema.Part
[GblId[[RecSel]], Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.ps_partref
  = \ (ds_s7fQ [Occ=Once!] :: TPCH.Functional.Schema.PartSupp) ->
      case ds_s7fQ of
      { TPCH.Functional.Schema.PartSupp ds1_s7fS [Occ=Once] _ [Occ=Dead]
                                        _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
      ds1_s7fS
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7fX :: GHC.Base.String
[LclId]
sat_s7fX = GHC.CString.unpackCString# "LineItems"#

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.lineitems
  :: FDB.GADTForall.Table TPCH.Functional.Schema.LineItem
[GblId]
TPCH.Functional.Schema.lineitems
  = FDB.GADTForall.findTable
      @ TPCH.Functional.Schema.LineItem sat_s7fX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule1_r74d :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule1_r74d = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule2_r74e :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule2_r74e = GHC.Types.TrNameS $trModule1_r74d

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule3_r74f :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule3_r74f = "TPCH.Functional.Schema"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule4_r74g :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule4_r74g = GHC.Types.TrNameS $trModule3_r74f

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.$trModule
  = GHC.Types.Module $trModule2_r74e $trModule4_r74g

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r74h :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep_r74h
  = GHC.Types.KindRepTyConApp
      GHC.Tuple.$tc() (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r74i :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep1_r74i
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcChar (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_r74j :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep2_r74j
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcDouble (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_r74k :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep3_r74k
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcInt (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep4_r74l :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep4_r74l
  = GHC.Types.:
      @ GHC.Types.KindRep $krep1_r74i (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5_r74m :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep5_r74m = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep4_r74l

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcPart1_r74n :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcPart1_r74n = "Part"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcPart2_r74o :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcPart2_r74o = GHC.Types.TrNameS $tcPart1_r74n

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tcPart :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
TPCH.Functional.Schema.$tcPart
  = GHC.Types.TyCon
      12636939280764832122##
      2042036841775798596##
      TPCH.Functional.Schema.$trModule
      $tcPart2_r74o
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep6_r74p :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep6_r74p
  = GHC.Types.KindRepTyConApp
      TPCH.Functional.Schema.$tcPart (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_r74q :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep7_r74q = GHC.Types.KindRepFun $krep5_r74m $krep6_r74p

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_r74r :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep8_r74r = GHC.Types.KindRepFun $krep2_r74j $krep7_r74q

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_r74s :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep9_r74s = GHC.Types.KindRepFun $krep5_r74m $krep8_r74r

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_r74t :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep10_r74t = GHC.Types.KindRepFun $krep3_r74k $krep9_r74s

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_r74u :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep11_r74u = GHC.Types.KindRepFun $krep5_r74m $krep10_r74t

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_r74v :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep12_r74v = GHC.Types.KindRepFun $krep5_r74m $krep11_r74u

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_r74w :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep13_r74w = GHC.Types.KindRepFun $krep5_r74m $krep12_r74v

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_r74x :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep14_r74x = GHC.Types.KindRepFun $krep5_r74m $krep13_r74w

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Part1_r74y :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Part1_r74y = "'Part"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Part2_r74z :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Part2_r74z = GHC.Types.TrNameS $tc'Part1_r74y

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tc'Part :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
TPCH.Functional.Schema.$tc'Part
  = GHC.Types.TyCon
      2861360684592645105##
      14440751847480628405##
      TPCH.Functional.Schema.$trModule
      $tc'Part2_r74z
      0#
      $krep14_r74x

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep15_r74A :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep15_r74A
  = GHC.Types.:
      @ GHC.Types.KindRep $krep6_r74p (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep16_r74B :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep16_r74B
  = GHC.Types.KindRepTyConApp FDB.GADTForall.$tcRowRef $krep15_r74A

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcNation1_r74C :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcNation1_r74C = "Nation"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcNation2_r74D :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcNation2_r74D = GHC.Types.TrNameS $tcNation1_r74C

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tcNation :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
TPCH.Functional.Schema.$tcNation
  = GHC.Types.TyCon
      10710764971294019521##
      2958077427421035359##
      TPCH.Functional.Schema.$trModule
      $tcNation2_r74D
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep17_r74E :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep17_r74E
  = GHC.Types.KindRepTyConApp
      TPCH.Functional.Schema.$tcNation (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'France1_r74F :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'France1_r74F = "'France"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'France2_r74G :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'France2_r74G = GHC.Types.TrNameS $tc'France1_r74F

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tc'France :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
TPCH.Functional.Schema.$tc'France
  = GHC.Types.TyCon
      15209813697351554211##
      883766417185207263##
      TPCH.Functional.Schema.$trModule
      $tc'France2_r74G
      0#
      $krep17_r74E

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Germany1_r74H :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Germany1_r74H = "'Germany"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Germany2_r74I :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Germany2_r74I = GHC.Types.TrNameS $tc'Germany1_r74H

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tc'Germany :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
TPCH.Functional.Schema.$tc'Germany
  = GHC.Types.TyCon
      1372385427742964851##
      11954998232734438622##
      TPCH.Functional.Schema.$trModule
      $tc'Germany2_r74I
      0#
      $krep17_r74E

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcCustomer1_r74J :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcCustomer1_r74J = "Customer"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcCustomer2_r74K :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcCustomer2_r74K = GHC.Types.TrNameS $tcCustomer1_r74J

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tcCustomer :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
TPCH.Functional.Schema.$tcCustomer
  = GHC.Types.TyCon
      7146533123847939809##
      6452800127542812900##
      TPCH.Functional.Schema.$trModule
      $tcCustomer2_r74K
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep18_r74L :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep18_r74L
  = GHC.Types.KindRepTyConApp
      TPCH.Functional.Schema.$tcCustomer
      (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep19_r74M :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep19_r74M = GHC.Types.KindRepFun $krep5_r74m $krep18_r74L

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep20_r74N :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep20_r74N = GHC.Types.KindRepFun $krep5_r74m $krep19_r74M

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep21_r74O :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep21_r74O = GHC.Types.KindRepFun $krep2_r74j $krep20_r74N

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep22_r74P :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep22_r74P = GHC.Types.KindRepFun $krep_r74h $krep21_r74O

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep23_r74Q :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep23_r74Q = GHC.Types.KindRepFun $krep17_r74E $krep22_r74P

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep24_r74R :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep24_r74R = GHC.Types.KindRepFun $krep5_r74m $krep23_r74Q

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep25_r74S :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep25_r74S = GHC.Types.KindRepFun $krep5_r74m $krep24_r74R

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Customer1_r74T :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Customer1_r74T = "'Customer"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Customer2_r74U :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Customer2_r74U = GHC.Types.TrNameS $tc'Customer1_r74T

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tc'Customer :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
TPCH.Functional.Schema.$tc'Customer
  = GHC.Types.TyCon
      14764552819634216928##
      6068166705854968441##
      TPCH.Functional.Schema.$trModule
      $tc'Customer2_r74U
      0#
      $krep25_r74S

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep26_r74V :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep26_r74V
  = GHC.Types.:
      @ GHC.Types.KindRep $krep18_r74L (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep27_r74W :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep27_r74W
  = GHC.Types.KindRepTyConApp FDB.GADTForall.$tcRowRef $krep26_r74V

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcOrder1_r74X :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcOrder1_r74X = "Order"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcOrder2_r74Y :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcOrder2_r74Y = GHC.Types.TrNameS $tcOrder1_r74X

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tcOrder :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
TPCH.Functional.Schema.$tcOrder
  = GHC.Types.TyCon
      10277513951169694645##
      16962993689770346345##
      TPCH.Functional.Schema.$trModule
      $tcOrder2_r74Y
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep28_r74Z :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep28_r74Z
  = GHC.Types.KindRepTyConApp
      TPCH.Functional.Schema.$tcOrder (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep29_r750 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep29_r750 = GHC.Types.KindRepFun $krep5_r74m $krep28_r74Z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep30_r751 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep30_r751 = GHC.Types.KindRepFun $krep3_r74k $krep29_r750

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep31_r752 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep31_r752 = GHC.Types.KindRepFun $krep5_r74m $krep30_r751

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep32_r753 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep32_r753 = GHC.Types.KindRepFun $krep5_r74m $krep31_r752

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep33_r754 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep33_r754 = GHC.Types.KindRepFun $krep_r74h $krep32_r753

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep34_r755 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep34_r755 = GHC.Types.KindRepFun $krep2_r74j $krep33_r754

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep35_r756 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep35_r756 = GHC.Types.KindRepFun $krep1_r74i $krep34_r755

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep36_r757 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep36_r757 = GHC.Types.KindRepFun $krep27_r74W $krep35_r756

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Order1_r758 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Order1_r758 = "'Order"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Order2_r759 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Order2_r759 = GHC.Types.TrNameS $tc'Order1_r758

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tc'Order :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
TPCH.Functional.Schema.$tc'Order
  = GHC.Types.TyCon
      13153087065208477111##
      17701592658522406836##
      TPCH.Functional.Schema.$trModule
      $tc'Order2_r759
      0#
      $krep36_r757

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep37_r75a :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep37_r75a
  = GHC.Types.:
      @ GHC.Types.KindRep $krep28_r74Z (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep38_r75b :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep38_r75b
  = GHC.Types.KindRepTyConApp FDB.GADTForall.$tcRowRef $krep37_r75a

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcSupplier1_r75c :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcSupplier1_r75c = "Supplier"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcSupplier2_r75d :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcSupplier2_r75d = GHC.Types.TrNameS $tcSupplier1_r75c

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tcSupplier :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
TPCH.Functional.Schema.$tcSupplier
  = GHC.Types.TyCon
      5537664870048215054##
      6807973368023935809##
      TPCH.Functional.Schema.$trModule
      $tcSupplier2_r75d
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep39_r75e :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep39_r75e
  = GHC.Types.KindRepTyConApp
      TPCH.Functional.Schema.$tcSupplier
      (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep40_r75f :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep40_r75f = GHC.Types.KindRepFun $krep5_r74m $krep39_r75e

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep41_r75g :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep41_r75g = GHC.Types.KindRepFun $krep2_r74j $krep40_r75f

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep42_r75h :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep42_r75h = GHC.Types.KindRepFun $krep_r74h $krep41_r75g

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep43_r75i :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep43_r75i = GHC.Types.KindRepFun $krep17_r74E $krep42_r75h

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep44_r75j :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep44_r75j = GHC.Types.KindRepFun $krep5_r74m $krep43_r75i

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep45_r75k :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep45_r75k = GHC.Types.KindRepFun $krep5_r74m $krep44_r75j

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Supplier1_r75l :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Supplier1_r75l = "'Supplier"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Supplier2_r75m :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Supplier2_r75m = GHC.Types.TrNameS $tc'Supplier1_r75l

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tc'Supplier :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
TPCH.Functional.Schema.$tc'Supplier
  = GHC.Types.TyCon
      3112581097731694837##
      5980504949697491730##
      TPCH.Functional.Schema.$trModule
      $tc'Supplier2_r75m
      0#
      $krep45_r75k

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep46_r75n :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep46_r75n
  = GHC.Types.:
      @ GHC.Types.KindRep $krep39_r75e (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep47_r75o :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep47_r75o
  = GHC.Types.KindRepTyConApp FDB.GADTForall.$tcRowRef $krep46_r75n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcLineItem1_r75p :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcLineItem1_r75p = "LineItem"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcLineItem2_r75q :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcLineItem2_r75q = GHC.Types.TrNameS $tcLineItem1_r75p

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tcLineItem :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
TPCH.Functional.Schema.$tcLineItem
  = GHC.Types.TyCon
      4413522648051142635##
      4580059422389727633##
      TPCH.Functional.Schema.$trModule
      $tcLineItem2_r75q
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep48_r75r :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep48_r75r
  = GHC.Types.KindRepTyConApp
      TPCH.Functional.Schema.$tcLineItem
      (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep49_r75s :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep49_r75s = GHC.Types.KindRepFun $krep5_r74m $krep48_r75r

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep50_r75t :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep50_r75t = GHC.Types.KindRepFun $krep5_r74m $krep49_r75s

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep51_r75u :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep51_r75u = GHC.Types.KindRepFun $krep5_r74m $krep50_r75t

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep52_r75v :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep52_r75v = GHC.Types.KindRepFun $krep_r74h $krep51_r75u

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep53_r75w :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep53_r75w = GHC.Types.KindRepFun $krep_r74h $krep52_r75v

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep54_r75x :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep54_r75x = GHC.Types.KindRepFun $krep_r74h $krep53_r75w

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep55_r75y :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep55_r75y = GHC.Types.KindRepFun $krep1_r74i $krep54_r75x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep56_r75z :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep56_r75z = GHC.Types.KindRepFun $krep1_r74i $krep55_r75y

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep57_r75A :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep57_r75A = GHC.Types.KindRepFun $krep2_r74j $krep56_r75z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep58_r75B :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep58_r75B = GHC.Types.KindRepFun $krep2_r74j $krep57_r75A

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep59_r75C :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep59_r75C = GHC.Types.KindRepFun $krep2_r74j $krep58_r75B

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep60_r75D :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep60_r75D = GHC.Types.KindRepFun $krep2_r74j $krep59_r75C

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep61_r75E :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep61_r75E = GHC.Types.KindRepFun $krep3_r74k $krep60_r75D

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep62_r75F :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep62_r75F = GHC.Types.KindRepFun $krep47_r75o $krep61_r75E

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep63_r75G :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep63_r75G = GHC.Types.KindRepFun $krep16_r74B $krep62_r75F

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep64_r75H :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep64_r75H = GHC.Types.KindRepFun $krep38_r75b $krep63_r75G

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'LineItem1_r75I :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'LineItem1_r75I = "'LineItem"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'LineItem2_r75J :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'LineItem2_r75J = GHC.Types.TrNameS $tc'LineItem1_r75I

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tc'LineItem :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
TPCH.Functional.Schema.$tc'LineItem
  = GHC.Types.TyCon
      8539620922902222438##
      9565303329789687194##
      TPCH.Functional.Schema.$trModule
      $tc'LineItem2_r75J
      0#
      $krep64_r75H

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcPartSupp1_r75K :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcPartSupp1_r75K = "PartSupp"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcPartSupp2_r75L :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcPartSupp2_r75L = GHC.Types.TrNameS $tcPartSupp1_r75K

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tcPartSupp :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
TPCH.Functional.Schema.$tcPartSupp
  = GHC.Types.TyCon
      10849560314591573693##
      11581864324186551291##
      TPCH.Functional.Schema.$trModule
      $tcPartSupp2_r75L
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep65_r75M :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep65_r75M
  = GHC.Types.KindRepTyConApp
      TPCH.Functional.Schema.$tcPartSupp
      (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep66_r75N :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep66_r75N = GHC.Types.KindRepFun $krep5_r74m $krep65_r75M

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep67_r75O :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep67_r75O = GHC.Types.KindRepFun $krep2_r74j $krep66_r75N

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep68_r75P :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep68_r75P = GHC.Types.KindRepFun $krep3_r74k $krep67_r75O

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep69_r75Q :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep69_r75Q = GHC.Types.KindRepFun $krep47_r75o $krep68_r75P

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep70_r75R :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep70_r75R = GHC.Types.KindRepFun $krep16_r74B $krep69_r75Q

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'PartSupp1_r75S :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'PartSupp1_r75S = "'PartSupp"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'PartSupp2_r75T :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'PartSupp2_r75T = GHC.Types.TrNameS $tc'PartSupp1_r75S

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tc'PartSupp :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
TPCH.Functional.Schema.$tc'PartSupp
  = GHC.Types.TyCon
      10754361947780373833##
      14007972955674632504##
      TPCH.Functional.Schema.$trModule
      $tc'PartSupp2_r75T
      0#
      $krep70_r75R

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcRegion1_r75U :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcRegion1_r75U = "Region"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcRegion2_r75V :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcRegion2_r75V = GHC.Types.TrNameS $tcRegion1_r75U

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tcRegion :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
TPCH.Functional.Schema.$tcRegion
  = GHC.Types.TyCon
      17005900331151520450##
      2933480038519603125##
      TPCH.Functional.Schema.$trModule
      $tcRegion2_r75V
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep71_r75W :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep71_r75W
  = GHC.Types.KindRepTyConApp
      TPCH.Functional.Schema.$tcRegion (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'EMEA1_r75X :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'EMEA1_r75X = "'EMEA"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'EMEA2_r75Y :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'EMEA2_r75Y = GHC.Types.TrNameS $tc'EMEA1_r75X

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.$tc'EMEA :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
TPCH.Functional.Schema.$tc'EMEA
  = GHC.Types.TyCon
      8266201620596383484##
      3675984000706788314##
      TPCH.Functional.Schema.$trModule
      $tc'EMEA2_r75Y
      0#
      $krep71_r75W

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7g5 :: GHC.Types.Int
[LclId]
sat_s7g5 = GHC.Types.I# 18#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7g4 :: GHC.Types.Int
[LclId]
sat_s7g4 = GHC.Types.I# 21#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7g3 :: GHC.Types.Int
[LclId]
sat_s7g3 = GHC.Types.I# 9#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7g2 :: GHC.Types.Int
[LclId]
sat_s7g2 = GHC.Types.I# 21#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7g1 :: [GHC.Types.Char]
[LclId]
sat_s7g1
  = GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7g0 :: [GHC.Types.Char]
[LclId]
sat_s7g0 = GHC.CString.unpackCString# "TPCH.Functional.Schema"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7fZ :: [GHC.Types.Char]
[LclId]
sat_s7fZ = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s7g6 :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s7g6
  = GHC.Stack.Types.SrcLoc
      sat_s7fZ sat_s7g0 sat_s7g1 sat_s7g2 sat_s7g3 sat_s7g4 sat_s7g5

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7fY :: [GHC.Types.Char]
[LclId]
sat_s7fY = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s7g7 :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s7g7 = (sat_s7fY, sat_s7g6)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP_r75Z :: GHC.Stack.Types.CallStack
[GblId]
$dIP_r75Z
  = GHC.Stack.Types.pushCallStack
      sat_s7g7 GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
TPCH.Functional.Schema.parts
  :: FDB.GADTForall.Table TPCH.Functional.Schema.Part
[GblId]
TPCH.Functional.Schema.parts
  = GHC.Err.undefined
      @ 'GHC.Types.LiftedRep
      @ (FDB.GADTForall.Table TPCH.Functional.Schema.Part)
      ($dIP_r75Z
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gf :: GHC.Types.Int
[LclId]
sat_s7gf = GHC.Types.I# 22#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7ge :: GHC.Types.Int
[LclId]
sat_s7ge = GHC.Types.I# 34#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gd :: GHC.Types.Int
[LclId]
sat_s7gd = GHC.Types.I# 13#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gc :: GHC.Types.Int
[LclId]
sat_s7gc = GHC.Types.I# 34#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gb :: [GHC.Types.Char]
[LclId]
sat_s7gb
  = GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7ga :: [GHC.Types.Char]
[LclId]
sat_s7ga = GHC.CString.unpackCString# "TPCH.Functional.Schema"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7g9 :: [GHC.Types.Char]
[LclId]
sat_s7g9 = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s7gg :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s7gg
  = GHC.Stack.Types.SrcLoc
      sat_s7g9 sat_s7ga sat_s7gb sat_s7gc sat_s7gd sat_s7ge sat_s7gf

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7g8 :: [GHC.Types.Char]
[LclId]
sat_s7g8 = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s7gh :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s7gh = (sat_s7g8, sat_s7gg)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP1_r760 :: GHC.Stack.Types.CallStack
[GblId]
$dIP1_r760
  = GHC.Stack.Types.pushCallStack
      sat_s7gh GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
TPCH.Functional.Schema.suppliers
  :: FDB.GADTForall.Table TPCH.Functional.Schema.Supplier
[GblId]
TPCH.Functional.Schema.suppliers
  = GHC.Err.undefined
      @ 'GHC.Types.LiftedRep
      @ (FDB.GADTForall.Table TPCH.Functional.Schema.Supplier)
      ($dIP1_r760
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gp :: GHC.Types.Int
[LclId]
sat_s7gp = GHC.Types.I# 22#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7go :: GHC.Types.Int
[LclId]
sat_s7go = GHC.Types.I# 46#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gn :: GHC.Types.Int
[LclId]
sat_s7gn = GHC.Types.I# 13#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gm :: GHC.Types.Int
[LclId]
sat_s7gm = GHC.Types.I# 46#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gl :: [GHC.Types.Char]
[LclId]
sat_s7gl
  = GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gk :: [GHC.Types.Char]
[LclId]
sat_s7gk = GHC.CString.unpackCString# "TPCH.Functional.Schema"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gj :: [GHC.Types.Char]
[LclId]
sat_s7gj = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s7gq :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s7gq
  = GHC.Stack.Types.SrcLoc
      sat_s7gj sat_s7gk sat_s7gl sat_s7gm sat_s7gn sat_s7go sat_s7gp

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gi :: [GHC.Types.Char]
[LclId]
sat_s7gi = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s7gr :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s7gr = (sat_s7gi, sat_s7gq)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP2_r761 :: GHC.Stack.Types.CallStack
[GblId]
$dIP2_r761
  = GHC.Stack.Types.pushCallStack
      sat_s7gr GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
TPCH.Functional.Schema.partsupps
  :: FDB.GADTForall.Table TPCH.Functional.Schema.PartSupp
[GblId]
TPCH.Functional.Schema.partsupps
  = GHC.Err.undefined
      @ 'GHC.Types.LiftedRep
      @ (FDB.GADTForall.Table TPCH.Functional.Schema.PartSupp)
      ($dIP2_r761
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gz :: GHC.Types.Int
[LclId]
sat_s7gz = GHC.Types.I# 22#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gy :: GHC.Types.Int
[LclId]
sat_s7gy = GHC.Types.I# 60#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gx :: GHC.Types.Int
[LclId]
sat_s7gx = GHC.Types.I# 13#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gw :: GHC.Types.Int
[LclId]
sat_s7gw = GHC.Types.I# 60#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gv :: [GHC.Types.Char]
[LclId]
sat_s7gv
  = GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gu :: [GHC.Types.Char]
[LclId]
sat_s7gu = GHC.CString.unpackCString# "TPCH.Functional.Schema"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gt :: [GHC.Types.Char]
[LclId]
sat_s7gt = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s7gA :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s7gA
  = GHC.Stack.Types.SrcLoc
      sat_s7gt sat_s7gu sat_s7gv sat_s7gw sat_s7gx sat_s7gy sat_s7gz

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gs :: [GHC.Types.Char]
[LclId]
sat_s7gs = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s7gB :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s7gB = (sat_s7gs, sat_s7gA)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP3_r762 :: GHC.Stack.Types.CallStack
[GblId]
$dIP3_r762
  = GHC.Stack.Types.pushCallStack
      sat_s7gB GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
TPCH.Functional.Schema.customers
  :: FDB.GADTForall.Table TPCH.Functional.Schema.Customer
[GblId]
TPCH.Functional.Schema.customers
  = GHC.Err.undefined
      @ 'GHC.Types.LiftedRep
      @ (FDB.GADTForall.Table TPCH.Functional.Schema.Customer)
      ($dIP3_r762
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gJ :: GHC.Types.Int
[LclId]
sat_s7gJ = GHC.Types.I# 19#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gI :: GHC.Types.Int
[LclId]
sat_s7gI = GHC.Types.I# 75#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gH :: GHC.Types.Int
[LclId]
sat_s7gH = GHC.Types.I# 10#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gG :: GHC.Types.Int
[LclId]
sat_s7gG = GHC.Types.I# 75#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gF :: [GHC.Types.Char]
[LclId]
sat_s7gF
  = GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gE :: [GHC.Types.Char]
[LclId]
sat_s7gE = GHC.CString.unpackCString# "TPCH.Functional.Schema"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gD :: [GHC.Types.Char]
[LclId]
sat_s7gD = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s7gK :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s7gK
  = GHC.Stack.Types.SrcLoc
      sat_s7gD sat_s7gE sat_s7gF sat_s7gG sat_s7gH sat_s7gI sat_s7gJ

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gC :: [GHC.Types.Char]
[LclId]
sat_s7gC = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s7gL :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s7gL = (sat_s7gC, sat_s7gK)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP4_r763 :: GHC.Stack.Types.CallStack
[GblId]
$dIP4_r763
  = GHC.Stack.Types.pushCallStack
      sat_s7gL GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
TPCH.Functional.Schema.orders
  :: FDB.GADTForall.Table TPCH.Functional.Schema.Order
[GblId]
TPCH.Functional.Schema.orders
  = GHC.Err.undefined
      @ 'GHC.Types.LiftedRep
      @ (FDB.GADTForall.Table TPCH.Functional.Schema.Order)
      ($dIP4_r763
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gT :: GHC.Types.Int
[LclId]
sat_s7gT = GHC.Types.I# 19#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gS :: GHC.Types.Int
[LclId]
sat_s7gS = GHC.Types.I# 106#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gR :: GHC.Types.Int
[LclId]
sat_s7gR = GHC.Types.I# 10#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gQ :: GHC.Types.Int
[LclId]
sat_s7gQ = GHC.Types.I# 106#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gP :: [GHC.Types.Char]
[LclId]
sat_s7gP
  = GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gO :: [GHC.Types.Char]
[LclId]
sat_s7gO = GHC.CString.unpackCString# "TPCH.Functional.Schema"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gN :: [GHC.Types.Char]
[LclId]
sat_s7gN = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s7gU :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s7gU
  = GHC.Stack.Types.SrcLoc
      sat_s7gN sat_s7gO sat_s7gP sat_s7gQ sat_s7gR sat_s7gS sat_s7gT

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gM :: [GHC.Types.Char]
[LclId]
sat_s7gM = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s7gV :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s7gV = (sat_s7gM, sat_s7gU)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP5_r764 :: GHC.Stack.Types.CallStack
[GblId]
$dIP5_r764
  = GHC.Stack.Types.pushCallStack
      sat_s7gV GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
TPCH.Functional.Schema.n_name
  :: TPCH.Functional.Schema.Nation -> GHC.Base.String
[GblId]
TPCH.Functional.Schema.n_name
  = GHC.Err.undefined
      @ 'GHC.Types.LiftedRep
      @ (TPCH.Functional.Schema.Nation -> GHC.Base.String)
      ($dIP5_r764
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7h3 :: GHC.Types.Int
[LclId]
sat_s7h3 = GHC.Types.I# 21#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7h2 :: GHC.Types.Int
[LclId]
sat_s7h2 = GHC.Types.I# 109#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7h1 :: GHC.Types.Int
[LclId]
sat_s7h1 = GHC.Types.I# 12#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7h0 :: GHC.Types.Int
[LclId]
sat_s7h0 = GHC.Types.I# 109#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gZ :: [GHC.Types.Char]
[LclId]
sat_s7gZ
  = GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gY :: [GHC.Types.Char]
[LclId]
sat_s7gY = GHC.CString.unpackCString# "TPCH.Functional.Schema"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gX :: [GHC.Types.Char]
[LclId]
sat_s7gX = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s7h4 :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s7h4
  = GHC.Stack.Types.SrcLoc
      sat_s7gX sat_s7gY sat_s7gZ sat_s7h0 sat_s7h1 sat_s7h2 sat_s7h3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7gW :: [GHC.Types.Char]
[LclId]
sat_s7gW = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s7h5 :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s7h5 = (sat_s7gW, sat_s7h4)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP6_r765 :: GHC.Stack.Types.CallStack
[GblId]
$dIP6_r765
  = GHC.Stack.Types.pushCallStack
      sat_s7h5 GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
TPCH.Functional.Schema.n_region
  :: TPCH.Functional.Schema.Nation -> TPCH.Functional.Schema.Region
[GblId]
TPCH.Functional.Schema.n_region
  = GHC.Err.undefined
      @ 'GHC.Types.LiftedRep
      @ (TPCH.Functional.Schema.Nation -> TPCH.Functional.Schema.Region)
      ($dIP6_r765
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hd :: GHC.Types.Int
[LclId]
sat_s7hd = GHC.Types.I# 22#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hc :: GHC.Types.Int
[LclId]
sat_s7hc = GHC.Types.I# 112#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hb :: GHC.Types.Int
[LclId]
sat_s7hb = GHC.Types.I# 13#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7ha :: GHC.Types.Int
[LclId]
sat_s7ha = GHC.Types.I# 112#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7h9 :: [GHC.Types.Char]
[LclId]
sat_s7h9
  = GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7h8 :: [GHC.Types.Char]
[LclId]
sat_s7h8 = GHC.CString.unpackCString# "TPCH.Functional.Schema"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7h7 :: [GHC.Types.Char]
[LclId]
sat_s7h7 = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s7he :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s7he
  = GHC.Stack.Types.SrcLoc
      sat_s7h7 sat_s7h8 sat_s7h9 sat_s7ha sat_s7hb sat_s7hc sat_s7hd

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7h6 :: [GHC.Types.Char]
[LclId]
sat_s7h6 = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s7hf :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s7hf = (sat_s7h6, sat_s7he)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP7_r766 :: GHC.Stack.Types.CallStack
[GblId]
$dIP7_r766
  = GHC.Stack.Types.pushCallStack
      sat_s7hf GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
TPCH.Functional.Schema.n_comment
  :: TPCH.Functional.Schema.Nation -> GHC.Base.String
[GblId]
TPCH.Functional.Schema.n_comment
  = GHC.Err.undefined
      @ 'GHC.Types.LiftedRep
      @ (TPCH.Functional.Schema.Nation -> GHC.Base.String)
      ($dIP7_r766
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hn :: GHC.Types.Int
[LclId]
sat_s7hn = GHC.Types.I# 23#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hm :: GHC.Types.Int
[LclId]
sat_s7hm = GHC.Types.I# 115#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hl :: GHC.Types.Int
[LclId]
sat_s7hl = GHC.Types.I# 14#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hk :: GHC.Types.Int
[LclId]
sat_s7hk = GHC.Types.I# 115#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hj :: [GHC.Types.Char]
[LclId]
sat_s7hj
  = GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hi :: [GHC.Types.Char]
[LclId]
sat_s7hi = GHC.CString.unpackCString# "TPCH.Functional.Schema"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hh :: [GHC.Types.Char]
[LclId]
sat_s7hh = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s7ho :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s7ho
  = GHC.Stack.Types.SrcLoc
      sat_s7hh sat_s7hi sat_s7hj sat_s7hk sat_s7hl sat_s7hm sat_s7hn

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hg :: [GHC.Types.Char]
[LclId]
sat_s7hg = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s7hp :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s7hp = (sat_s7hg, sat_s7ho)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP8_r767 :: GHC.Stack.Types.CallStack
[GblId]
$dIP8_r767
  = GHC.Stack.Types.pushCallStack
      sat_s7hp GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
TPCH.Functional.Schema.allNations
  :: [TPCH.Functional.Schema.Nation]
[GblId]
TPCH.Functional.Schema.allNations
  = GHC.Err.undefined
      @ 'GHC.Types.LiftedRep
      @ [TPCH.Functional.Schema.Nation]
      ($dIP8_r767
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hx :: GHC.Types.Int
[LclId]
sat_s7hx = GHC.Types.I# 19#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hw :: GHC.Types.Int
[LclId]
sat_s7hw = GHC.Types.I# 123#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hv :: GHC.Types.Int
[LclId]
sat_s7hv = GHC.Types.I# 10#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hu :: GHC.Types.Int
[LclId]
sat_s7hu = GHC.Types.I# 123#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7ht :: [GHC.Types.Char]
[LclId]
sat_s7ht
  = GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hs :: [GHC.Types.Char]
[LclId]
sat_s7hs = GHC.CString.unpackCString# "TPCH.Functional.Schema"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hr :: [GHC.Types.Char]
[LclId]
sat_s7hr = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s7hy :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s7hy
  = GHC.Stack.Types.SrcLoc
      sat_s7hr sat_s7hs sat_s7ht sat_s7hu sat_s7hv sat_s7hw sat_s7hx

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hq :: [GHC.Types.Char]
[LclId]
sat_s7hq = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s7hz :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s7hz = (sat_s7hq, sat_s7hy)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP9_r768 :: GHC.Stack.Types.CallStack
[GblId]
$dIP9_r768
  = GHC.Stack.Types.pushCallStack
      sat_s7hz GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
TPCH.Functional.Schema.r_name
  :: TPCH.Functional.Schema.Region -> GHC.Base.String
[GblId]
TPCH.Functional.Schema.r_name
  = GHC.Err.undefined
      @ 'GHC.Types.LiftedRep
      @ (TPCH.Functional.Schema.Region -> GHC.Base.String)
      ($dIP9_r768
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hH :: GHC.Types.Int
[LclId]
sat_s7hH = GHC.Types.I# 22#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hG :: GHC.Types.Int
[LclId]
sat_s7hG = GHC.Types.I# 126#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hF :: GHC.Types.Int
[LclId]
sat_s7hF = GHC.Types.I# 13#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hE :: GHC.Types.Int
[LclId]
sat_s7hE = GHC.Types.I# 126#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hD :: [GHC.Types.Char]
[LclId]
sat_s7hD
  = GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hC :: [GHC.Types.Char]
[LclId]
sat_s7hC = GHC.CString.unpackCString# "TPCH.Functional.Schema"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hB :: [GHC.Types.Char]
[LclId]
sat_s7hB = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s7hI :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s7hI
  = GHC.Stack.Types.SrcLoc
      sat_s7hB sat_s7hC sat_s7hD sat_s7hE sat_s7hF sat_s7hG sat_s7hH

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hA :: [GHC.Types.Char]
[LclId]
sat_s7hA = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s7hJ :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s7hJ = (sat_s7hA, sat_s7hI)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP10_r769 :: GHC.Stack.Types.CallStack
[GblId]
$dIP10_r769
  = GHC.Stack.Types.pushCallStack
      sat_s7hJ GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
TPCH.Functional.Schema.r_comment
  :: TPCH.Functional.Schema.Region -> GHC.Base.String
[GblId]
TPCH.Functional.Schema.r_comment
  = GHC.Err.undefined
      @ 'GHC.Types.LiftedRep
      @ (TPCH.Functional.Schema.Region -> GHC.Base.String)
      ($dIP10_r769
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hR :: GHC.Types.Int
[LclId]
sat_s7hR = GHC.Types.I# 23#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hQ :: GHC.Types.Int
[LclId]
sat_s7hQ = GHC.Types.I# 129#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hP :: GHC.Types.Int
[LclId]
sat_s7hP = GHC.Types.I# 14#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hO :: GHC.Types.Int
[LclId]
sat_s7hO = GHC.Types.I# 129#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hN :: [GHC.Types.Char]
[LclId]
sat_s7hN
  = GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hM :: [GHC.Types.Char]
[LclId]
sat_s7hM = GHC.CString.unpackCString# "TPCH.Functional.Schema"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hL :: [GHC.Types.Char]
[LclId]
sat_s7hL = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s7hS :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s7hS
  = GHC.Stack.Types.SrcLoc
      sat_s7hL sat_s7hM sat_s7hN sat_s7hO sat_s7hP sat_s7hQ sat_s7hR

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hK :: [GHC.Types.Char]
[LclId]
sat_s7hK = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s7hT :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s7hT = (sat_s7hK, sat_s7hS)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP11_r76a :: GHC.Stack.Types.CallStack
[GblId]
$dIP11_r76a
  = GHC.Stack.Types.pushCallStack
      sat_s7hT GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
TPCH.Functional.Schema.allRegions
  :: [TPCH.Functional.Schema.Region]
[GblId]
TPCH.Functional.Schema.allRegions
  = GHC.Err.undefined
      @ 'GHC.Types.LiftedRep
      @ [TPCH.Functional.Schema.Region]
      ($dIP11_r76a
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7i1 :: GHC.Types.Int
[LclId]
sat_s7i1 = GHC.Types.I# 23#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7i0 :: GHC.Types.Int
[LclId]
sat_s7i0 = GHC.Types.I# 132#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hZ :: GHC.Types.Int
[LclId]
sat_s7hZ = GHC.Types.I# 14#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hY :: GHC.Types.Int
[LclId]
sat_s7hY = GHC.Types.I# 132#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hX :: [GHC.Types.Char]
[LclId]
sat_s7hX
  = GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hW :: [GHC.Types.Char]
[LclId]
sat_s7hW = GHC.CString.unpackCString# "TPCH.Functional.Schema"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hV :: [GHC.Types.Char]
[LclId]
sat_s7hV = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s7i2 :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s7i2
  = GHC.Stack.Types.SrcLoc
      sat_s7hV sat_s7hW sat_s7hX sat_s7hY sat_s7hZ sat_s7i0 sat_s7i1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7hU :: [GHC.Types.Char]
[LclId]
sat_s7hU = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s7i3 :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s7i3 = (sat_s7hU, sat_s7i2)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP12_r76b :: GHC.Stack.Types.CallStack
[GblId]
$dIP12_r76b
  = GHC.Stack.Types.pushCallStack
      sat_s7i3 GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
TPCH.Functional.Schema.findRegion
  :: GHC.Base.String -> TPCH.Functional.Schema.Region
[GblId]
TPCH.Functional.Schema.findRegion
  = GHC.Err.undefined
      @ 'GHC.Types.LiftedRep
      @ (GHC.Base.String -> TPCH.Functional.Schema.Region)
      ($dIP12_r76b
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7ib :: GHC.Types.Int
[LclId]
sat_s7ib = GHC.Types.I# 22#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7ia :: GHC.Types.Int
[LclId]
sat_s7ia = GHC.Types.I# 135#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7i9 :: GHC.Types.Int
[LclId]
sat_s7i9 = GHC.Types.I# 13#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7i8 :: GHC.Types.Int
[LclId]
sat_s7i8 = GHC.Types.I# 135#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7i7 :: [GHC.Types.Char]
[LclId]
sat_s7i7
  = GHC.CString.unpackCString# "./TPCH/Functional/Schema.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7i6 :: [GHC.Types.Char]
[LclId]
sat_s7i6 = GHC.CString.unpackCString# "TPCH.Functional.Schema"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7i5 :: [GHC.Types.Char]
[LclId]
sat_s7i5 = GHC.CString.unpackCString# "main"#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
sat_s7ic :: GHC.Stack.Types.SrcLoc
[LclId]
sat_s7ic
  = GHC.Stack.Types.SrcLoc
      sat_s7i5 sat_s7i6 sat_s7i7 sat_s7i8 sat_s7i9 sat_s7ia sat_s7ib

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
sat_s7i4 :: [GHC.Types.Char]
[LclId]
sat_s7i4 = GHC.CString.unpackCString# "undefined"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
sat_s7id :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
[LclId]
sat_s7id = (sat_s7i4, sat_s7ic)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$dIP13_r76c :: GHC.Stack.Types.CallStack
[GblId]
$dIP13_r76c
  = GHC.Stack.Types.pushCallStack
      sat_s7id GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 2, types: 4, coercions: 4, joins: 0/0}
TPCH.Functional.Schema.nationsIn
  :: TPCH.Functional.Schema.Region -> [TPCH.Functional.Schema.Nation]
[GblId]
TPCH.Functional.Schema.nationsIn
  = GHC.Err.undefined
      @ 'GHC.Types.LiftedRep
      @ (TPCH.Functional.Schema.Region
         -> [TPCH.Functional.Schema.Nation])
      ($dIP13_r76c
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))

-- RHS size: {terms: 15, types: 7, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.Customer
  :: GHC.Base.String
     -> GHC.Base.String
     -> TPCH.Functional.Schema.Nation
     -> FDB.MoreTypes.PhoneNumber
     -> FDB.MoreTypes.Decimal
     -> GHC.Base.String
     -> GHC.Base.String
     -> TPCH.Functional.Schema.Customer
[GblId[DataCon],
 Arity=7,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []]
TPCH.Functional.Schema.Customer
  = \ (eta_B7 [Occ=Once] :: GHC.Base.String)
      (eta_B6 [Occ=Once] :: GHC.Base.String)
      (eta_B5 [Occ=Once] :: TPCH.Functional.Schema.Nation)
      (eta_B4 [Occ=Once] :: FDB.MoreTypes.PhoneNumber)
      (eta_B3 [Occ=Once] :: FDB.MoreTypes.Decimal)
      (eta_B2 [Occ=Once] :: GHC.Base.String)
      (eta_B1 [Occ=Once] :: GHC.Base.String) ->
      TPCH.Functional.Schema.Customer
        eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1

-- RHS size: {terms: 33, types: 19, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.LineItem
  :: FDB.GADTForall.TableRef TPCH.Functional.Schema.Order
     -> FDB.GADTForall.TableRef TPCH.Functional.Schema.Part
     -> FDB.GADTForall.TableRef TPCH.Functional.Schema.Supplier
     -> GHC.Types.Int
     -> FDB.MoreTypes.Decimal
     -> FDB.MoreTypes.Decimal
     -> FDB.MoreTypes.Decimal
     -> FDB.MoreTypes.Decimal
     -> GHC.Types.Char
     -> GHC.Types.Char
     -> FDB.MoreTypes.Date
     -> FDB.MoreTypes.Date
     -> FDB.MoreTypes.Date
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Base.String
     -> TPCH.Functional.Schema.LineItem
[GblId[DataCon],
 Arity=16,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []]
TPCH.Functional.Schema.LineItem
  = \ (eta_Bg [Occ=Once]
         :: FDB.GADTForall.TableRef TPCH.Functional.Schema.Order)
      (eta_Bf [Occ=Once]
         :: FDB.GADTForall.TableRef TPCH.Functional.Schema.Part)
      (eta_Be [Occ=Once]
         :: FDB.GADTForall.TableRef TPCH.Functional.Schema.Supplier)
      (eta_Bd [Occ=Once] :: GHC.Types.Int)
      (eta_Bc [Occ=Once] :: FDB.MoreTypes.Decimal)
      (eta_Bb [Occ=Once] :: FDB.MoreTypes.Decimal)
      (eta_Ba [Occ=Once] :: FDB.MoreTypes.Decimal)
      (eta_B9 [Occ=Once] :: FDB.MoreTypes.Decimal)
      (eta_B8 [Occ=Once] :: GHC.Types.Char)
      (eta_B7 [Occ=Once] :: GHC.Types.Char)
      (eta_B6 [Occ=Once] :: FDB.MoreTypes.Date)
      (eta_B5 [Occ=Once] :: FDB.MoreTypes.Date)
      (eta_B4 [Occ=Once] :: FDB.MoreTypes.Date)
      (eta_B3 [Occ=Once] :: GHC.Base.String)
      (eta_B2 [Occ=Once] :: GHC.Base.String)
      (eta_B1 [Occ=Once] :: GHC.Base.String) ->
      TPCH.Functional.Schema.LineItem
        eta_Bg
        eta_Bf
        eta_Be
        eta_Bd
        eta_Bc
        eta_Bb
        eta_Ba
        eta_B9
        eta_B8
        eta_B7
        eta_B6
        eta_B5
        eta_B4
        eta_B3
        eta_B2
        eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.France :: TPCH.Functional.Schema.Nation
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.France = TPCH.Functional.Schema.France

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.Germany :: TPCH.Functional.Schema.Nation
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.Germany = TPCH.Functional.Schema.Germany

-- RHS size: {terms: 17, types: 9, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.Order
  :: FDB.GADTForall.TableRef TPCH.Functional.Schema.Customer
     -> GHC.Types.Char
     -> FDB.MoreTypes.Decimal
     -> FDB.MoreTypes.Date
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Types.Int
     -> GHC.Base.String
     -> TPCH.Functional.Schema.Order
[GblId[DataCon],
 Arity=8,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []]
TPCH.Functional.Schema.Order
  = \ (eta_B8 [Occ=Once]
         :: FDB.GADTForall.TableRef TPCH.Functional.Schema.Customer)
      (eta_B7 [Occ=Once] :: GHC.Types.Char)
      (eta_B6 [Occ=Once] :: FDB.MoreTypes.Decimal)
      (eta_B5 [Occ=Once] :: FDB.MoreTypes.Date)
      (eta_B4 [Occ=Once] :: GHC.Base.String)
      (eta_B3 [Occ=Once] :: GHC.Base.String)
      (eta_B2 [Occ=Once] :: GHC.Types.Int)
      (eta_B1 [Occ=Once] :: GHC.Base.String) ->
      TPCH.Functional.Schema.Order
        eta_B8 eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1

-- RHS size: {terms: 17, types: 8, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.Part
  :: GHC.Base.String
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Types.Int
     -> GHC.Base.String
     -> FDB.MoreTypes.Decimal
     -> GHC.Base.String
     -> TPCH.Functional.Schema.Part
[GblId[DataCon],
 Arity=8,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []]
TPCH.Functional.Schema.Part
  = \ (eta_B8 [Occ=Once] :: GHC.Base.String)
      (eta_B7 [Occ=Once] :: GHC.Base.String)
      (eta_B6 [Occ=Once] :: GHC.Base.String)
      (eta_B5 [Occ=Once] :: GHC.Base.String)
      (eta_B4 [Occ=Once] :: GHC.Types.Int)
      (eta_B3 [Occ=Once] :: GHC.Base.String)
      (eta_B2 [Occ=Once] :: FDB.MoreTypes.Decimal)
      (eta_B1 [Occ=Once] :: GHC.Base.String) ->
      TPCH.Functional.Schema.Part
        eta_B8 eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1

-- RHS size: {terms: 11, types: 7, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.PartSupp
  :: FDB.GADTForall.TableRef TPCH.Functional.Schema.Part
     -> FDB.GADTForall.TableRef TPCH.Functional.Schema.Supplier
     -> GHC.Types.Int
     -> FDB.MoreTypes.Decimal
     -> GHC.Base.String
     -> TPCH.Functional.Schema.PartSupp
[GblId[DataCon],
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []]
TPCH.Functional.Schema.PartSupp
  = \ (eta_B5 [Occ=Once]
         :: FDB.GADTForall.TableRef TPCH.Functional.Schema.Part)
      (eta_B4 [Occ=Once]
         :: FDB.GADTForall.TableRef TPCH.Functional.Schema.Supplier)
      (eta_B3 [Occ=Once] :: GHC.Types.Int)
      (eta_B2 [Occ=Once] :: FDB.MoreTypes.Decimal)
      (eta_B1 [Occ=Once] :: GHC.Base.String) ->
      TPCH.Functional.Schema.PartSupp eta_B5 eta_B4 eta_B3 eta_B2 eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.EMEA :: TPCH.Functional.Schema.Region
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Schema.EMEA = TPCH.Functional.Schema.EMEA

-- RHS size: {terms: 13, types: 6, coercions: 0, joins: 0/0}
TPCH.Functional.Schema.Supplier
  :: GHC.Base.String
     -> GHC.Base.String
     -> TPCH.Functional.Schema.Nation
     -> FDB.MoreTypes.PhoneNumber
     -> FDB.MoreTypes.Decimal
     -> GHC.Base.String
     -> TPCH.Functional.Schema.Supplier
[GblId[DataCon],
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []]
TPCH.Functional.Schema.Supplier
  = \ (eta_B6 [Occ=Once] :: GHC.Base.String)
      (eta_B5 [Occ=Once] :: GHC.Base.String)
      (eta_B4 [Occ=Once] :: TPCH.Functional.Schema.Nation)
      (eta_B3 [Occ=Once] :: FDB.MoreTypes.PhoneNumber)
      (eta_B2 [Occ=Once] :: FDB.MoreTypes.Decimal)
      (eta_B1 [Occ=Once] :: GHC.Base.String) ->
      TPCH.Functional.Schema.Supplier
        eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1



[9 of 9] Compiling TPCH.Functional.Q1 ( ghc-dumps/../TPCH/Functional/Q1.hs, ghc-dumps/../TPCH/Functional/Q1.o )

==================== CorePrep ====================
Result size of CorePrep
  = {terms: 271, types: 697, coercions: 0, joins: 0/49}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule1_r80s :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule1_r80s = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule2_r88s :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule2_r88s = GHC.Types.TrNameS $trModule1_r80s

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule3_r88t :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule3_r88t = "TPCH.Functional.Q1"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule4_r88u :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule4_r88u = GHC.Types.TrNameS $trModule3_r88t

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
TPCH.Functional.Q1.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
TPCH.Functional.Q1.$trModule
  = GHC.Types.Module $trModule2_r88s $trModule4_r88u

-- RHS size: {terms: 10, types: 5, coercions: 0, joins: 0/2}
sat_s88A
  :: TPCH.Functional.Schema.LineItem
     -> (GHC.Types.Char, GHC.Types.Char)
[LclId]
sat_s88A
  = \ (li_s88x :: TPCH.Functional.Schema.LineItem) ->
      let {
        sat_s88z [Occ=Once] :: GHC.Types.Char
        [LclId]
        sat_s88z = TPCH.Functional.Schema.l_linestatus li_s88x } in
      let {
        sat_s88y [Occ=Once] :: GHC.Types.Char
        [LclId]
        sat_s88y = TPCH.Functional.Schema.l_returnflag li_s88x } in
      (sat_s88y, sat_s88z)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
sat_s88w :: GHC.Classes.Ord (GHC.Types.Char, GHC.Types.Char)
[LclId]
sat_s88w
  = GHC.Classes.$fOrd(,)
      @ GHC.Types.Char
      @ GHC.Types.Char
      GHC.Classes.$fOrdChar
      GHC.Classes.$fOrdChar

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
TPCH.Functional.Q1.groupByItemState
  :: FDB.GADTForall.Q TPCH.Functional.Schema.LineItem
     -> FDB.GADTForall.Q
          ((GHC.Types.Char, GHC.Types.Char),
           FDB.GADTForall.Q TPCH.Functional.Schema.LineItem)
[GblId]
TPCH.Functional.Q1.groupByItemState
  = FDB.GADTForall.groupByWithKey
      @ (GHC.Types.Char, GHC.Types.Char)
      @ TPCH.Functional.Schema.LineItem
      sat_s88w
      sat_s88A

-- RHS size: {terms: 16, types: 10, coercions: 0, joins: 0/3}
TPCH.Functional.Q1.itemsShippedBefore
  :: FDB.MoreTypes.Date
     -> FDB.GADTForall.Q TPCH.Functional.Schema.LineItem
[GblId, Arity=1, Unf=OtherCon []]
TPCH.Functional.Q1.itemsShippedBefore
  = \ (maxDateAllowed_s88B [Occ=OnceL] :: FDB.MoreTypes.Date) ->
      let {
        sat_s88F [Occ=Once]
          :: FDB.GADTForall.Q TPCH.Functional.Schema.LineItem
        [LclId]
        sat_s88F
          = FDB.GADTForall.readT
              @ TPCH.Functional.Schema.LineItem
              TPCH.Functional.Schema.lineitems } in
      let {
        sat_s88E [Occ=Once]
          :: TPCH.Functional.Schema.LineItem -> GHC.Types.Bool
        [LclId]
        sat_s88E
          = \ (li_s88C [Occ=Once] :: TPCH.Functional.Schema.LineItem) ->
              let {
                sat_s88D [Occ=Once] :: FDB.MoreTypes.Date
                [LclId]
                sat_s88D = TPCH.Functional.Schema.l_shipdate li_s88C } in
              GHC.Classes.<=
                @ FDB.MoreTypes.Date
                GHC.Classes.$fOrd()
                sat_s88D
                maxDateAllowed_s88B } in
      FDB.GADTForall.filterQ
        @ TPCH.Functional.Schema.LineItem sat_s88E sat_s88F

-- RHS size: {terms: 203, types: 509, coercions: 0, joins: 0/43}
TPCH.Functional.Q1.q1Unordered
  :: forall h.
     GHC.Real.Integral h =>
     GHC.Types.Int
     -> FDB.GADTForall.Q
          ((GHC.Types.Char, GHC.Types.Char),
           (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
            FDB.MoreTypes.Decimal, h))
[GblId, Arity=2, Unf=OtherCon []]
TPCH.Functional.Q1.q1Unordered
  = \ (@ h_a84z)
      ($dIntegral_s88G [Occ=OnceL] :: GHC.Real.Integral h_a84z)
      (shipDaysBefore_s88H [Occ=Once] :: GHC.Types.Int) ->
      let {
        sat_s89F [Occ=Once]
          :: FDB.GADTForall.Q
               ((GHC.Types.Char, GHC.Types.Char),
                FDB.GADTForall.Q TPCH.Functional.Schema.LineItem)
        [LclId]
        sat_s89F
          = let {
              sat_s89E [Occ=Once]
                :: FDB.GADTForall.Q TPCH.Functional.Schema.LineItem
              [LclId]
              sat_s89E
                = let {
                    sat_s89D [Occ=Once] :: FDB.MoreTypes.Date
                    [LclId]
                    sat_s89D
                      = let {
                          sat_s89C [Occ=Once] :: FDB.MoreTypes.DateInterval
                          [LclId]
                          sat_s89C = FDB.MoreTypes.Day shipDaysBefore_s88H } in
                        let {
                          sat_s89B [Occ=Once] :: FDB.MoreTypes.Date
                          [LclId]
                          sat_s89B
                            = let {
                                sat_s89A [Occ=Once] :: GHC.Base.String
                                [LclId]
                                sat_s89A = GHC.CString.unpackCString# "1998-12-01"# } in
                              FDB.MoreTypes.dateFromString sat_s89A } in
                        FDB.MoreTypes.minusInterval sat_s89B sat_s89C } in
                  TPCH.Functional.Q1.itemsShippedBefore sat_s89D } in
            GHC.Base.$
              @ 'GHC.Types.LiftedRep
              @ (FDB.GADTForall.Q TPCH.Functional.Schema.LineItem)
              @ (FDB.GADTForall.Q
                   ((GHC.Types.Char, GHC.Types.Char),
                    FDB.GADTForall.Q TPCH.Functional.Schema.LineItem))
              TPCH.Functional.Q1.groupByItemState
              sat_s89E } in
      let {
        sat_s89z [Occ=Once]
          :: ((GHC.Types.Char, GHC.Types.Char),
              FDB.GADTForall.Q TPCH.Functional.Schema.LineItem)
             -> FDB.GADTForall.SQ
                  ((GHC.Types.Char, GHC.Types.Char),
                   (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                    FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                    FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                    FDB.MoreTypes.Decimal, h_a84z))
        [LclId]
        sat_s89z
          = \ (ds_s88I [Occ=Once!]
                 :: ((GHC.Types.Char, GHC.Types.Char),
                     FDB.GADTForall.Q TPCH.Functional.Schema.LineItem)) ->
              case ds_s88I of { (ds1_s88K [Occ=Once!], itemsSubset_s88L) ->
              case ds1_s88K of
              { (returnflag_s88N [Occ=OnceL], linestatus_s88O [Occ=OnceL]) ->
              let {
                disc_price_s88P
                  :: TPCH.Functional.Schema.LineItem -> FDB.MoreTypes.Decimal
                [LclId, Arity=1, Unf=OtherCon []]
                disc_price_s88P
                  = \ (li_s88Q :: TPCH.Functional.Schema.LineItem) ->
                      let {
                        sat_s88U [Occ=Once] :: FDB.MoreTypes.Decimal
                        [LclId]
                        sat_s88U
                          = let {
                              sat_s88T [Occ=Once] :: FDB.MoreTypes.Decimal
                              [LclId]
                              sat_s88T = TPCH.Functional.Schema.l_discount li_s88Q } in
                            let {
                              sat_s88S [Occ=Once] :: FDB.MoreTypes.Decimal
                              [LclId]
                              sat_s88S = GHC.Types.D# 1.0## } in
                            GHC.Num.-
                              @ FDB.MoreTypes.Decimal
                              GHC.Float.$fNumDouble
                              sat_s88S
                              sat_s88T } in
                      let {
                        sat_s88R [Occ=Once] :: FDB.MoreTypes.Decimal
                        [LclId]
                        sat_s88R = TPCH.Functional.Schema.l_extendedprice li_s88Q } in
                      GHC.Num.*
                        @ FDB.MoreTypes.Decimal
                        GHC.Float.$fNumDouble
                        sat_s88R
                        sat_s88U } in
              let {
                charge_price_s88V [Occ=OnceL]
                  :: TPCH.Functional.Schema.LineItem -> FDB.MoreTypes.Decimal
                [LclId, Arity=1, Unf=OtherCon []]
                charge_price_s88V
                  = \ (li_s88W :: TPCH.Functional.Schema.LineItem) ->
                      let {
                        sat_s890 [Occ=Once] :: FDB.MoreTypes.Decimal
                        [LclId]
                        sat_s890
                          = let {
                              sat_s88Z [Occ=Once] :: FDB.MoreTypes.Decimal
                              [LclId]
                              sat_s88Z = TPCH.Functional.Schema.l_tax li_s88W } in
                            let {
                              sat_s88Y [Occ=Once] :: FDB.MoreTypes.Decimal
                              [LclId]
                              sat_s88Y = GHC.Types.D# 1.0## } in
                            GHC.Num.+
                              @ FDB.MoreTypes.Decimal
                              GHC.Float.$fNumDouble
                              sat_s88Y
                              sat_s88Z } in
                      let {
                        sat_s88X [Occ=Once] :: FDB.MoreTypes.Decimal
                        [LclId]
                        sat_s88X = disc_price_s88P li_s88W } in
                      GHC.Num.*
                        @ FDB.MoreTypes.Decimal
                        GHC.Float.$fNumDouble
                        sat_s88X
                        sat_s890 } in
              let {
                sat_s89y [Occ=Once]
                  :: FDB.MoreTypes.Decimal
                     -> FDB.GADTForall.SQ
                          ((GHC.Types.Char, GHC.Types.Char),
                           (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                            FDB.MoreTypes.Decimal, h_a84z))
                [LclId]
                sat_s89y
                  = \ (sum_qty_s893 [Occ=OnceL] :: FDB.MoreTypes.Decimal) ->
                      let {
                        sat_s89x [Occ=Once]
                          :: FDB.MoreTypes.Decimal
                             -> FDB.GADTForall.SQ
                                  ((GHC.Types.Char, GHC.Types.Char),
                                   (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                                    FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                                    FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                                    FDB.MoreTypes.Decimal, h_a84z))
                        [LclId]
                        sat_s89x
                          = \ (sum_base_price_s896 [Occ=OnceL] :: FDB.MoreTypes.Decimal) ->
                              let {
                                sat_s89w [Occ=Once]
                                  :: FDB.MoreTypes.Decimal
                                     -> FDB.GADTForall.SQ
                                          ((GHC.Types.Char, GHC.Types.Char),
                                           (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                                            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                                            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                                            FDB.MoreTypes.Decimal, h_a84z))
                                [LclId]
                                sat_s89w
                                  = \ (sum_disc_price_s899 [Occ=OnceL] :: FDB.MoreTypes.Decimal) ->
                                      let {
                                        sat_s89v [Occ=Once]
                                          :: FDB.MoreTypes.Decimal
                                             -> FDB.GADTForall.SQ
                                                  ((GHC.Types.Char, GHC.Types.Char),
                                                   (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                                                    FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                                                    FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                                                    FDB.MoreTypes.Decimal, h_a84z))
                                        [LclId]
                                        sat_s89v
                                          = \ (sum_charge_s89c [Occ=OnceL]
                                                 :: FDB.MoreTypes.Decimal) ->
                                              let {
                                                sat_s89u [Occ=Once]
                                                  :: FDB.MoreTypes.Decimal
                                                     -> FDB.GADTForall.SQ
                                                          ((GHC.Types.Char, GHC.Types.Char),
                                                           (FDB.MoreTypes.Decimal,
                                                            FDB.MoreTypes.Decimal,
                                                            FDB.MoreTypes.Decimal,
                                                            FDB.MoreTypes.Decimal,
                                                            FDB.MoreTypes.Decimal,
                                                            FDB.MoreTypes.Decimal,
                                                            FDB.MoreTypes.Decimal, h_a84z))
                                                [LclId]
                                                sat_s89u
                                                  = \ (avg_qty_s89f [Occ=OnceL]
                                                         :: FDB.MoreTypes.Decimal) ->
                                                      let {
                                                        sat_s89t [Occ=Once]
                                                          :: FDB.MoreTypes.Decimal
                                                             -> FDB.GADTForall.SQ
                                                                  ((GHC.Types.Char, GHC.Types.Char),
                                                                   (FDB.MoreTypes.Decimal,
                                                                    FDB.MoreTypes.Decimal,
                                                                    FDB.MoreTypes.Decimal,
                                                                    FDB.MoreTypes.Decimal,
                                                                    FDB.MoreTypes.Decimal,
                                                                    FDB.MoreTypes.Decimal,
                                                                    FDB.MoreTypes.Decimal, h_a84z))
                                                        [LclId]
                                                        sat_s89t
                                                          = \ (avg_price_s89i [Occ=OnceL]
                                                                 :: FDB.MoreTypes.Decimal) ->
                                                              let {
                                                                sat_s89s [Occ=Once]
                                                                  :: FDB.MoreTypes.Decimal
                                                                     -> FDB.GADTForall.SQ
                                                                          ((GHC.Types.Char,
                                                                            GHC.Types.Char),
                                                                           (FDB.MoreTypes.Decimal,
                                                                            FDB.MoreTypes.Decimal,
                                                                            FDB.MoreTypes.Decimal,
                                                                            FDB.MoreTypes.Decimal,
                                                                            FDB.MoreTypes.Decimal,
                                                                            FDB.MoreTypes.Decimal,
                                                                            FDB.MoreTypes.Decimal,
                                                                            h_a84z))
                                                                [LclId]
                                                                sat_s89s
                                                                  = \ (avg_disc_s89l [Occ=OnceL]
                                                                         :: FDB.MoreTypes.Decimal) ->
                                                                      let {
                                                                        sat_s89r [Occ=Once]
                                                                          :: h_a84z
                                                                             -> FDB.GADTForall.SQ
                                                                                  ((GHC.Types.Char,
                                                                                    GHC.Types.Char),
                                                                                   (FDB.MoreTypes.Decimal,
                                                                                    FDB.MoreTypes.Decimal,
                                                                                    FDB.MoreTypes.Decimal,
                                                                                    FDB.MoreTypes.Decimal,
                                                                                    FDB.MoreTypes.Decimal,
                                                                                    FDB.MoreTypes.Decimal,
                                                                                    FDB.MoreTypes.Decimal,
                                                                                    h_a84z))
                                                                        [LclId]
                                                                        sat_s89r
                                                                          = \ (count_order_s89n [Occ=Once]
                                                                                 :: h_a84z) ->
                                                                              let {
                                                                                sat_s89p [Occ=Once]
                                                                                  :: (FDB.MoreTypes.Decimal,
                                                                                      FDB.MoreTypes.Decimal,
                                                                                      FDB.MoreTypes.Decimal,
                                                                                      FDB.MoreTypes.Decimal,
                                                                                      FDB.MoreTypes.Decimal,
                                                                                      FDB.MoreTypes.Decimal,
                                                                                      FDB.MoreTypes.Decimal,
                                                                                      h_a84z)
                                                                                [LclId]
                                                                                sat_s89p
                                                                                  = (sum_qty_s893,
                                                                                     sum_base_price_s896,
                                                                                     sum_disc_price_s899,
                                                                                     sum_charge_s89c,
                                                                                     avg_qty_s89f,
                                                                                     avg_price_s89i,
                                                                                     avg_disc_s89l,
                                                                                     count_order_s89n) } in
                                                                              let {
                                                                                sat_s89o [Occ=Once]
                                                                                  :: (GHC.Types.Char,
                                                                                      GHC.Types.Char)
                                                                                [LclId]
                                                                                sat_s89o
                                                                                  = (returnflag_s88N,
                                                                                     linestatus_s88O) } in
                                                                              let {
                                                                                sat_s89q [Occ=Once]
                                                                                  :: ((GHC.Types.Char,
                                                                                       GHC.Types.Char),
                                                                                      (FDB.MoreTypes.Decimal,
                                                                                       FDB.MoreTypes.Decimal,
                                                                                       FDB.MoreTypes.Decimal,
                                                                                       FDB.MoreTypes.Decimal,
                                                                                       FDB.MoreTypes.Decimal,
                                                                                       FDB.MoreTypes.Decimal,
                                                                                       FDB.MoreTypes.Decimal,
                                                                                       h_a84z))
                                                                                [LclId]
                                                                                sat_s89q
                                                                                  = (sat_s89o,
                                                                                     sat_s89p) } in
                                                                              GHC.Base.return
                                                                                @ FDB.GADTForall.SQ
                                                                                FDB.GADTForall.$fMonadSQ
                                                                                @ ((GHC.Types.Char,
                                                                                    GHC.Types.Char),
                                                                                   (FDB.MoreTypes.Decimal,
                                                                                    FDB.MoreTypes.Decimal,
                                                                                    FDB.MoreTypes.Decimal,
                                                                                    FDB.MoreTypes.Decimal,
                                                                                    FDB.MoreTypes.Decimal,
                                                                                    FDB.MoreTypes.Decimal,
                                                                                    FDB.MoreTypes.Decimal,
                                                                                    h_a84z))
                                                                                sat_s89q } in
                                                                      let {
                                                                        sat_s89m [Occ=Once]
                                                                          :: FDB.GADTForall.SQ
                                                                               h_a84z
                                                                        [LclId]
                                                                        sat_s89m
                                                                          = FDB.GADTForall.count
                                                                              @ h_a84z
                                                                              @ TPCH.Functional.Schema.LineItem
                                                                              $dIntegral_s88G
                                                                              itemsSubset_s88L } in
                                                                      GHC.Base.>>=
                                                                        @ FDB.GADTForall.SQ
                                                                        FDB.GADTForall.$fMonadSQ
                                                                        @ h_a84z
                                                                        @ ((GHC.Types.Char,
                                                                            GHC.Types.Char),
                                                                           (FDB.MoreTypes.Decimal,
                                                                            FDB.MoreTypes.Decimal,
                                                                            FDB.MoreTypes.Decimal,
                                                                            FDB.MoreTypes.Decimal,
                                                                            FDB.MoreTypes.Decimal,
                                                                            FDB.MoreTypes.Decimal,
                                                                            FDB.MoreTypes.Decimal,
                                                                            h_a84z))
                                                                        sat_s89m
                                                                        sat_s89r } in
                                                              let {
                                                                sat_s89k [Occ=Once]
                                                                  :: FDB.GADTForall.SQ
                                                                       FDB.MoreTypes.Decimal
                                                                [LclId]
                                                                sat_s89k
                                                                  = let {
                                                                      sat_s89j [Occ=Once]
                                                                        :: FDB.GADTForall.Agg
                                                                             FDB.MoreTypes.Decimal
                                                                             FDB.MoreTypes.Decimal
                                                                             (FDB.MoreTypes.Decimal,
                                                                              FDB.MoreTypes.Decimal)
                                                                      [LclId]
                                                                      sat_s89j
                                                                        = FDB.GADTForall.avgAgg
                                                                            @ FDB.MoreTypes.Decimal
                                                                            GHC.Float.$fFractionalDouble } in
                                                                    FDB.GADTForall.mapAgg
                                                                      @ FDB.MoreTypes.Decimal
                                                                      @ FDB.MoreTypes.Decimal
                                                                      @ (FDB.MoreTypes.Decimal,
                                                                         FDB.MoreTypes.Decimal)
                                                                      @ TPCH.Functional.Schema.LineItem
                                                                      sat_s89j
                                                                      TPCH.Functional.Schema.l_discount
                                                                      itemsSubset_s88L } in
                                                              GHC.Base.>>=
                                                                @ FDB.GADTForall.SQ
                                                                FDB.GADTForall.$fMonadSQ
                                                                @ FDB.MoreTypes.Decimal
                                                                @ ((GHC.Types.Char, GHC.Types.Char),
                                                                   (FDB.MoreTypes.Decimal,
                                                                    FDB.MoreTypes.Decimal,
                                                                    FDB.MoreTypes.Decimal,
                                                                    FDB.MoreTypes.Decimal,
                                                                    FDB.MoreTypes.Decimal,
                                                                    FDB.MoreTypes.Decimal,
                                                                    FDB.MoreTypes.Decimal, h_a84z))
                                                                sat_s89k
                                                                sat_s89s } in
                                                      let {
                                                        sat_s89h [Occ=Once]
                                                          :: FDB.GADTForall.SQ FDB.MoreTypes.Decimal
                                                        [LclId]
                                                        sat_s89h
                                                          = let {
                                                              sat_s89g [Occ=Once]
                                                                :: FDB.GADTForall.Agg
                                                                     FDB.MoreTypes.Decimal
                                                                     FDB.MoreTypes.Decimal
                                                                     (FDB.MoreTypes.Decimal,
                                                                      FDB.MoreTypes.Decimal)
                                                              [LclId]
                                                              sat_s89g
                                                                = FDB.GADTForall.avgAgg
                                                                    @ FDB.MoreTypes.Decimal
                                                                    GHC.Float.$fFractionalDouble } in
                                                            FDB.GADTForall.mapAgg
                                                              @ FDB.MoreTypes.Decimal
                                                              @ FDB.MoreTypes.Decimal
                                                              @ (FDB.MoreTypes.Decimal,
                                                                 FDB.MoreTypes.Decimal)
                                                              @ TPCH.Functional.Schema.LineItem
                                                              sat_s89g
                                                              TPCH.Functional.Schema.l_extendedprice
                                                              itemsSubset_s88L } in
                                                      GHC.Base.>>=
                                                        @ FDB.GADTForall.SQ
                                                        FDB.GADTForall.$fMonadSQ
                                                        @ FDB.MoreTypes.Decimal
                                                        @ ((GHC.Types.Char, GHC.Types.Char),
                                                           (FDB.MoreTypes.Decimal,
                                                            FDB.MoreTypes.Decimal,
                                                            FDB.MoreTypes.Decimal,
                                                            FDB.MoreTypes.Decimal,
                                                            FDB.MoreTypes.Decimal,
                                                            FDB.MoreTypes.Decimal,
                                                            FDB.MoreTypes.Decimal, h_a84z))
                                                        sat_s89h
                                                        sat_s89t } in
                                              let {
                                                sat_s89e [Occ=Once]
                                                  :: FDB.GADTForall.SQ FDB.MoreTypes.Decimal
                                                [LclId]
                                                sat_s89e
                                                  = let {
                                                      sat_s89d [Occ=Once]
                                                        :: FDB.GADTForall.Agg
                                                             FDB.MoreTypes.Decimal
                                                             FDB.MoreTypes.Decimal
                                                             (FDB.MoreTypes.Decimal,
                                                              FDB.MoreTypes.Decimal)
                                                      [LclId]
                                                      sat_s89d
                                                        = FDB.GADTForall.avgAgg
                                                            @ FDB.MoreTypes.Decimal
                                                            GHC.Float.$fFractionalDouble } in
                                                    FDB.GADTForall.mapAgg
                                                      @ FDB.MoreTypes.Decimal
                                                      @ FDB.MoreTypes.Decimal
                                                      @ (FDB.MoreTypes.Decimal,
                                                         FDB.MoreTypes.Decimal)
                                                      @ TPCH.Functional.Schema.LineItem
                                                      sat_s89d
                                                      TPCH.Functional.Schema.l_quantity
                                                      itemsSubset_s88L } in
                                              GHC.Base.>>=
                                                @ FDB.GADTForall.SQ
                                                FDB.GADTForall.$fMonadSQ
                                                @ FDB.MoreTypes.Decimal
                                                @ ((GHC.Types.Char, GHC.Types.Char),
                                                   (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                                                    FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                                                    FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                                                    FDB.MoreTypes.Decimal, h_a84z))
                                                sat_s89e
                                                sat_s89u } in
                                      let {
                                        sat_s89b [Occ=Once]
                                          :: FDB.GADTForall.SQ FDB.MoreTypes.Decimal
                                        [LclId]
                                        sat_s89b
                                          = let {
                                              sat_s89a [Occ=Once]
                                                :: FDB.GADTForall.Agg
                                                     FDB.MoreTypes.Decimal
                                                     FDB.MoreTypes.Decimal
                                                     FDB.MoreTypes.Decimal
                                              [LclId]
                                              sat_s89a
                                                = FDB.GADTForall.sumAgg
                                                    @ FDB.MoreTypes.Decimal
                                                    GHC.Float.$fNumDouble } in
                                            FDB.GADTForall.mapAgg
                                              @ FDB.MoreTypes.Decimal
                                              @ FDB.MoreTypes.Decimal
                                              @ FDB.MoreTypes.Decimal
                                              @ TPCH.Functional.Schema.LineItem
                                              sat_s89a
                                              charge_price_s88V
                                              itemsSubset_s88L } in
                                      GHC.Base.>>=
                                        @ FDB.GADTForall.SQ
                                        FDB.GADTForall.$fMonadSQ
                                        @ FDB.MoreTypes.Decimal
                                        @ ((GHC.Types.Char, GHC.Types.Char),
                                           (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                                            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                                            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                                            FDB.MoreTypes.Decimal, h_a84z))
                                        sat_s89b
                                        sat_s89v } in
                              let {
                                sat_s898 [Occ=Once] :: FDB.GADTForall.SQ FDB.MoreTypes.Decimal
                                [LclId]
                                sat_s898
                                  = let {
                                      sat_s897 [Occ=Once]
                                        :: FDB.GADTForall.Agg
                                             FDB.MoreTypes.Decimal
                                             FDB.MoreTypes.Decimal
                                             FDB.MoreTypes.Decimal
                                      [LclId]
                                      sat_s897
                                        = FDB.GADTForall.sumAgg
                                            @ FDB.MoreTypes.Decimal GHC.Float.$fNumDouble } in
                                    FDB.GADTForall.mapAgg
                                      @ FDB.MoreTypes.Decimal
                                      @ FDB.MoreTypes.Decimal
                                      @ FDB.MoreTypes.Decimal
                                      @ TPCH.Functional.Schema.LineItem
                                      sat_s897
                                      disc_price_s88P
                                      itemsSubset_s88L } in
                              GHC.Base.>>=
                                @ FDB.GADTForall.SQ
                                FDB.GADTForall.$fMonadSQ
                                @ FDB.MoreTypes.Decimal
                                @ ((GHC.Types.Char, GHC.Types.Char),
                                   (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                                    FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                                    FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                                    FDB.MoreTypes.Decimal, h_a84z))
                                sat_s898
                                sat_s89w } in
                      let {
                        sat_s895 [Occ=Once] :: FDB.GADTForall.SQ FDB.MoreTypes.Decimal
                        [LclId]
                        sat_s895
                          = let {
                              sat_s894 [Occ=Once]
                                :: FDB.GADTForall.Agg
                                     FDB.MoreTypes.Decimal
                                     FDB.MoreTypes.Decimal
                                     FDB.MoreTypes.Decimal
                              [LclId]
                              sat_s894
                                = FDB.GADTForall.sumAgg
                                    @ FDB.MoreTypes.Decimal GHC.Float.$fNumDouble } in
                            FDB.GADTForall.mapAgg
                              @ FDB.MoreTypes.Decimal
                              @ FDB.MoreTypes.Decimal
                              @ FDB.MoreTypes.Decimal
                              @ TPCH.Functional.Schema.LineItem
                              sat_s894
                              TPCH.Functional.Schema.l_extendedprice
                              itemsSubset_s88L } in
                      GHC.Base.>>=
                        @ FDB.GADTForall.SQ
                        FDB.GADTForall.$fMonadSQ
                        @ FDB.MoreTypes.Decimal
                        @ ((GHC.Types.Char, GHC.Types.Char),
                           (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                            FDB.MoreTypes.Decimal, h_a84z))
                        sat_s895
                        sat_s89x } in
              let {
                sat_s892 [Occ=Once] :: FDB.GADTForall.SQ FDB.MoreTypes.Decimal
                [LclId]
                sat_s892
                  = let {
                      sat_s891 [Occ=Once]
                        :: FDB.GADTForall.Agg
                             FDB.MoreTypes.Decimal FDB.MoreTypes.Decimal FDB.MoreTypes.Decimal
                      [LclId]
                      sat_s891
                        = FDB.GADTForall.sumAgg
                            @ FDB.MoreTypes.Decimal GHC.Float.$fNumDouble } in
                    FDB.GADTForall.mapAgg
                      @ FDB.MoreTypes.Decimal
                      @ FDB.MoreTypes.Decimal
                      @ FDB.MoreTypes.Decimal
                      @ TPCH.Functional.Schema.LineItem
                      sat_s891
                      TPCH.Functional.Schema.l_quantity
                      itemsSubset_s88L } in
              GHC.Base.>>=
                @ FDB.GADTForall.SQ
                FDB.GADTForall.$fMonadSQ
                @ FDB.MoreTypes.Decimal
                @ ((GHC.Types.Char, GHC.Types.Char),
                   (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                    FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                    FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
                    FDB.MoreTypes.Decimal, h_a84z))
                sat_s892
                sat_s89y
              }
              } } in
      FDB.GADTForall.subqMap
        @ ((GHC.Types.Char, GHC.Types.Char),
           FDB.GADTForall.Q TPCH.Functional.Schema.LineItem)
        @ ((GHC.Types.Char, GHC.Types.Char),
           (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
            FDB.MoreTypes.Decimal, h_a84z))
        sat_s89z
        sat_s89F

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
sat_s89I
  :: GHC.Types.Int
     -> FDB.GADTForall.Q
          ((GHC.Types.Char, GHC.Types.Char),
           (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
            FDB.MoreTypes.Decimal, GHC.Integer.Type.Integer))
[LclId]
sat_s89I
  = \ (eta_B1 [Occ=Once] :: GHC.Types.Int) ->
      TPCH.Functional.Q1.q1Unordered
        @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger eta_B1

-- RHS size: {terms: 7, types: 34, coercions: 0, joins: 0/1}
sat_s89H
  :: FDB.GADTForall.Q
       ((GHC.Types.Char, GHC.Types.Char),
        (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
         FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
         FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
         FDB.MoreTypes.Decimal, GHC.Integer.Type.Integer))
     -> FDB.GADTForall.Q
          ((GHC.Types.Char, GHC.Types.Char),
           (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
            FDB.MoreTypes.Decimal, GHC.Integer.Type.Integer))
[LclId]
sat_s89H
  = let {
      sat_s89G [Occ=Once]
        :: GHC.Classes.Ord (GHC.Types.Char, GHC.Types.Char)
      [LclId]
      sat_s89G
        = GHC.Classes.$fOrd(,)
            @ GHC.Types.Char
            @ GHC.Types.Char
            GHC.Classes.$fOrdChar
            GHC.Classes.$fOrdChar } in
    FDB.GADTForall.orderBy
      @ (GHC.Types.Char, GHC.Types.Char)
      @ ((GHC.Types.Char, GHC.Types.Char),
         (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
          FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
          FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
          FDB.MoreTypes.Decimal, GHC.Integer.Type.Integer))
      sat_s89G
      (Data.Tuple.fst
         @ (GHC.Types.Char, GHC.Types.Char)
         @ (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
            FDB.MoreTypes.Decimal, GHC.Integer.Type.Integer))

-- RHS size: {terms: 3, types: 29, coercions: 0, joins: 0/0}
TPCH.Functional.Q1.q1
  :: GHC.Types.Int
     -> FDB.GADTForall.Q
          ((GHC.Types.Char, GHC.Types.Char),
           (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
            FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
            FDB.MoreTypes.Decimal, GHC.Integer.Type.Integer))
[GblId]
TPCH.Functional.Q1.q1
  = GHC.Base..
      @ (FDB.GADTForall.Q
           ((GHC.Types.Char, GHC.Types.Char),
            (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
             FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
             FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
             FDB.MoreTypes.Decimal, GHC.Integer.Type.Integer)))
      @ (FDB.GADTForall.Q
           ((GHC.Types.Char, GHC.Types.Char),
            (FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
             FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
             FDB.MoreTypes.Decimal, FDB.MoreTypes.Decimal,
             FDB.MoreTypes.Decimal, GHC.Integer.Type.Integer)))
      @ GHC.Types.Int
      sat_s89H
      sat_s89I



